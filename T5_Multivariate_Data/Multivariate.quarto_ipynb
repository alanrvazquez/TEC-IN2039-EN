{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Multivariable Data  \n",
        "subtitle: \"IN2039: Data Visualization for Decision Making\"\n",
        "author: \n",
        "  - name: Alan R. Vazquez\n",
        "    affiliations:\n",
        "      - name: Department of Industrial Engineering\n",
        "format: \n",
        "  revealjs:\n",
        "    chalkboard: true\n",
        "    multiplex: true\n",
        "    footer: \"Tecnologico de Monterrey\"\n",
        "    logo: IN2039_logo.png\n",
        "    css: style.css\n",
        "    slide-number: True\n",
        "execute:\n",
        "  echo: true  \n",
        "editor: visual\n",
        "---\n",
        "\n",
        "\n",
        "## Agenda\n",
        "\n",
        "1.  Data with more than one variable\n",
        "\n",
        "2.  Two numerical variables\n",
        "\n",
        "3.  One numerical and one categorical variable\n",
        "\n",
        "4.  Two categorical variables\n",
        "\n",
        "5.  Three or more variables\n",
        "\n",
        "## Load Libraries\n",
        "\n",
        "Let's import the `pandas`, `matplotlib`, and `seaborn` in Google Colab and R before starting.\n"
      ],
      "id": "76803728"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "# Don't forget to install the 'ggformula' library in Google Colab.\n",
        "# install.packages(\"ggformula\")\n",
        "\n",
        "import pandas as pd      \n",
        "import matplotlib.pyplot as plt  \n",
        "import seaborn as sns    "
      ],
      "id": "58e6cfdc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Multivariate data\n",
        "\n",
        "</br>\n",
        "\n",
        "Multivariate data consists of datasets that contain observations of two or more variables.\n",
        "\n",
        "::: incremental\n",
        "-   Variables can be numerical or categorical.\n",
        "\n",
        "-   Variables may or may not depend on each other.\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "In fact, the **goal** is to determine whether there is a relationship between the variables and the type of relationship.\n",
        "\n",
        "## Example 1\n",
        "\n",
        "Consider data from 392 cars, including miles per gallon, number of cylinders, horsepower, weight, acceleration, year, origin, among other variables.\n",
        "\n",
        "The data is stored in the file \"auto_dataset.xlsx\".\n"
      ],
      "id": "3fea01e2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "\n",
        "auto_data = pd.read_excel(\"auto_dataset.xlsx\")\n",
        "auto_data.head()"
      ],
      "id": "6988828a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Principle 1: Formulate the question\n",
        "\n",
        "In the context of multiple-variable data, typical questions to study include:\n",
        "\n",
        "::: incremental\n",
        "-   ¿How are variable $X$ and variable $Y$ related?\n",
        "\n",
        "-   Is the distribution of variable $X$ the same across all subgroups defined by variable $Z$?\n",
        "\n",
        "-   Are there any unusual observations in the combination of values for variables $X$ and $Y$?\n",
        "\n",
        "-   Are there any unusual observations in $X$ for a subgroup of variable $Z$?\n",
        ":::\n",
        "\n",
        "## Principle 2: Turn data into information\n",
        "\n",
        "There are various types of graphs that help us explore relationships between two or more variables.\n",
        "\n",
        "::: center\n",
        "| Type        | Graph Type                                |\n",
        "|:------------|:------------------------------------------|\n",
        "| Numerical   | Scatter plot, line graph                  |\n",
        "| Categorical | Side-by-side bar chart, stacked bar chart |\n",
        "| Mixed       | GSide-by-side box plot, bubble chart      |\n",
        ":::\n",
        "\n",
        "::: notes\n",
        "For two features, the combination of types (both quantitative, both qualitative, or a mix) matters.\n",
        ":::\n",
        "\n",
        "# Two Numerical Variables\n",
        "\n",
        "## Independent and dependent variables\n",
        "\n",
        "When investigating the relationship between two variables (numerical or categorical), we use specific terminology.\n",
        "\n",
        ". . .\n",
        "\n",
        "One variable is called the *dependent* or *response variable*, denoted by the letter $Y$.\n",
        "\n",
        ". . .\n",
        "\n",
        "The other variable is called the *independent* or *predictor variable*, denoted by the letter $X$.\n",
        "\n",
        ". . .\n",
        "\n",
        "> Our goal is to determine whether changes in variable $X$ are associated with changes in variable $Y$, and the nature of this association.\n",
        "\n",
        "## Scatter Plot\n",
        "\n",
        "</br>\n",
        "\n",
        "The most common graph for examining the relationship between two numerical variables is the [***scatter plot***]{style=\"color:#174062;\"}.\n",
        "\n",
        ". . .\n",
        "\n",
        "Variables $X$ and $Y$ are placed on the horizontal and vertical axes, respectively. Each point on the graph represents a pair of $X$ and $Y$ values.\n",
        "\n",
        ". . .\n",
        "\n",
        "> The goal is to explore linear or non-linear relationships between variables.\n",
        "\n",
        "## Scatterplot in Python\n",
        "\n",
        "To create scatter plots in **seaborn**, we use the function `scatterplot()`.\n",
        "\n",
        ". . .\n",
        "\n",
        "For example, let's create a plot to explore the relationship between a car's weight (`weight`) and its fuel efficiency in miles per gallon (`mpg`)\n"
      ],
      "id": "69d628a0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "sns.scatterplot(data = auto_data, x = \"weight\", y = \"mpg\")\n",
        "plt.show()"
      ],
      "id": "9187a559",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n"
      ],
      "id": "5beaa558"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "sns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\", color=\"blue\", s=50)\n",
        "plt.show()"
      ],
      "id": "7077deff",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Principle 3: Apply gaphic design principles\n",
        "\n",
        "Following Principle 3, we can modify the default function values to define different colors or shapes for the points in the graph.\n",
        "\n",
        "Specifically, you can change the color, shape, and size of points using the arguments `color`, `shape` and `size`, respectively.\n",
        "\n",
        "</br>\n",
        "\n",
        "`sns.scatterplot(data=data_set, x=X, y=Y, color, marker, s)`\n",
        "\n",
        "## \n"
      ],
      "id": "991d0007"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "sns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\", color=\"blue\", \n",
        "                marker=\"x\", s=100)\n",
        "plt.show()"
      ],
      "id": "d0e396b3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Possible Point Shapes\n",
        "\n",
        "To change the symbols used for points in a scatter plot, set the `shape` parameter to a number or character from the chart below.\n",
        "\n",
        "![](images/FIG-SCATTER-SHAPES-CHART-1.png){fig-align=\"center\" width=\"530\" height=\"344\"}\n",
        "\n",
        "## \n",
        "\n",
        "Continuing with Principle 3, you can use previously seen functions to further improve the chart's appearance.\n"
      ],
      "id": "6637d264"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: true\n",
        "\n",
        "\n",
        "# Create the scatter plot with custom color and size\n",
        "sns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\", color=\"darkblue\", s=50)\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Relación de peso y millas por galón en autos\", fontsize=25)\n",
        "plt.xlabel(\"Peso (lb)\", fontsize=20)\n",
        "plt.ylabel(\"Millas por galón\", fontsize=20)\n",
        "plt.tick_params(axis='both', labelsize=20)\n",
        "\n",
        "# Show the plot\n",
        "plt.show() "
      ],
      "id": "d64e083d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Include Zero\n",
        "\n",
        "In the previous chart, the minimum vertical axis value is around 10. To adjust the minimum value to 0, we use the additional command below.\n"
      ],
      "id": "fd42d7c9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Create the scatter plot with custom color and size\n",
        "sns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\", color=\"darkblue\", s=50)\n",
        "\n",
        "# Set y-axis limits\n",
        "plt.ylim(0, 50)\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Relación de peso y millas por galón en autos\", fontsize=25)\n",
        "plt.xlabel(\"Peso (lb)\", fontsize=20)\n",
        "plt.ylabel(\"Millas por galón\", fontsize=20)\n",
        "plt.tick_params(axis='both', labelsize=20)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "65cf0305",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "If necessary, we can also adjust the horizontal axis to show 0 as well.\n"
      ],
      "id": "501ddf10"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Create the scatter plot with custom color and size\n",
        "sns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\", color=\"darkblue\", s=50)\n",
        "\n",
        "# Set x-axis limits\n",
        "plt.xlim(0, 5500)\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Relación de peso y millas por galón en autos\", fontsize=25)\n",
        "plt.xlabel(\"Peso (lb)\", fontsize=20)\n",
        "plt.ylabel(\"Millas por galón\", fontsize=20)\n",
        "plt.tick_params(axis='both', labelsize=20)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "5808d472",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Individual Graphs\n",
        "\n",
        "Individual variable graphs (such as histograms) do not allow us to study the relationship between two variables. They only provide information on the *distribution* of each variable.\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "98ecb36d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: true\n",
        "\n",
        "# Create the histogram\n",
        "sns.histplot(data=auto_data, x=\"mpg\", color=\"darkblue\", kde=False, edgecolor=\"black\")\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Distribución de milas por galón\", fontsize=25)\n",
        "plt.xlabel(\"Millas por galón\", fontsize=20)\n",
        "plt.ylabel(\"Frecuencia\", fontsize=20)\n",
        "plt.tick_params(axis='both', labelsize=20)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "d9c4a921",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "baa44457"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: true\n",
        "\n",
        "# Create the histogram\n",
        "sns.histplot(data=auto_data, x=\"weight\", color=\"darkblue\", kde=False, edgecolor=\"black\")\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Distribución de peso\", fontsize=25)\n",
        "plt.xlabel(\"Peso (lb)\", fontsize=20)\n",
        "plt.ylabel(\"Frecuencia\", fontsize=20)\n",
        "plt.tick_params(axis='both', labelsize=20)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "1bca1101",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "\n",
        "## GLine Graph\n",
        "\n",
        "A line graph is a visual representation of data where data points are connected by a line. Axes:\n",
        "\n",
        "-   $X$ (horizontal): Represents time or the independent variable.\n",
        "-   $Y$ (vertical): Represents the dependent variable.\n",
        "\n",
        "Each point represents a value at a given moment.\n",
        "\n",
        ". . .\n",
        "\n",
        "> The objective is to explore trends over time or the evolution of a continuous variable.\n",
        "\n",
        "## Example 2\n",
        "\n",
        "Consider the data in the file \"spotify.xlsx\". This dataset contains the global daily streams of the top five most popular songs on the music streaming service Spotify in 2017.\n"
      ],
      "id": "7cb6c3d3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "\n",
        "# Read the Excel file\n",
        "spotify_data = pd.read_excel(\"spotify.xlsx\")\n",
        "\n",
        "# View the first 3 rows\n",
        "spotify_data.head(3)"
      ],
      "id": "f4f01a0b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "We will focus on the song *Despacito* by Luis Fonsi. To construct scatter plots, we use the function`gf_line(Y ~ X, data = data_set)`.\n"
      ],
      "id": "1a95d8e1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "\n",
        "# Create the line plot\n",
        "sns.lineplot(data=spotify_data, x=\"Date\", y=\"Despacito\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "9d9b63f6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Applying Principle 3\n",
        "\n",
        "We can change various aspects of the graph using additional arguments `linetype`, `size`, and `color`.\n",
        "\n",
        "</br>\n",
        "\n",
        "`gf_line(Y ~ X, linetype, size, color, data = data_set)`.\n",
        "\n",
        "## \n"
      ],
      "id": "293f4045"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "\n",
        "\n",
        "# Create the line plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.lineplot(data=spotify_data, x=\"Date\", y=\"Despacito\", color=\"darkblue\", linewidth=1.3)\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Popularidad de la canción Despacito de Luis Fonsi\", fontsize=25)\n",
        "plt.xlabel(\"Fecha\", fontsize=18)\n",
        "plt.ylabel(\"Número de reproducciones en Spotify\", fontsize=18)\n",
        "plt.tick_params(axis='both', labelsize=20)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "6ee660b5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Line Types\n",
        "\n",
        "To change the line type, set the `linetype` parameter to a number or a word shown below.\n",
        "\n",
        "![](images/clipboard-2759814636.png){fig-align=\"center\"}\n",
        "\n",
        "# A Categorical and a Numerical Variable\n",
        "\n",
        "## !Divide the Data into Groups!\n",
        "\n",
        "To examine the relationship between a numerical and a categorical variable, we use the categorical variable to divide the data into groups. This way, we **compare the distribution** of the numerical variable among these groups.\n",
        "\n",
        ". . .\n",
        "\n",
        "In this context:\n",
        "\n",
        "-   $X$ is the categorical variable.\n",
        "-   $Y$ is the numerical variable.\n",
        "\n",
        ". . .\n",
        "\n",
        "The [side-by-side boxplot]{style=\"color:#D70040;\"} is the most effective way to study the relationship between a categorical and a numerical variable.\n",
        "\n",
        "## Boxplot by Groups\n",
        "\n",
        "The side-by-side boxplot compares the distribution of a variable across different groups.\n",
        "\n",
        "</br>\n",
        "\n",
        "The plot is obtained using the function:\n",
        "\n",
        "`gf_boxplot(Y ~ X, data = dataset)`.\n",
        "\n",
        "## \n",
        "\n",
        "For example, if we want to compare the distributions of miles per gallon of cars built in America, Europe, or Japan, we use the following command:\n"
      ],
      "id": "1e894eae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Create the boxplot\n",
        "sns.boxplot(data=auto_data, x=\"origin\", y=\"mpg\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show() "
      ],
      "id": "227dfd44",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Applying Principle 3\n"
      ],
      "id": "f83ad49a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: true\n",
        "\n",
        "\n",
        "# Create the boxplot\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(data=auto_data, x=\"origin\", y=\"mpg\", color=\"lightblue\", fliersize=5, linewidth=1.5, boxprops=dict(color=\"black\"))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Distribución de Millas por Galón por Origen\", fontsize=25)\n",
        "plt.xlabel(\"Origen\", fontsize=20)\n",
        "plt.ylabel(\"Millas por galón\", fontsize=20)\n",
        "plt.tick_params(axis='both', labelsize=20)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "5a65c648",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "We can also change the format of outlier points using the arguments `outlier.color`, `outlier.shape`, and `outlier.size`.\n"
      ],
      "id": "3aa985b3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: true\n",
        "\n",
        "# Create the boxplot\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(data=auto_data, x=\"origin\", y=\"mpg\", color=\"lightblue\", \n",
        "            linewidth=1.5, fliersize=8, boxprops=dict(color=\"black\"), \n",
        "            flierprops=dict(marker=\"o\", markerfacecolor=\"red\", markersize=8, markeredgewidth=2))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Distribución de Millas por Galón por Origen\", fontsize=25)\n",
        "plt.xlabel(\"Origen\", fontsize=20)\n",
        "plt.ylabel(\"Millas por galón\", fontsize=20)\n",
        "plt.tick_params(axis='both', labelsize=20)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "6490bcf2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Plotting Statistical Summaries by Groups\n",
        "\n",
        "Alternatively, we can summarize the values of the numerical variable $Y$ for each category of the variable $X$ using the median or the mean.\n",
        "\n",
        "For example, let's plot the average miles per gallon of cars produced in America, Europe, and Japan. First, we calculate the average for each category using `group_by()` and `summarise()`.\n"
      ],
      "id": "33c498f8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Example data\n",
        "data = [10, 20, 30, 40, 50]\n",
        "\n",
        "# Calculate some summary statistics\n",
        "mean_value = np.mean(data)\n",
        "median_value = np.median(data)\n",
        "std_dev = np.std(data)\n",
        "\n",
        "print(\"Mean:\", mean_value)\n",
        "print(\"Median:\", median_value)\n",
        "print(\"Standard Deviation:\", std_dev)"
      ],
      "id": "9429f22f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "The data to be plotted are:\n"
      ],
      "id": "1ddaea7e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Example dataset (replace with actual 'auto_data' dataframe)\n",
        "auto_data = pd.DataFrame({\n",
        "    'mpg': [21, 22, 23, 24, 25],\n",
        "    'weight': [3000, 3200, 3400, 3600, 3800],\n",
        "    'origin': ['USA', 'Europe', 'USA', 'Japan', 'Europe']\n",
        "})\n",
        "\n",
        "# Summary statistics for the dataset\n",
        "resumen_autos = auto_data.describe()"
      ],
      "id": "0e689db6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Two common visualization types for plotting a numerical and a discrete variable when there is only one value per category are:\n",
        "\n",
        "-   Cleveland dot plot\n",
        "-   Bar chart\n",
        "\n",
        "## Cleveland Dot Plot\n",
        "\n",
        "The Cleveland dot plot encodes quantitative data across different categories. It is an alternative to a bar chart. It is obtained using the function `gf_point()`.\n"
      ],
      "id": "dcac24d8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: false\n",
        "\n",
        "# Example summary data (replace with actual 'resumen_autos' dataframe)\n",
        "resumen_autos = pd.DataFrame({\n",
        "    'origin': ['USA', 'Europe', 'Japan'],\n",
        "    'Promedio.mpg': [22.5, 25.0, 27.5]\n",
        "})\n",
        "\n",
        "# Create the scatter plot\n",
        "sns.scatterplot(data=resumen_autos, x='Promedio.mpg', y='origin')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Promedio de Millas por Galón por Origen\", fontsize=20)\n",
        "plt.xlabel(\"Promedio de Millas por Galón\", fontsize=15)\n",
        "plt.ylabel(\"Origen\", fontsize=15)\n",
        "\n",
        "# Show the plot\n",
        "plt.show() "
      ],
      "id": "c0ed4a1f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Improving the Plot\n",
        "\n",
        "We apply Principle 3 to improve the plot.\n"
      ],
      "id": "4136cabd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: true\n",
        "\n",
        "# Example summary data (replace with actual 'resumen_autos' dataframe)\n",
        "resumen_autos = pd.DataFrame({\n",
        "    'origin': ['USA', 'Europe', 'Japan'],\n",
        "    'Promedio.mpg': [22.5, 25.0, 27.5]\n",
        "})\n",
        "\n",
        "# Create the scatter plot\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(data=resumen_autos, x='Promedio.mpg', y='origin', s=100, color='pink')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Comparación de autos de diferentes regiones\", fontsize=20)\n",
        "plt.xlabel(\"Promedio de Millas por Galón\", fontsize=20)\n",
        "plt.ylabel(\"Origen\", fontsize=20)\n",
        "\n",
        "# Set x-axis limits\n",
        "plt.xlim(0, 35)\n",
        "\n",
        "# Apply theme (similar to theme_bw in R)\n",
        "sns.set_style(\"whitegrid\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "a8085fb7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Bar Chart\n",
        "\n",
        "To create a bar chart where the bar length equals a specific value, we use the function `gf_col()` dfrom the **ggformula** library.\n"
      ],
      "id": "c3dd1a46"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: false\n",
        "\n",
        "# Example summary data (replace with actual 'resumen_autos' dataframe)\n",
        "resumen_autos = pd.DataFrame({\n",
        "    'origin': ['USA', 'Europe', 'Japan'],\n",
        "    'Promedio.mpg': [22.5, 25.0, 27.5]\n",
        "})\n",
        "\n",
        "# Create the column plot (bar plot)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(data=resumen_autos, x='origin', y='Promedio.mpg', color='lightblue')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Promedio de Millas por Galón por Origen\", fontsize=20)\n",
        "plt.xlabel(\"Origen\", fontsize=15)\n",
        "plt.ylabel(\"Promedio de Millas por Galón\", fontsize=15)\n",
        "\n",
        "# Show the plot\n",
        "plt.show() "
      ],
      "id": "a8b869aa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "We can use similar commands as the Cleveland dot plot to improve the bar chart.\n"
      ],
      "id": "0c60174d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: true\n",
        "\n",
        "# Example summary data (replace with actual 'resumen_autos' dataframe)\n",
        "resumen_autos = pd.DataFrame({\n",
        "    'origin': ['USA', 'Europe', 'Japan'],\n",
        "    'Promedio.mpg': [22.5, 25.0, 27.5]\n",
        "})\n",
        "\n",
        "# Create the bar plot (column plot)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(data=resumen_autos, x='origin', y='Promedio.mpg', color='pink')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Comparación de autos de diferentes regiones\", fontsize=20)\n",
        "plt.xlabel(\"Promedio de Millas por Galón\", fontsize=20)\n",
        "plt.ylabel(\"Origen\", fontsize=20)\n",
        "\n",
        "# Apply grid style similar to theme_bw() in R\n",
        "sns.set_style(\"whitegrid\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "c7035074",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Two Categorical Variables\n",
        "\n",
        "## !Divide the Data into Groups!\n",
        "\n",
        "With two categorical variables, we compare the distribution of one variable across subgroups defined by the other variable.\n",
        "\n",
        "In fact, we keep one variable constant and plot the distribution of the other.\n",
        "\n",
        ". . .\n",
        "\n",
        "To do this, the most popular charts are extensions of bar graphs:\n",
        "\n",
        "-   Stacked bar charts\n",
        "-   Side-by-side bar charts\n",
        "\n",
        "## Example 3\n",
        "\n",
        "As an example, let's consider the data in the file \"penguins.xlsx\".\n"
      ],
      "id": "04a6dca8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "\n",
        "# Read the Excel file\n",
        "penguins_data = pd.read_excel(\"penguins.xlsx\")\n",
        "\n",
        "# Display the first few rows of the dataset\n",
        "print(penguins_data.head())"
      ],
      "id": "968b4274",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "The data has two categorical variables:\n",
        "\n",
        "-   The species of penguins (`species`).\n",
        "-   The island they come from (`island`).\n",
        "\n",
        "Make sure they are specified as `factor` in R!\n"
      ],
      "id": "ec946c71"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "\n",
        "# Convert specified columns to categorical (factor in R)\n",
        "penguins_data[['species', 'island', 'sex']] = penguins_data[['species', 'island', 'sex']].astype('category')"
      ],
      "id": "1bbaefac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Stacked Bar Chart\n",
        "\n",
        "The side-by-side bar chart is generated using the `gf_bar()`, function, assigning the $X$ variable to the `fill`argument.\n",
        "\n",
        "The variable name must be preceded by a tilde `~X`.\n",
        "\n",
        "</br>\n",
        "\n",
        ". . .\n",
        "\n",
        "For example, to study the distribution of penguin species across the three different islands, we use the following:\n"
      ],
      "id": "89d17b16"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "# Example dataset (replace with actual 'penguins_data' dataframe)\n",
        "penguins_data = pd.DataFrame({\n",
        "    'species': ['Adelie', 'Chinstrap', 'Gentoo', 'Adelie', 'Chinstrap'],\n",
        "    'island': ['Torgersen', 'Dream', 'Biscoe', 'Torgersen', 'Dream']\n",
        "})\n",
        "\n",
        "# Create the bar plot with 'species' on the x-axis and 'island' for color fill\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(data=penguins_data, x='species', hue='island', palette='Set1')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Distribution of Penguin Species by Island\", fontsize=20)\n",
        "plt.xlabel(\"Species\", fontsize=15)\n",
        "plt.ylabel(\"Count\", fontsize=15)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "b59277df",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "The chart shows the frequency of each species, separated by island name.\n"
      ],
      "id": "d8694ee6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with actual 'penguins_data' dataframe)\n",
        "penguins_data = pd.DataFrame({\n",
        "    'species': ['Adelie', 'Chinstrap', 'Gentoo', 'Adelie', 'Chinstrap'],\n",
        "    'island': ['Torgersen', 'Dream', 'Biscoe', 'Torgersen', 'Dream']\n",
        "})\n",
        "\n",
        "# Create the bar plot with 'species' on the x-axis and 'island' for color fill\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(data=penguins_data, x='species', hue='island', palette='Set1')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Distribution of Penguin Species by Island\", fontsize=20)\n",
        "plt.xlabel(\"Species\", fontsize=15)\n",
        "plt.ylabel(\"Count\", fontsize=15)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "06dad81a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Side-by-Side Bar Chart\n",
        "\n",
        "An alternative to the previous chart is to place the bars side by side for the categories of the $X$ variable.\n",
        "\n",
        "In this case, we use the same commands with an extra argument: `position = position_dodge()`.\n"
      ],
      "id": "80d66e0b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "# Example dataset (replace with actual 'penguins_data' dataframe)\n",
        "penguins_data = pd.DataFrame({\n",
        "    'species': ['Adelie', 'Chinstrap', 'Gentoo', 'Adelie', 'Chinstrap'],\n",
        "    'island': ['Torgersen', 'Dream', 'Biscoe', 'Torgersen', 'Dream']\n",
        "})\n",
        "\n",
        "# Create the bar plot with 'species' on the x-axis and 'island' for color fill, with dodging\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(data=penguins_data, x='species', hue='island', dodge=True, palette='Set1')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Distribution of Penguin Species by Island\", fontsize=20)\n",
        "plt.xlabel(\"Species\", fontsize=15)\n",
        "plt.ylabel(\"Count\", fontsize=15)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "47e46577",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n"
      ],
      "id": "8c6c83e5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with actual 'penguins_data' dataframe)\n",
        "penguins_data = pd.DataFrame({\n",
        "    'species': ['Adelie', 'Chinstrap', 'Gentoo', 'Adelie', 'Chinstrap'],\n",
        "    'island': ['Torgersen', 'Dream', 'Biscoe', 'Torgersen', 'Dream']\n",
        "})\n",
        "\n",
        "# Create the bar plot with 'species' on the x-axis and 'island' for color fill, with dodging\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(data=penguins_data, x='species', hue='island', dodge=True, palette='Set1')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Distribution of Penguin Species by Island\", fontsize=20)\n",
        "plt.xlabel(\"Species\", fontsize=15)\n",
        "plt.ylabel(\"Count\", fontsize=15)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "60066353",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Stacked or Side-by-Side?\n",
        "\n",
        "The main difference between stacked and side-by-side bar charts is that the side-by-side chart shows values in separate bars within a category.\n",
        "\n",
        "Advantages of **stacked** bars:\n",
        "\n",
        "-   Easier to understand what proportions of a whole are divided among segments.\n",
        "\n",
        "-   Visually adds up each proportion.\n",
        "\n",
        "## \n",
        "\n",
        "Advantages of **side-by-side** bars:\n",
        "\n",
        "-   Easier to compare the heights of each individual entity.\n",
        "\n",
        "-   Better for comparing between groups.\n",
        "\n",
        "## Statistical Summaries\n",
        "\n",
        "For categorical variables, the most common statistical summaries are frequency and relative frequency.\n",
        "\n",
        "With **dplyr**, we calculate frequency using the `count()`, function, which counts the unique values of one or more variables.\n"
      ],
      "id": "7627c1bc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Example dataset (replace with actual 'penguins_data' dataframe)\n",
        "penguins_data = pd.DataFrame({\n",
        "    'species': ['Adelie', 'Chinstrap', 'Gentoo', 'Adelie', 'Chinstrap'],\n",
        "    'island': ['Torgersen', 'Dream', 'Biscoe', 'Torgersen', 'Dream']\n",
        "})\n",
        "\n",
        "# Count occurrences of species per island and group by island\n",
        "count_data = penguins_data.groupby(['island', 'species']).size().reset_index(name='count')\n",
        "\n",
        "# Show the result\n",
        "print(count_data)"
      ],
      "id": "badf2d06",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "To calculate relative frequency, we use `mutate()` along with the `prop.table()`, function, which calculates the proportions of a column.\n"
      ],
      "id": "f5a384de"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Example dataset (replace with actual 'penguins_data' dataframe)\n",
        "penguins_data = pd.DataFrame({\n",
        "    'species': ['Adelie', 'Chinstrap', 'Gentoo', 'Adelie', 'Chinstrap'],\n",
        "    'island': ['Torgersen', 'Dream', 'Biscoe', 'Torgersen', 'Dream']\n",
        "})\n",
        "\n",
        "# Count occurrences of species per island and group by island\n",
        "count_data = penguins_data.groupby(['island', 'species']).size().reset_index(name='count')\n",
        "\n",
        "# Group by 'island' and calculate the proportion within each group\n",
        "count_data['Proporción'] = count_data.groupby('island')['count'].transform(lambda x: x / x.sum())\n",
        "\n",
        "# Show the result\n",
        "print(count_data)"
      ],
      "id": "40b06b1d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# More than One Variable\n",
        "\n",
        "## Charts for Three Variables\n",
        "\n",
        "-   When examining a distribution or relationship, we often want to compare it across data subgroups.\n",
        "\n",
        "-   This process of conditioning on additional variables leads to visualizations involving three or more variables.\n",
        "\n",
        "-   Here we explain how to create charts to visualize multiple variables.\n",
        "\n",
        "## Scatter Plot by Color\n",
        "\n",
        "For two numerical variables and one categorical variable.\n"
      ],
      "id": "b5f9b199"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with actual 'auto_data' dataframe)\n",
        "auto_data = pd.DataFrame({\n",
        "    'mpg': [21, 22, 23, 24, 25],\n",
        "    'weight': [2000, 2500, 3000, 3500, 4000],\n",
        "    'origin': ['USA', 'Europe', 'USA', 'Europe', 'Asia']\n",
        "})\n",
        "\n",
        "# Create the scatter plot with 'mpg' on the y-axis, 'weight' on the x-axis, and color based on 'origin'\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(data=auto_data, x='weight', y='mpg', hue='origin', palette='Set1')\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Scatter plot of MPG vs. Weight by Origin\", fontsize=20)\n",
        "plt.xlabel(\"Weight (lb)\", fontsize=15)\n",
        "plt.ylabel(\"Miles per Gallon (MPG)\", fontsize=15)\n",
        "\n",
        "# Show the plot\n",
        "plt.show() "
      ],
      "id": "10073c20",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Faceted or Lattice Plot\n",
        "\n",
        "A faceted plot visualizes the relationship or distribution of one or two variables for each subgroup defined by a third variable $Z$.\n",
        "\n",
        ". . .\n",
        "\n",
        "**Idea:** Create a chart for each subgroup of $Z$.\n",
        "\n",
        ". . .\n",
        "\n",
        "To create the plot, use the `gf_facet_grid` function with the following syntax:\n"
      ],
      "id": "798bc87a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| code-fold: false\n",
        "#| output: false\n",
        "\n",
        "# Example dataset (replace with actual 'auto_data' dataframe)\n",
        "auto_data = pd.DataFrame({\n",
        "    'mpg': [21, 22, 23, 24, 25],\n",
        "    'weight': [2000, 2500, 3000, 3500, 4000],\n",
        "    'origin': ['USA', 'Europe', 'USA', 'Europe', 'Asia']\n",
        "})\n",
        "\n",
        "# Create the scatter plot and facet by 'origin'\n",
        "g = sns.FacetGrid(auto_data, col='origin', height=5, aspect=1)\n",
        "g.map(sns.scatterplot, 'weight', 'mpg')\n",
        "\n",
        "# Customize the plot\n",
        "g.set_axis_labels(\"Weight (lb)\", \"Miles per Gallon (MPG)\")\n",
        "g.set_titles(\"{col_name} Origin\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "3f59471f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "The function produces a grid with 1 column and 3 rows of charts. Each row accommodates one category of `origin`.\n"
      ],
      "id": "f14e500d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with actual 'auto_data' dataframe)\n",
        "auto_data = pd.DataFrame({\n",
        "    'mpg': [21, 22, 23, 24, 25],\n",
        "    'weight': [2000, 2500, 3000, 3500, 4000],\n",
        "    'origin': ['USA', 'Europe', 'USA', 'Europe', 'Asia']\n",
        "})\n",
        "\n",
        "# Create the scatter plot and facet by 'origin'\n",
        "g = sns.FacetGrid(auto_data, col='origin', height=5, aspect=1)\n",
        "g.map(sns.scatterplot, 'weight', 'mpg')\n",
        "\n",
        "# Customize the plot\n",
        "g.set_axis_labels(\"Weight (lb)\", \"Miles per Gallon (MPG)\")\n",
        "g.set_titles(\"{col_name} Origin\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "dc1863d0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "If we change the order of the `origin` variable in the `gf_facet_grid`, function, we get a grid with three columns and one row of charts.\n"
      ],
      "id": "c8c0e91e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with actual 'auto_data' dataframe)\n",
        "auto_data = pd.DataFrame({\n",
        "    'mpg': [21, 22, 23, 24, 25],\n",
        "    'weight': [2000, 2500, 3000, 3500, 4000],\n",
        "    'origin': ['USA', 'Europe', 'USA', 'Europe', 'Asia']\n",
        "})\n",
        "\n",
        "# Create the scatter plot and facet by 'origin'\n",
        "g = sns.FacetGrid(auto_data, row='origin', height=5, aspect=1)\n",
        "g.map(sns.scatterplot, 'weight', 'mpg')\n",
        "\n",
        "# Customize the plot\n",
        "g.set_axis_labels(\"Weight (lb)\", \"Miles per Gallon (MPG)\")\n",
        "g.set_titles(\"{row_name} Origin\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "ddc5011b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Multiple Line Charts\n",
        "\n",
        "We can use the functions `gf_line()` and `gf_facet_grid()` to visualize the evolution of play counts for the 5 songs in the file \"spotify.xlsx\" over time.\n",
        "\n",
        "</br>\n",
        "\n",
        "However, we need to manipulate the data to obtain the format required by these functions.\n",
        "\n",
        "## The Required Format\n",
        "\n",
        "For a multiple line chart, we need to merge the columns `Shape of You`, `Despacito`, `Something Just Like This`, `HUMBLE` and `Unforgettable` into two columns.\n",
        "\n",
        "One column will contain the number of plays, and the other will contain the song title.\n",
        "\n",
        "Both columns will be ordered by the variable `Date`.\n",
        "\n",
        "## A New Library: tidyr\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "![](images/tidyverse.jpeg){fig-align=\"center\" width=\"491\" height=\"374\"}\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "-   **tidyr** allows reshaping and regrouping a dataset.\n",
        "\n",
        "-   It is part of a collection of data science packages called *tidyverse*.\n",
        "\n",
        "-   <https://tidyr.tidyverse.org/>\n",
        ":::\n",
        ":::::\n",
        "\n",
        "Load it in Google Colab with the following code:\n",
        "\n",
        "\n",
        "```{pyhton}\n",
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "import pandas as pd\n",
        "```\n",
        "\n",
        "\n",
        "## \n",
        "\n",
        "To format the data, we use the `pivot_longer()` function from the **tidyr** library.\n"
      ],
      "id": "85248be0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with actual 'spotify_data' dataframe)\n",
        "spotify_data = pd.DataFrame({\n",
        "    'Date': ['2023-01-01', '2023-01-02', '2023-01-03'],\n",
        "    'Shape of You': [100, 150, 120],\n",
        "    'Despacito': [200, 180, 190],\n",
        "    'Something Just Like This': [120, 130, 140],\n",
        "    'HUMBLE.': [300, 280, 290],\n",
        "    'Unforgettable': [250, 260, 240]\n",
        "})\n",
        "\n",
        "# Pivot longer: melt the dataframe\n",
        "data_lines = spotify_data.melt(id_vars=[\"Date\"], \n",
        "                                value_vars=[\"Shape of You\", \"Despacito\", \"Something Just Like This\", \"HUMBLE.\", \"Unforgettable\"], \n",
        "                                var_name=\"Cancion\", \n",
        "                                value_name=\"Reproducciones\")\n",
        "\n",
        "# Show the first few rows\n",
        "print(data_lines.head())"
      ],
      "id": "44686f78",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "Now, we apply similar functions to the`data_lines`object.\n"
      ],
      "id": "9da7c88a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with actual 'data_lines' dataframe)\n",
        "import pandas as pd\n",
        "data_lines = pd.DataFrame({\n",
        "    'Date': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-01', '2023-01-02', '2023-01-03'],\n",
        "    'Cancion': ['Shape of You', 'Shape of You', 'Shape of You', 'Despacito', 'Despacito', 'Despacito'],\n",
        "    'Reproducciones': [100, 150, 120, 200, 180, 190]\n",
        "})\n",
        "\n",
        "# Create the line plot and facet by 'Cancion'\n",
        "g = sns.FacetGrid(data_lines, col='Cancion', height=5, aspect=1)\n",
        "g.map(sns.lineplot, 'Date', 'Reproducciones')\n",
        "\n",
        "# Customize the plot\n",
        "g.set_axis_labels(\"Date\", \"Reproductions\")\n",
        "g.set_titles(\"{col_name} Song\")\n",
        "\n",
        "# Rotate the x-axis labels for better readability\n",
        "for ax in g.axes.flat:\n",
        "    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "1cf9c01a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "Or we can plot all lines on a single chart.\n"
      ],
      "id": "f3cfea95"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with actual 'data_lines' dataframe)\n",
        "import pandas as pd\n",
        "data_lines = pd.DataFrame({\n",
        "    'Date': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-01', '2023-01-02', '2023-01-03'],\n",
        "    'Cancion': ['Shape of You', 'Shape of You', 'Shape of You', 'Despacito', 'Despacito', 'Despacito'],\n",
        "    'Reproducciones': [100, 150, 120, 200, 180, 190]\n",
        "})\n",
        "\n",
        "# Create the line plot with color mapped to 'Cancion'\n",
        "sns.lineplot(x='Date', y='Reproducciones', hue='Cancion', data=data_lines)\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Reproductions by Song Over Time\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Reproductions\")\n",
        "plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "eabfe098",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Area Chart\n",
        "\n",
        "An area chart is a specialized form of a line chart, where points are connected with a continuous line, and the region beneath the line is filled with a solid color. It is generated using the `gf_area()`function from **ggformula**.\n"
      ],
      "id": "56ebdef2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with actual 'data_lines' dataframe)\n",
        "data_lines = pd.DataFrame({\n",
        "    'Date': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-01', '2023-01-02', '2023-01-03'],\n",
        "    'Cancion': ['Shape of You', 'Shape of You', 'Shape of You', 'Despacito', 'Despacito', 'Despacito'],\n",
        "    'Reproducciones': [100, 150, 120, 200, 180, 190]\n",
        "})\n",
        "\n",
        "# Set the Date column to datetime format\n",
        "data_lines['Date'] = pd.to_datetime(data_lines['Date'])\n",
        "\n",
        "# Create the area plot using seaborn\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.lineplot(x='Date', y='Reproducciones', hue='Cancion', data=data_lines, linewidth=2)\n",
        "\n",
        "# Fill the area under the line\n",
        "for song in data_lines['Cancion'].unique():\n",
        "    song_data = data_lines[data_lines['Cancion'] == song]\n",
        "    plt.fill_between(song_data['Date'], song_data['Reproducciones'], alpha=0.3, label=song)\n",
        "\n",
        "# Customize the plot\n",
        "plt.title(\"Reproductions by Song Over Time\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Reproductions\")\n",
        "plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n",
        "plt.legend(title=\"Song\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "0ce74258",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Applying Principle 3\n",
        "\n",
        "In addition to the previously seen functions, we can make the areas transparent using the `alpha`parameter.\n"
      ],
      "id": "5c07a150"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| code-fold: true\n",
        "#| echo: true\n",
        "\n",
        "# Example dataset (replace with your actual 'data_lines' DataFrame)\n",
        "data_lines = pd.DataFrame({\n",
        "    'Date': ['2023-01-01', '2023-01-02', '2023-01-03',\n",
        "             '2023-01-01', '2023-01-02', '2023-01-03'],\n",
        "    'Cancion': ['Shape of You', 'Shape of You', 'Shape of You',\n",
        "                'Despacito', 'Despacito', 'Despacito'],\n",
        "    'Reproducciones': [100, 150, 120, 200, 180, 190]\n",
        "})\n",
        "\n",
        "# Ensure that Date is a datetime type\n",
        "data_lines['Date'] = pd.to_datetime(data_lines['Date'])\n",
        "\n",
        "# Use a style similar to theme_bw (a clean white background with gridlines)\n",
        "plt.style.use('seaborn-whitegrid')\n",
        "\n",
        "# Create the figure and axis\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "\n",
        "# Choose a color palette for the different songs\n",
        "unique_songs = data_lines['Cancion'].unique()\n",
        "palette = sns.color_palette(\"husl\", len(unique_songs))\n",
        "color_map = dict(zip(unique_songs, palette))\n",
        "\n",
        "# Plot the area for each song with a fill (alpha=0.5)\n",
        "for song in unique_songs:\n",
        "    # Get data for the song and sort by Date to ensure proper plotting\n",
        "    song_data = data_lines[data_lines['Cancion'] == song].sort_values('Date')\n",
        "    \n",
        "    # Plot the line for the song\n",
        "    ax.plot(song_data['Date'], song_data['Reproducciones'],\n",
        "            color=color_map[song], label=song)\n",
        "    \n",
        "    # Fill the area under the line with the same color and specified transparency\n",
        "    ax.fill_between(song_data['Date'], song_data['Reproducciones'],\n",
        "                    color=color_map[song], alpha=0.5)\n",
        "\n",
        "# Customize the axes labels and title\n",
        "ax.set_xlabel(\"Date\", fontsize=14)\n",
        "ax.set_ylabel(\"Reproducciones\", fontsize=14)\n",
        "ax.set_title(\"Reproductions Over Time by Song\", fontsize=16)\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Add a legend\n",
        "ax.legend(title=\"Cancion\")\n",
        "\n",
        "# Show the plot\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "bdd9879a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Charts for Four Variables\n",
        "\n",
        "A common chart for four variables is the scatter plot, where the color and size of the symbols depend on two [**categorical**]{style=\"color:#8B8000;\"} variables.\n",
        "\n",
        "</br>\n"
      ],
      "id": "02e9feac"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "# Assuming penguins_data is already loaded as a DataFrame with columns:\n",
        "# 'bill_length_mm', 'bill_depth_mm', 'island', and 'species'\n",
        "\n",
        "# Convert the 'island' categorical variable to numeric codes for size mapping.\n",
        "# (Alternatively, you could define a custom mapping if desired.)\n",
        "penguins_data['island_code'] = penguins_data['island'].astype('category').cat.codes\n",
        "\n",
        "# Create the scatter plot.\n",
        "# x-axis: bill_depth_mm, y-axis: bill_length_mm,\n",
        "# Color (hue) mapped to 'species' and size mapped to the numeric codes from 'island'.\n",
        "sns.scatterplot(\n",
        "    data=penguins_data,\n",
        "    x='bill_depth_mm',\n",
        "    y='bill_length_mm',\n",
        "    hue='species',\n",
        "    size='island_code',\n",
        "    sizes=(50, 200)  # Adjust the minimum and maximum point sizes as needed\n",
        ")\n",
        "\n",
        "# Customize the plot labels and title.\n",
        "plt.xlabel(\"Bill Depth (mm)\")\n",
        "plt.ylabel(\"Bill Length (mm)\")\n",
        "plt.title(\"Penguin Bill Dimensions by Species and Island\")\n",
        "\n",
        "# Display the plot.\n",
        "plt.show()"
      ],
      "id": "6821cb17",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n"
      ],
      "id": "c06285ea"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| echo: true\n",
        "\n",
        "# Assume penguins_data is already loaded as a DataFrame with the required columns.\n",
        "# For example:\n",
        "# penguins_data = pd.read_csv(\"penguins.csv\")\n",
        "\n",
        "# Convert the 'island' column to categorical codes for size mapping.\n",
        "penguins_data['island_code'] = penguins_data['island'].astype('category').cat.codes\n",
        "\n",
        "# Create the scatter plot:\n",
        "# - x-axis: bill_depth_mm\n",
        "# - y-axis: bill_length_mm\n",
        "# - Color (hue) mapped to species\n",
        "# - Size mapped to the numeric codes for island\n",
        "sns.scatterplot(\n",
        "    data=penguins_data,\n",
        "    x='bill_depth_mm',\n",
        "    y='bill_length_mm',\n",
        "    hue='species',\n",
        "    size='island_code',\n",
        "    sizes=(50, 200)  # Adjust the size range as needed\n",
        ")\n",
        "\n",
        "# Set labels and title (customize as needed)\n",
        "plt.xlabel(\"Bill Depth (mm)\")\n",
        "plt.ylabel(\"Bill Length (mm)\")\n",
        "plt.title(\"Penguin Bill Dimensions by Species and Island\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "8dbadc19",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# More Charts\n",
        "\n",
        "<https://www.mosaic-web.org/ggformula/articles/pkgdown/ggformula-long.html>\n",
        "\n",
        "# [Return to Main Page](https://alanrvazquez.github.io/TEC-IN2039-Website/TEC-IN2039-Website.html)"
      ],
      "id": "d0cc93cb"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/alanrvazquez/GitHub/TEC-IN2039-EN/env/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}