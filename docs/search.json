[
  {
    "objectID": "T1_Introduction/Introduction.slides.html#agenda",
    "href": "T1_Introduction/Introduction.slides.html#agenda",
    "title": "What is data visualization?",
    "section": "Agenda",
    "text": "Agenda\n\nIntroduction to data science\nThree principles of data visualization\nActivity\nStorytelling"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#data-science-is",
    "href": "T1_Introduction/Introduction.slides.html#data-science-is",
    "title": "What is data visualization?",
    "section": "Data science is …",
    "text": "Data science is …\na multidisciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge and insights from vast amounts of structured and unstructured data."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#the-scheme-of-data-science",
    "href": "T1_Introduction/Introduction.slides.html#the-scheme-of-data-science",
    "title": "What is data visualization?",
    "section": "The scheme of data science",
    "text": "The scheme of data science\n\n\nProvost, F., & Fawcett, T. (2013). Data Science for Business: What you need to know about data mining and data-analytic thinking. O’Reilly Media, Inc."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#business-understanding",
    "href": "T1_Introduction/Introduction.slides.html#business-understanding",
    "title": "What is data visualization?",
    "section": "Business understanding",
    "text": "Business understanding\n\n\nBusiness understanding refers to defining the business problem to be solved.\nThe goal is to reframe the business problem as a data science problem.\nOften, reframing the problem and designing a solution is an iterative process."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#data-understanding-i",
    "href": "T1_Introduction/Introduction.slides.html#data-understanding-i",
    "title": "What is data visualization?",
    "section": "Data understanding I",
    "text": "Data understanding I\n\n\nIf the goal is to solve a business problem, the data that makes up the raw material available from which the solution will be built.\nThe available data rarely matches the problem.\nFor example, historical data is often collected for purposes unrelated to the current business problem or for no explicit purpose at all.\n\n\n\n\nOur goal is to turn data into information that answers useful questions."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#data-types",
    "href": "T1_Introduction/Introduction.slides.html#data-types",
    "title": "What is data visualization?",
    "section": "Data types",
    "text": "Data types\n\n\n\nText\n\n\nImages\n\nVideo\n\n\nAudio"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#numerical-data",
    "href": "T1_Introduction/Introduction.slides.html#numerical-data",
    "title": "What is data visualization?",
    "section": "Numerical data",
    "text": "Numerical data\nData science methodology is based on numerical data given in tables.\n\n\nIn fact, texts, images, videos or audios are transformed into this format to process them.\n\n\nIn this course, we will assume that the data is in a table."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#problem-situation",
    "href": "T1_Introduction/Introduction.slides.html#problem-situation",
    "title": "What is data visualization?",
    "section": "Problem Situation",
    "text": "Problem Situation\nTBD"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#goal-of-the-problem-situation",
    "href": "T1_Introduction/Introduction.slides.html#goal-of-the-problem-situation",
    "title": "What is data visualization?",
    "section": "Goal of the problem situation",
    "text": "Goal of the problem situation\nTBD"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#what-is-data-visualization",
    "href": "T1_Introduction/Introduction.slides.html#what-is-data-visualization",
    "title": "What is data visualization?",
    "section": "What is Data Visualization?",
    "text": "What is Data Visualization?\n\n“A visualization [of data] is any visual presentation intended to reveal evidence, making the invisible visible.” Alberto Cairo (2015)."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section",
    "href": "T1_Introduction/Introduction.slides.html#section",
    "title": "What is data visualization?",
    "section": "",
    "text": "https://www.nytimes.com/2019/02/28/learning/whats-going-on-in-this-graph-march-6-2019.html"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-1",
    "href": "T1_Introduction/Introduction.slides.html#section-1",
    "title": "What is data visualization?",
    "section": "",
    "text": "https://www.nytimes.com/2018/09/18/learning/whats-going-on-in-this-graph-sept-19-2018.html"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-2",
    "href": "T1_Introduction/Introduction.slides.html#section-2",
    "title": "What is data visualization?",
    "section": "",
    "text": "https://www.nytimes.com/2018/10/16/learning/whats-going-on-in-this-graph-oct-17-2018.html"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-3",
    "href": "T1_Introduction/Introduction.slides.html#section-3",
    "title": "What is data visualization?",
    "section": "",
    "text": "At its core, data visualization allows you to delve into complex datasets to extract meaningful insights using graphical displays.\n\nData visualizations are primarily concerned with providing evidence and enabling the audience to explore and draw their own conclusions about what the visualizations reveal about the data. \n\nData visualization has 3 key principles…\n\nAs data scientists, we create data visualizations in order to understand our data and explain our analyses to other people. A plot should have a message, and it’s our job to communicate this message as clearly as possible."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#principle-1-define-the-message-or-question",
    "href": "T1_Introduction/Introduction.slides.html#principle-1-define-the-message-or-question",
    "title": "What is data visualization?",
    "section": "Principle 1: Define the Message or Question",
    "text": "Principle 1: Define the Message or Question\nFormulate the question of interest or the message you want to convey.\n\n\n\n\n\n\n\n\n\n\n\nEl mensaje puede ser una pregunta\n\nWhat is the key comparison?\nHow do we emphasize it?\nDo you have reason to expect that one group/observation might be different?\nWhy might your finding about shape matter?\nWhat additional comparison might add value to the investigation?\nAre there any potentially important features to compare against?"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#principle-2-turn-data-into-information",
    "href": "T1_Introduction/Introduction.slides.html#principle-2-turn-data-into-information",
    "title": "What is data visualization?",
    "section": "Principle 2: Turn Data into Information",
    "text": "Principle 2: Turn Data into Information\nYour graph should use data to convey the message or answer the question. In other words, it should transform data into information.\n\n\nEnhance your graph with color symbols and text to convey additional information."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#principle-3-apply-graphic-design-principles",
    "href": "T1_Introduction/Introduction.slides.html#principle-3-apply-graphic-design-principles",
    "title": "What is data visualization?",
    "section": "Principle 3: Apply Graphic Design Principles",
    "text": "Principle 3: Apply Graphic Design Principles\n\n\n\n\n\n\nObjects are easily identifiable by color.\nUse direct labels instead of a legend.\nElements such as text, lines, and shapes of the same nature should look similar.\nBalance graphics and text.\nBe cautious with default settings in visualization software.\nUse a grid-based layout to organize your visualization.\n\n\n\n\n\n\n\n\n\n\n\n\nDon’t limit yourself to simple elements. Enhance your graph with color symbols to convey additional information. If possible, add context with markers and reference labels.\nAdditionally, include a legend in the graph that describes key features and summarizes its conclusions."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#example",
    "href": "T1_Introduction/Introduction.slides.html#example",
    "title": "What is data visualization?",
    "section": "Example",
    "text": "Example\n\nPrinciple 1: It is cheaper to take Uber than to own a car in four of the five largest cities in the USA.\n\n\n\n\nWeekly cost (in USD) of daily commuting\n\n\nCity\nUber\nAuto\n\n\n\n\nNew York City\n142\n218\n\n\nWashington D.C.\n96\n130\n\n\nChicago\n77\n116\n\n\nLos Angeles\n62\n89\n\n\nDallas\n181\n65\n\n\n\n\n\n\n\nThe estimated costs are based on a twice-daily 10.4 mile one-way commute at peak times over the course of a week using either the UberPool option (where available) or alternatively UberX vs the cost of using a personal vehicle (including any associated costs of ownership). Study conducted in February 2017."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-4",
    "href": "T1_Introduction/Introduction.slides.html#section-4",
    "title": "What is data visualization?",
    "section": "",
    "text": "Principle 2: Turn data into information."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-5",
    "href": "T1_Introduction/Introduction.slides.html#section-5",
    "title": "What is data visualization?",
    "section": "",
    "text": "Principle 3: Apply Graphic Design Principles."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-6",
    "href": "T1_Introduction/Introduction.slides.html#section-6",
    "title": "What is data visualization?",
    "section": "",
    "text": "“The greatest value of a picture is when it forces us to notice what we never expected to see.” John W. Tukey.\n\n\n\n\n\nhttps://www.storytellingwithdata.com/ is an excellent guide on data visualization."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#agenda",
    "href": "T2_Type_of_Variables/Types.slides.html#agenda",
    "title": "Types of variables",
    "section": "Agenda",
    "text": "Agenda\n\nWhat type is my data?\nData manipulation with pandas"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#types-of-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#types-of-variables",
    "title": "Types of variables",
    "section": "Types of Variables",
    "text": "Types of Variables\nBefore creating a graph, we must examine the type of values that our dataset variables take.\n\nThere are two main types of variables:\n\n\nNumerical variables.\nCategorical variables."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#numerical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#numerical-variables",
    "title": "Types of variables",
    "section": "Numerical Variables",
    "text": "Numerical Variables\nThese take values that represent numerical measurements or quantities.\n\n\nHeight (in centimeters).\nWeight (in kilograms).\nAge (in years).\nPrice (in dollars).\nTime (in hours or seconds).\nExam score (number of points on a 100-point scale)."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#types-of-numerical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#types-of-numerical-variables",
    "title": "Types of variables",
    "section": "Types of Numerical Variables",
    "text": "Types of Numerical Variables\nNumerical variables are divided into two types:\n\nDiscrete: variables that take integer values.\n\n\nExamples:\n\nNumber of children (0, 1, 2, or 3)\nNumber of students in a class (20, 30, or 35)\nNumber of books in a library (10,000, 15,000, 20,000)"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section",
    "href": "T2_Type_of_Variables/Types.slides.html#section",
    "title": "Types of variables",
    "section": "",
    "text": "[*Continuous]*]{style=“color:darkblue;”}: variables that have a large range of possible values.\n\n\nExamples:\n\nA person’s height (could be within the range of 1.60 m to 1.85 m)\nAmbient temperature (could be within the range of -30 \\(^\\circ\\)C to 50 \\(^\\circ\\)C)\nTime for an Uber to arrive (between 5 and 60 minutes)"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#categorical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#categorical-variables",
    "title": "Types of variables",
    "section": "Categorical Variables",
    "text": "Categorical Variables\nThese take values that fall into categories.\n\n\nA category is a class or division of people or things that share particular characteristics.\n\n\n\n\n\n\n\n\n\n\nVariable\nCategories\n\n\nAmazon review\n1\\(\\bigstar\\), 2\\(\\bigstar\\), 3\\(\\bigstar\\), 4\\(\\bigstar\\), 5\\(\\bigstar\\)\n\n\nCountry of origin\nMéxico, Canadá, EUA\n\n\nPostal code\n72703, 90034, 3000, …"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#classification-of-categorical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#classification-of-categorical-variables",
    "title": "Types of variables",
    "section": "Classification of Categorical Variables",
    "text": "Classification of Categorical Variables\nCategorical variables are divided into two important types:\n\nNominal\nOrdinal\n\n\nThe distinction depends on whether the categories have a meaningful order or not."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#nominal-categorical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#nominal-categorical-variables",
    "title": "Types of variables",
    "section": "Nominal Categorical Variables",
    "text": "Nominal Categorical Variables\nA categorical variable is nominal if its categories do not have a specific order.\n\nExamples:\n\n\nPolitical party affiliation (Democrat or Republican).\nDog breed (Shepherd, Hound, Terrier, Other).\nComputer operating system (Windows, macOS, Linux)."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#ordinal-categorical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#ordinal-categorical-variables",
    "title": "Types of variables",
    "section": "Ordinal Categorical Variables",
    "text": "Ordinal Categorical Variables\nA categorical variable is ordinal if its categories do have a meaningful order.\n\nExamples:\n\n\nT-shirt size (Small, Medium, Large).\nEducation level (High School, University, Postgraduate).\nIncome level (Less than $250K, $250K-$500K, More than $500K)\n\n\n\nIt is important to note that with an ordinal variable, the difference between, say, small and medium is not necessarily the same as the difference between medium and large. Additionally, the differences between consecutive categories may not be quantifiable. Think about star ratings in a restaurant review—how much better is one star compared to two stars?"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#interesting-fact",
    "href": "T2_Type_of_Variables/Types.slides.html#interesting-fact",
    "title": "Types of variables",
    "section": "Interesting Fact…",
    "text": "Interesting Fact…\nInteger values (e.g., 1, 2, 3, …, 5) can represent nominal or ordinal categorical variables.\n\n\n\nRepresentation\n1\n2\n3\n4\n\n\nBlood Type\nA\nB\nAB\nO\n\n\nReview\nBad\nFair\nGood\nVery Good\n\n\n\n\n\nEn la práctica, los valores booleanos (TRUE y FALSE) a menudo representan categorías nominales."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#remember",
    "href": "T2_Type_of_Variables/Types.slides.html#remember",
    "title": "Types of variables",
    "section": "Remember",
    "text": "Remember"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#a-general-difference-is",
    "href": "T2_Type_of_Variables/Types.slides.html#a-general-difference-is",
    "title": "Types of variables",
    "section": "A General Difference Is …",
    "text": "A General Difference Is …\n\nQuantitative variables (discrete or continuous) are those where addition or subtraction makes sense.\nCategorical variables (nominal or ordinal) are those where addition or subtraction does NOT make sense."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#types-of-data-i",
    "href": "T2_Type_of_Variables/Types.slides.html#types-of-data-i",
    "title": "Types of variables",
    "section": "Types of data I",
    "text": "Types of data I\n\nWhen a numerical quantity designating how much or how many is assigned to each item in the sample, the resulting set of values is numerical or quantitative.\n\nHeight (in ft).\nWeight (in lbs).\nAge (in years)."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#types-of-data-ii",
    "href": "T2_Type_of_Variables/Types.slides.html#types-of-data-ii",
    "title": "Types of variables",
    "section": "Types of data II",
    "text": "Types of data II\n\nWhen sample items are placed into categories and category names are assigned to the sample items, the data are categorical or qualitative.\n\nHair color.\nCountry of origin.\nZIP code."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#data-types",
    "href": "T2_Type_of_Variables/Types.slides.html#data-types",
    "title": "Types of variables",
    "section": "Data types",
    "text": "Data types"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#how-do-we-check-the-type-of-variable",
    "href": "T2_Type_of_Variables/Types.slides.html#how-do-we-check-the-type-of-variable",
    "title": "Types of variables",
    "section": "How do we check the type of variable?",
    "text": "How do we check the type of variable?\nLet’s load the data in “penguins.xlsx”.\n\n# Load pandas.\nimport pandas as pd\n\n# Load the Excel file into a pandas DataFrame.\npenguins_data = pd.read_excel(\"penguins.xlsx\")\n\n# Print the first 4 rows of the dataset.\npenguins_data.head(4)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-1",
    "href": "T2_Type_of_Variables/Types.slides.html#section-1",
    "title": "Types of variables",
    "section": "",
    "text": "In python, we check the type of each variable in a dataset using the function info().\n\npenguins_data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \n 7   year               344 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 21.6+ KB"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#general-python-formats",
    "href": "T2_Type_of_Variables/Types.slides.html#general-python-formats",
    "title": "Types of variables",
    "section": "General python formats",
    "text": "General python formats\n\nfloat64 format for numerical variables with decimals.\nint64 format for numerical variables with integers.\nobject format for general variables with characters."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#activity-solo-mode",
    "href": "T2_Type_of_Variables/Types.slides.html#activity-solo-mode",
    "title": "Types of variables",
    "section": "Activity (solo mode)",
    "text": "Activity (solo mode)\n\nGo to the Modules section on our CANVAS website.\nComplete the Activity 2.1: Types of Variables individually."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#pandas-library",
    "href": "T2_Type_of_Variables/Types.slides.html#pandas-library",
    "title": "Types of variables",
    "section": "pandas library",
    "text": "pandas library\n\n\n\n\n\n\n\n\n\npandas allows the user to import, clean, transform, and analyze data efficiently\nhttps://pandas.pydata.org/\n\n\nImport it in Google Colab as follows.\n\nimport pandas as pd"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#chaining-operations-with-pandas",
    "href": "T2_Type_of_Variables/Types.slides.html#chaining-operations-with-pandas",
    "title": "Types of variables",
    "section": "Chaining operations with pandas",
    "text": "Chaining operations with pandas\nOne of the most important techniques in pandas is method chaining, which allows for cleaner and more readable data manipulation.\nThe general structure of chaining looks like this:"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#key-pandas-functions",
    "href": "T2_Type_of_Variables/Types.slides.html#key-pandas-functions",
    "title": "Types of variables",
    "section": "Key pandas functions",
    "text": "Key pandas functions\npandas provides functions to solve common data manipulation tasks:\n\n\nquery() filters observations based on conditions.\nloc[] and iloc[] select specific rows and columns.\nassign() creates new variables.\nsort_values() changes the order of rows.\nagg() reduces multiple values to a single numerical summary."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-2",
    "href": "T2_Type_of_Variables/Types.slides.html#section-2",
    "title": "Types of variables",
    "section": "",
    "text": "To practice, we will use the dataset penguins_data."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#filtering-with-query",
    "href": "T2_Type_of_Variables/Types.slides.html#filtering-with-query",
    "title": "Types of variables",
    "section": "Filtering with query()",
    "text": "Filtering with query()\nFilter the data for the species “Gentoo.”\n\n(penguins_data\n  .query(\"species == 'Gentoo'\")\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n152\nGentoo\nBiscoe\n46.1\n13.2\n211.0\n4500.0\nfemale\n2007\n\n\n153\nGentoo\nBiscoe\n50.0\n16.3\n230.0\n5700.0\nmale\n2007\n\n\n154\nGentoo\nBiscoe\n48.7\n14.1\n210.0\n4450.0\nfemale\n2007\n\n\n155\nGentoo\nBiscoe\n50.0\n15.2\n218.0\n5700.0\nmale\n2007\n\n\n156\nGentoo\nBiscoe\n47.6\n14.5\n215.0\n5400.0\nmale\n2007\n\n\n\n\n\n\n\n\nThe head() function prints the first 6 rows of the dataset."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-3",
    "href": "T2_Type_of_Variables/Types.slides.html#section-3",
    "title": "Types of variables",
    "section": "",
    "text": "We can also filter the data to get penguins with a body mass greater than 5000g.\n\n(penguins_data\n  .query(\"body_mass_g &gt; 5000\")\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n153\nGentoo\nBiscoe\n50.0\n16.3\n230.0\n5700.0\nmale\n2007\n\n\n155\nGentoo\nBiscoe\n50.0\n15.2\n218.0\n5700.0\nmale\n2007\n\n\n156\nGentoo\nBiscoe\n47.6\n14.5\n215.0\n5400.0\nmale\n2007\n\n\n159\nGentoo\nBiscoe\n46.7\n15.3\n219.0\n5200.0\nmale\n2007\n\n\n161\nGentoo\nBiscoe\n46.8\n15.4\n215.0\n5150.0\nmale\n2007"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#selecting-columns-with-loc",
    "href": "T2_Type_of_Variables/Types.slides.html#selecting-columns-with-loc",
    "title": "Types of variables",
    "section": "Selecting columns with loc[]",
    "text": "Selecting columns with loc[]\nSelect the columns species, body_mass_g and sex.\n\n(penguins_data\n  .loc[:, [\"species\", \"body_mass_g\", \"sex\"]]\n  .head()\n)\n\n\n\n\n\n\n\n\nspecies\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\n3750.0\nmale\n\n\n1\nAdelie\n3800.0\nfemale\n\n\n2\nAdelie\n3250.0\nfemale\n\n\n3\nAdelie\nNaN\nNaN\n\n\n4\nAdelie\n3450.0\nfemale"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#combining-query-and-loc",
    "href": "T2_Type_of_Variables/Types.slides.html#combining-query-and-loc",
    "title": "Types of variables",
    "section": "Combining query() and loc()",
    "text": "Combining query() and loc()\nSelect the columns species, body_mass_g and sex. Next, filter the data for the species “Gentoo.”\n\n(penguins_data\n  .loc[:, [\"species\", \"body_mass_g\", \"sex\"]]\n  .query(\"species == 'Gentoo'\")\n).head(4)\n\n\n\n\n\n\n\n\nspecies\nbody_mass_g\nsex\n\n\n\n\n152\nGentoo\n4500.0\nfemale\n\n\n153\nGentoo\n5700.0\nmale\n\n\n154\nGentoo\n4450.0\nfemale\n\n\n155\nGentoo\n5700.0\nmale"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#create-new-columns-with-assign",
    "href": "T2_Type_of_Variables/Types.slides.html#create-new-columns-with-assign",
    "title": "Types of variables",
    "section": "Create new columns with assign()",
    "text": "Create new columns with assign()\nWith assign(), we can create new columns (variables) that are functions of existing ones. For example, we can compute the ratio of bill_length_mm y bill_depth_mm.\n\n\n(penguins_data\n  .assign(LengthDepthRatio = lambda df: df[\"bill_length_mm\"] / df[\"bill_depth_mm\"])\n  .loc[:, [\"species\", \"body_mass_g\", \"sex\", \"LengthDepthRatio\"]]\n).head()"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-4",
    "href": "T2_Type_of_Variables/Types.slides.html#section-4",
    "title": "Types of variables",
    "section": "",
    "text": "The new dataset has the variable LengthDepthRatio.\n\n\n\n\n\n\n\n\n\nspecies\nbody_mass_g\nsex\nLengthDepthRatio\n\n\n\n\n0\nAdelie\n3750.0\nmale\n2.090909\n\n\n1\nAdelie\n3800.0\nfemale\n2.270115\n\n\n2\nAdelie\n3250.0\nfemale\n2.238889\n\n\n3\nAdelie\nNaN\nNaN\nNaN\n\n\n4\nAdelie\n3450.0\nfemale\n1.901554"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#sorting-with-sort_values",
    "href": "T2_Type_of_Variables/Types.slides.html#sorting-with-sort_values",
    "title": "Types of variables",
    "section": "Sorting with sort_values()",
    "text": "Sorting with sort_values()\nWe can sort the data based on a column like bill_length_mm.\n\n(penguins_data\n  .sort_values(\"bill_length_mm\")\n).head(4)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n142\nAdelie\nDream\n32.1\n15.5\n188.0\n3050.0\nfemale\n2009\n\n\n98\nAdelie\nDream\n33.1\n16.1\n178.0\n2900.0\nfemale\n2008\n\n\n70\nAdelie\nTorgersen\n33.5\n19.0\n190.0\n3600.0\nfemale\n2008\n\n\n92\nAdelie\nDream\n34.0\n17.1\n185.0\n3400.0\nfemale\n2008"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-5",
    "href": "T2_Type_of_Variables/Types.slides.html#section-5",
    "title": "Types of variables",
    "section": "",
    "text": "To sort in descending order, use ascending=False inside sort_values().\n\n(penguins_data\n  .sort_values(\"bill_length_mm\", ascending=False)\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n185\nGentoo\nBiscoe\n59.6\n17.0\n230.0\n6050.0\nmale\n2007\n\n\n293\nChinstrap\nDream\n58.0\n17.8\n181.0\n3700.0\nfemale\n2007\n\n\n253\nGentoo\nBiscoe\n55.9\n17.0\n228.0\n5600.0\nmale\n2009\n\n\n339\nChinstrap\nDream\n55.8\n19.8\n207.0\n4000.0\nmale\n2009\n\n\n267\nGentoo\nBiscoe\n55.1\n16.0\n230.0\n5850.0\nmale\n2009"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#summarizing-with-agg",
    "href": "T2_Type_of_Variables/Types.slides.html#summarizing-with-agg",
    "title": "Types of variables",
    "section": "Summarizing with agg()",
    "text": "Summarizing with agg()\nWe can calculate the average of the columns bill_length_mm, bill_depth_mm, and body_mass_g.\n\n(penguins_data\n  .loc[:, [\"bill_length_mm\", \"bill_depth_mm\", \"body_mass_g\"]]\n  .agg([\"mean\"])\n)\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nbody_mass_g\n\n\n\n\nmean\n43.92193\n17.15117\n4201.754386\n\n\n\n\n\n\n\n\n\nBy default, agg() ignores missing values."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#saving-results-in-new-objects",
    "href": "T2_Type_of_Variables/Types.slides.html#saving-results-in-new-objects",
    "title": "Types of variables",
    "section": "Saving results in new objects",
    "text": "Saving results in new objects\nAfter performing operations on our data, we can save the modified dataset as a new object.\n\nsummary_penguins_data = (penguins_data\n  .loc[:, [\"bill_length_mm\", \"bill_depth_mm\", \"body_mass_g\"]]\n  .agg([\"mean\"])\n)\n\nsummary_penguins_data\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nbody_mass_g\n\n\n\n\nmean\n43.92193\n17.15117\n4201.754386"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#final-remarks",
    "href": "T2_Type_of_Variables/Types.slides.html#final-remarks",
    "title": "Types of variables",
    "section": "Final Remarks",
    "text": "Final Remarks\n\n\npandas is a Python library for data manipulation.\nUnderstanding variable types helps determine the best operations and visualizations.\nThere are specific charts for numerical and categorical variables.\nThroughout this course, we will explore various visualizations for different types of data."
  },
  {
    "objectID": "index.slides.html#course-topics",
    "href": "index.slides.html#course-topics",
    "title": "IN2039 Data Visualization for Decision Making",
    "section": "Course topics",
    "text": "Course topics\n\nIntroduction (slides)\nTools (slides)\nTypes of variables (slides)\nCategorical variables (slides)\nNumerical variables (slides)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IN2039 Data Visualization for Decision Making",
    "section": "",
    "text": "Course topics\n\nIntroduction (slides)\nTools (slides)\nTypes of variables (slides)\nCategorical variables (slides)\nNumerical variables (slides)\n\n\n\nAbout the author\nAlan R. Vazquez (website) is a Research Professor at the Department of Industrial Engineering at Tecnologico de Monterrey, Monterrey campus."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#agenda",
    "href": "T1_Introduction/Tools.slides.html#agenda",
    "title": "Tools to construct graphs",
    "section": "Agenda",
    "text": "Agenda\n\nIntroduction to python\nReading data with python\nCreating our first plot"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#python",
    "href": "T1_Introduction/Tools.slides.html#python",
    "title": "Tools to construct graphs",
    "section": "Python",
    "text": "Python\n\n\n\nA versatile programming language.\nIt is free!\nIt is widely used for data cleaning, data visualization, and data modelling.\nIt can be extended with packages (libraries) developed by other users."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#google-colab",
    "href": "T1_Introduction/Tools.slides.html#google-colab",
    "title": "Tools to construct graphs",
    "section": "Google Colab",
    "text": "Google Colab\nGoogle’s free cloud collaboration platform for creating python documents.\n\nRun python and collaborate on Jupyter notebooks for free.\nHarness the power of GPUs for free to accelerate your data science projects.\nEasily save and upload your notebooks to Google Drive."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#lets-try-a-command-in-r",
    "href": "T1_Introduction/Tools.slides.html#lets-try-a-command-in-r",
    "title": "Tools to construct graphs",
    "section": "Let’s try a command in R",
    "text": "Let’s try a command in R\nWhat do you think will happen if we run this command?\n\nprint(\"Hello world!\")"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#lets-try-another-command",
    "href": "T1_Introduction/Tools.slides.html#lets-try-another-command",
    "title": "Tools to construct graphs",
    "section": "Let’s try another command",
    "text": "Let’s try another command\nWhat do you think will happen if we run this command?\n\nsum([1, 5, 10])"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#use-python-as-a-basic-calculator",
    "href": "T1_Introduction/Tools.slides.html#use-python-as-a-basic-calculator",
    "title": "Tools to construct graphs",
    "section": "Use python as a basic calculator",
    "text": "Use python as a basic calculator\n\n5 + 1\n\n6\n\n\n\n10 - 3\n\n7\n\n\n\n2 * 4\n\n8\n\n\n\n9 / 3\n\n3.0"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#comments",
    "href": "T1_Introduction/Tools.slides.html#comments",
    "title": "Tools to construct graphs",
    "section": "Comments",
    "text": "Comments\nSometimes we write things in the coding window that we want python to ignore. These are called comments and start with #.\n\nPython will ignore the comments and just execute the code.\n\n# you can put whatever after #\n# for example... blah blah blah\n\n\nSi desea escribir un comentario que ocupe más de una línea, es una buena idea poner un # al principio de cada línea."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#introduction-to-functions-in-r",
    "href": "T1_Introduction/Tools.slides.html#introduction-to-functions-in-r",
    "title": "Tools to construct graphs",
    "section": "Introduction to functions in R",
    "text": "Introduction to functions in R\nOne of the best things about python is that there are many built-in commands you can use. These are called functions.\n\nFunctions have two basic parts:\n\n\nThe first part is the name of the function (for example, sum).\nThe second part is the input to the function, which goes inside the parentheses (sum([1, 5, 15]))."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#python-is-strict",
    "href": "T1_Introduction/Tools.slides.html#python-is-strict",
    "title": "Tools to construct graphs",
    "section": "Python is strict",
    "text": "Python is strict\nPython, like all programming languages, is very strict. For example, if you write\n\nsum([1, 100])\n\n101\n\n\nit will tell you the answer, 101.\n\nBut if you write\n\nSum([1, 100])\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[43], line 1\n----&gt; 1 Sum([1, 100])\n\nNameError: name 'Sum' is not defined\n\n\n\nwith the “s” capitalized, he will act like he has no idea what we are talking about!\n\nlo mismo si olvidas incluir un parentesis"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#save-your-work-in-python-objects",
    "href": "T1_Introduction/Tools.slides.html#save-your-work-in-python-objects",
    "title": "Tools to construct graphs",
    "section": "Save your work in python objects",
    "text": "Save your work in python objects\nVirtually anything, including the results of any python function, can be saved in an object.\nThis is accomplished by using an assignment operator, which can be an equals symbol (=).\n\nYou can make up any name you want for a python object. However, there are two basic rules for this:\n\n\nIt has to be different from a function name in python.\nIt has to be as specific as possible."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#for-example",
    "href": "T1_Introduction/Tools.slides.html#for-example",
    "title": "Tools to construct graphs",
    "section": "For example",
    "text": "For example\n\n# This code will assign the number 18\n# to the object called my_favorite_number\n\nmy_favorite_number = 18\n\nAfter running this code, nothing happens. But if we run the object on its own, we can see what’s inside it.\n\nmy_favorite_number\n\n18\n\n\nYou can also use print(my_favorite_number)."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#lists",
    "href": "T1_Introduction/Tools.slides.html#lists",
    "title": "Tools to construct graphs",
    "section": "Lists",
    "text": "Lists\nSo far we have used python objects to store a single number. But in statistics we are dealing with variation, which by definition needs more than one number.\n\nA python object can also store a complete set of numbers, called a list.\nYou can think of a list as a vector of numbers (or values).\n\n\nThe [] command can be used to combine several individual values into a list.\n\npuedes pensar que el c es por combinar"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#for-example-1",
    "href": "T1_Introduction/Tools.slides.html#for-example-1",
    "title": "Tools to construct graphs",
    "section": "For example",
    "text": "For example\nThis code creates two vectors\n\nmy_list = [1, 2, 3, 4, 5]\nmy_list_2 = [10, 10, 10, 10, 10]\n\nLet’s see its content\n\nmy_list\n\n[1, 2, 3, 4, 5]\n\n\n\nmy_list_2\n\n[10, 10, 10, 10, 10]"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#operations",
    "href": "T1_Introduction/Tools.slides.html#operations",
    "title": "Tools to construct graphs",
    "section": "Operations",
    "text": "Operations\nWe can do simple operations with vectors. For example, we can sum all the elements of a list.\n\nmy_list = [1, 2, 3, 4, 5]\nsum(my_list)\n\n15"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#indexing",
    "href": "T1_Introduction/Tools.slides.html#indexing",
    "title": "Tools to construct graphs",
    "section": "Indexing",
    "text": "Indexing\nWe can index a position in the vector using square brackets with a number like this: [1].\nSo, if we wanted to print the contents of the first position in my_list, we could write\n\nmy_list[1]\n\n2\n\n\nAn feature of Python is that the first element of a list or vector is indexed using the number 0.\n\nmy_list[0]\n\n1"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#a-little-more-about-objects-in-python",
    "href": "T1_Introduction/Tools.slides.html#a-little-more-about-objects-in-python",
    "title": "Tools to construct graphs",
    "section": "A little more about objects in python",
    "text": "A little more about objects in python\nYou can think of python objects as containers that hold values.\nA python object can hold a single value, or it can hold a group of values (as in a vector).\nSo far, we’ve only put numbers into python objects.\n\n\nPython objects can actually contain three types of values: numbers, characters, and booleans."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#character-values",
    "href": "T1_Introduction/Tools.slides.html#character-values",
    "title": "Tools to construct graphs",
    "section": "Character values",
    "text": "Character values\nCharacters are made up of text, such as words or sentences. An example of a list with characters as elements is:\n\n\nmany_greetings = [\"hi\", \"hello\", \"hola\", \"bonjour\", \"ni hao\", \"merhaba\"]\nmany_greetings\n\n['hi', 'hello', 'hola', 'bonjour', 'ni hao', 'merhaba']\n\n\n\n\nIt is important to know that numbers can also be treated as characters, depending on the context.\nFor example, when 20 is enclosed in quotes (\"20\") it will be treated as a character value, even though it encloses a number in quotes."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#boolean-values",
    "href": "T1_Introduction/Tools.slides.html#boolean-values",
    "title": "Tools to construct graphs",
    "section": "Boolean values",
    "text": "Boolean values\nBoolean values are True or False.\nWe may have a question like:\n\nIs the first element of the vector many_greetings \"hola\"?\n\n\nWe can ask python to find out and return the answer True or False.\n\nmany_greetings[1] == \"hola\"\n\nFalse"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#logical-operators",
    "href": "T1_Introduction/Tools.slides.html#logical-operators",
    "title": "Tools to construct graphs",
    "section": "Logical operators",
    "text": "Logical operators\nMost of the questions we ask python to answer with True or False involve comparison operators like &gt;, &lt;, &gt;=, &lt;=, and ==.\nThe double == sign checks whether two values are equal. There is even a comparison operator to check whether values are not equal: !=.\nFor example, 5 != 3 is a True statement."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#common-logical-operators",
    "href": "T1_Introduction/Tools.slides.html#common-logical-operators",
    "title": "Tools to construct graphs",
    "section": "Common logical operators",
    "text": "Common logical operators\n\n&gt; (larger than)\n&gt;= (larger than or equal to)\n&lt; (smaller than)\n&lt;= (smaller than or equal to)\n== (equal to)\n!= (not equal to)"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#question",
    "href": "T1_Introduction/Tools.slides.html#question",
    "title": "Tools to construct graphs",
    "section": "Question",
    "text": "Question\nRead this code and predict its response. Then, run the code in Google Colab and validate if you were correct.\n\nA = 1\nB = 5\ncompare = A &gt; B\ncompare"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#programming-culture-trial-and-error",
    "href": "T1_Introduction/Tools.slides.html#programming-culture-trial-and-error",
    "title": "Tools to construct graphs",
    "section": "Programming culture: Trial and error",
    "text": "Programming culture: Trial and error\nThe best way to learn programming is to try things out and see what happens. Write some code, run it, and think about why it didn’t work.\nThere are many ways to make small mistakes in programming (for example, typing a capital letter when a lowercase letter is needed).\nWe often have to find these mistakes through trial and error."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#python-libraries",
    "href": "T1_Introduction/Tools.slides.html#python-libraries",
    "title": "Tools to construct graphs",
    "section": "Python libraries",
    "text": "Python libraries\nLibraries are the fundamental units of reproducible python code. They include reusable python functions, documentation describing how to use them, and sample data.\nIn this course, we will be working mostly with the following libraries:\n\npandas for data manipulation\nmatplotlib and seaborn for data visualization\nstatsmodels and scikit-learn for data modelling"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#data-organization",
    "href": "T1_Introduction/Tools.slides.html#data-organization",
    "title": "Tools to construct graphs",
    "section": "Data organization",
    "text": "Data organization\nIn data science, we organize data into rows and columns.\n\n    Condition  Age   Wt    Wt2\n1  Uninformed   35  136  135.8\n2  Uninformed   45  162  161.8\n3    Informed   52  117  116.8\n4    Informed   29  184  182.8\n5  Uninformed   38  134  136.6\n6    Informed   39  189  183.2\n\n\nThe rows are the sampled cases. In this example, the rows are housekeepers from different hotels. There are six rows, so there are six housekeepers in this data set.\n\n\nDepending on the study, the rows could be people, states, couples, mice—any case you’re taking a sample from to study."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section",
    "href": "T1_Introduction/Tools.slides.html#section",
    "title": "Tools to construct graphs",
    "section": "",
    "text": "The columns represent variables or attributes of each case that were measured.\n\n    Condition  Age   Wt    Wt2\n1  Uninformed   35  136  135.8\n2  Uninformed   45  162  161.8\n3    Informed   52  117  116.8\n4    Informed   29  184  182.8\n5  Uninformed   38  134  136.6\n6    Informed   39  189  183.2\n\n\n\nIn this study, housekeepers were either informed or not that their daily work of cleaning hotel rooms was equivalent to getting adequate exercise for good health.\n\n\n\nSo one of the variables, Condition, indicates whether they were informed of this fact or not."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section-1",
    "href": "T1_Introduction/Tools.slides.html#section-1",
    "title": "Tools to construct graphs",
    "section": "",
    "text": "Other variables include the age of the housekeeper (Age), her weight before starting the study (Wt), and her weight at the end of the study (Wt2), measured four weeks later.\n\nTherefore, the values in each row represent the values of that particular case in each of the variables measured.\n    Condition  Age   Wt    Wt2\n1  Uninformed   35  136  135.8\n2  Uninformed   45  162  161.8\n3    Informed   52  117  116.8\n4    Informed   29  184  182.8\n5  Uninformed   38  134  136.6\n6    Informed   39  189  183.2\n\n¿Cuántas variables hay en este conjunto de datos?"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#loading-data-in-python",
    "href": "T1_Introduction/Tools.slides.html#loading-data-in-python",
    "title": "Tools to construct graphs",
    "section": "Loading data in python",
    "text": "Loading data in python\nIn this course, we will assume that data is stored in an Excel file with the above organization. As an example, let’s use the file penguins.xlsx.\n\n\n\n\n\n\n\nThe file must be previously uploaded to Google Colab."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section-2",
    "href": "T1_Introduction/Tools.slides.html#section-2",
    "title": "Tools to construct graphs",
    "section": "",
    "text": "The dataset penguins.xlsx contains data from penguins living in three islands."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#pandas-library",
    "href": "T1_Introduction/Tools.slides.html#pandas-library",
    "title": "Tools to construct graphs",
    "section": "pandas library",
    "text": "pandas library\n\n\n\n\n\n\n\n\n\npandas is an open-source Python library for data manipulation and analysis.\nIt is built on top of numpy for high-performance data operations..\nIt allows the user to import, clean, transform, and analyze data efficiently\nhttps://pandas.pydata.org/"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#importing-pandas",
    "href": "T1_Introduction/Tools.slides.html#importing-pandas",
    "title": "Tools to construct graphs",
    "section": "Importing pandas",
    "text": "Importing pandas\nFortunately, the pandas library is already pre-installed in Google Colab.\n\nHowever, we need to inform Google Colab that we want to use pandas and its functions using the following command:\n\nimport pandas as pd\n\n\nThe command as pd allows us to have a short name for pandas. To use a function of pandas, we use the command pd.function()."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#loading-data-using-pandas",
    "href": "T1_Introduction/Tools.slides.html#loading-data-using-pandas",
    "title": "Tools to construct graphs",
    "section": "Loading data using pandas",
    "text": "Loading data using pandas\nThe following code shows how to read the data in the file “penguins.xlsx” into python.\n\n# Load the Excel file into a pandas DataFrame.\npenguins_data = pd.read_excel(\"penguins.xlsx\")"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#the-function-head",
    "href": "T1_Introduction/Tools.slides.html#the-function-head",
    "title": "Tools to construct graphs",
    "section": "The function head()",
    "text": "The function head()\nThe function head() allows you to print the first rows of a pandas data frame.\n\n# Print the first 4 rows of the dataset.\npenguins_data.head(4)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#indexing-variables-a-dataset",
    "href": "T1_Introduction/Tools.slides.html#indexing-variables-a-dataset",
    "title": "Tools to construct graphs",
    "section": "Indexing variables a dataset",
    "text": "Indexing variables a dataset\nWe can select a specific variables of a data frame using the syntaxis below.\n\npenguins_data['bill_length_mm']\n\n0      39.1\n1      39.5\n2      40.3\n3       NaN\n4      36.7\n       ... \n339    55.8\n340    43.5\n341    49.6\n342    50.8\n343    50.2\nName: bill_length_mm, Length: 344, dtype: float64\n\n\nHere, we selected the variable bill_length_mm in the penguins_data dataset."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section-3",
    "href": "T1_Introduction/Tools.slides.html#section-3",
    "title": "Tools to construct graphs",
    "section": "",
    "text": "To index multiple variables of a data frame, we put the names of the variables in a list object. For example, we select bill_length_mm, species, and island as follows:\n\nsub_penguins_data = penguins_data[ ['bill_length_mm',  'species', 'island'] ]\nsub_penguins_data.head()\n\n\n\n\n\n\n\n\nbill_length_mm\nspecies\nisland\n\n\n\n\n0\n39.1\nAdelie\nTorgersen\n\n\n1\n39.5\nAdelie\nTorgersen\n\n\n2\n40.3\nAdelie\nTorgersen\n\n\n3\nNaN\nAdelie\nTorgersen\n\n\n4\n36.7\nAdelie\nTorgersen"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#indexing-rows",
    "href": "T1_Introduction/Tools.slides.html#indexing-rows",
    "title": "Tools to construct graphs",
    "section": "Indexing rows",
    "text": "Indexing rows\nTo index rows in a dataset, we use the argument loc from pandas. For example, we select the rows 3 to 6 of the penguins_dataset dataset:\n\nrows_penguins_data = penguins_data.loc[2:5]\nrows_penguins_data\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section-4",
    "href": "T1_Introduction/Tools.slides.html#section-4",
    "title": "Tools to construct graphs",
    "section": "",
    "text": "rows_penguins_data\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n\n\n\n\n\nNote that the index 2 and 5 refer to observations 3 and 7, respectively, in the dataset. This is because the first index in python is 0."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#indexing-rows-and-columns",
    "href": "T1_Introduction/Tools.slides.html#indexing-rows-and-columns",
    "title": "Tools to construct graphs",
    "section": "Indexing rows and columns",
    "text": "Indexing rows and columns\nUsing loc, we can also retrieve a subset from the dataset by selecting specific columns and rows.\n\nsub_rows_pdata = penguins_data.loc[2:5, ['bill_length_mm',  'species', 'island'] ]\nsub_rows_pdata\n\n\n\n\n\n\n\n\nbill_length_mm\nspecies\nisland\n\n\n\n\n2\n40.3\nAdelie\nTorgersen\n\n\n3\nNaN\nAdelie\nTorgersen\n\n\n4\n36.7\nAdelie\nTorgersen\n\n\n5\n39.3\nAdelie\nTorgersen"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#matplotlib-library",
    "href": "T1_Introduction/Tools.slides.html#matplotlib-library",
    "title": "Tools to construct graphs",
    "section": "matplotlib library",
    "text": "matplotlib library\n\nmatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python\nIt is widely used in the data science community for plotting data in various formats\nIdeal for creating simple visualizations like line plots, bar charts, scatter plots, and more\nhttps://matplotlib.org/"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#seaborn-library",
    "href": "T1_Introduction/Tools.slides.html#seaborn-library",
    "title": "Tools to construct graphs",
    "section": "seaborn library",
    "text": "seaborn library\n\nseaborn is a Python library built on top of Matplotlib\nDesigned to make statistical data visualization easy and beautiful\nIdeal for creating informative and attractive visualizations with minimal code\nhttps://seaborn.pydata.org/index.html"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#importing-the-libraries",
    "href": "T1_Introduction/Tools.slides.html#importing-the-libraries",
    "title": "Tools to construct graphs",
    "section": "Importing the libraries",
    "text": "Importing the libraries\n\nThe matplotlib and seaborn libraries are pre-installed in Google Colab. However, we need to inform Google Colab that we want to use them and its functions using the following command:\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nSimilar to pandas, the command as sns allows us to have a short name for seaborn. Similarly, we rename matplotlib as plt."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#seaborn-plot-structure",
    "href": "T1_Introduction/Tools.slides.html#seaborn-plot-structure",
    "title": "Tools to construct graphs",
    "section": "Seaborn Plot Structure",
    "text": "Seaborn Plot Structure\nSeaborn has a structured approach to creating visualizations.\nplt.figure(figsize=(WIDTH, HEIGHT))\nsns.PLOTTYPE(data=my_data, x=“Variable1”, y=“Variable2”, hue=“Variable3”, MOREOPTIONS)\nplt.title(“Title”)\nplt.xlabel(“X-axis label”)\nplt.ylabel(“Y-axis label”)\nplt.MOREOPTIONS()\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#ejemplo",
    "href": "T1_Introduction/Tools.slides.html#ejemplo",
    "title": "Tools to construct graphs",
    "section": "Ejemplo",
    "text": "Ejemplo\nIs there a difference between bill length and bill depth across penguin species?"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#ejemplo-1",
    "href": "T1_Introduction/Tools.slides.html#ejemplo-1",
    "title": "Tools to construct graphs",
    "section": "Ejemplo",
    "text": "Ejemplo\nIs there a difference between bill length and bill depth across penguin species?\n\nplt.figure(figsize=(6, 4))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\")\nplt.show() # Display the plot"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#adding-titles-and-labels",
    "href": "T1_Introduction/Tools.slides.html#adding-titles-and-labels",
    "title": "Tools to construct graphs",
    "section": "Adding titles and labels",
    "text": "Adding titles and labels\n\nplt.figure(figsize=(6, 4))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\")\nplt.title(\"Bill Depth vs. Bill Length\")\nplt.xlabel(\"Bill Depth (mm)\")\nplt.ylabel(\"Bill Length (mm)\")\nplt.legend(title=\"Species\")\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#ejemplo-2",
    "href": "T1_Introduction/Tools.slides.html#ejemplo-2",
    "title": "Tools to construct graphs",
    "section": "Ejemplo",
    "text": "Ejemplo\n\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\")\nplt.xlabel(\"Bill Depth (mm)\")\nplt.ylabel(\"Bill Length (mm)\")\nplt.legend(title=\"Species\")\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#mini-actividad-solo-mode",
    "href": "T1_Introduction/Tools.slides.html#mini-actividad-solo-mode",
    "title": "Tools to construct graphs",
    "section": "Mini-actividad (solo mode)",
    "text": "Mini-actividad (solo mode)\n\nOpen the following Google Colab link:\nhttps://colab.research.google.com/drive/1c-sy5yQY1DwgaZAI6YnDLMTEYMpLCWyX?usp=sharing\nCopy the notebook to your drive.\nAnswer the questions."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#changing-theme",
    "href": "T1_Introduction/Tools.slides.html#changing-theme",
    "title": "Tools to construct graphs",
    "section": "Changing theme",
    "text": "Changing theme\n\nplt.figure(figsize=(6, 4))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\")\nplt.xlabel(\"Bill Depth (mm)\")\nplt.ylabel(\"Bill Length (mm)\")\nplt.legend(title=\"Species\")\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#more-options",
    "href": "T1_Introduction/Tools.slides.html#more-options",
    "title": "Tools to construct graphs",
    "section": "More options",
    "text": "More options\n\nWe can also use other functions to improve the aspect of the figure:\n\nplt.title(fontsize): Font size of the title.\nplt.ylabel(fontsize): Font size of y axis title.\nplt.xlabel(fontsize): Font size of x axis title.\nplt.yticks(fontsize): Font size of the y axis labels.\nplt.xticks(fontsize): Font size of the x axis labels."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section-5",
    "href": "T1_Introduction/Tools.slides.html#section-5",
    "title": "Tools to construct graphs",
    "section": "",
    "text": "Code\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\", fontsize = 12)\nplt.xlabel(\"Bill Depth (mm)\", fontsize = 12)\nplt.ylabel(\"Bill Length (mm)\", fontsize = 12)\nplt.legend(title=\"Species\", fontsize = 12)\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#saving-plots",
    "href": "T1_Introduction/Tools.slides.html#saving-plots",
    "title": "Tools to construct graphs",
    "section": "Saving plots",
    "text": "Saving plots\n\nWe save a figure using the save.fig function from matplotlib. The dpi argument of this function sets the resolution of the image. The higher the dpi, the better the resolution.\n\nplt.figure(figsize=(5, 5))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\", fontsize = 12)\nplt.xlabel(\"Bill Depth (mm)\", fontsize = 12)\nplt.ylabel(\"Bill Length (mm)\", fontsize = 12)\nplt.legend(title=\"Species\", fontsize = 12)\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.savefig('scatter_plot.png',dpi=300)"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#agenda",
    "href": "T3_Categorical_Data/Categorical.slides.html#agenda",
    "title": "Categorical Variables",
    "section": "Agenda",
    "text": "Agenda\n\nIntroduction\nSummary statistics\nBar chart\nPie chart\nTransforming categorical variables"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#first-things-first",
    "href": "T3_Categorical_Data/Categorical.slides.html#first-things-first",
    "title": "Categorical Variables",
    "section": "First things first",
    "text": "First things first\nToday, we will use Python to create charts and tables. For this, we will use libraries such as pandas, matplotlib, and seaborn.\n\nLet’s import them before we start.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#penguins-dataset",
    "href": "T3_Categorical_Data/Categorical.slides.html#penguins-dataset",
    "title": "Categorical Variables",
    "section": "Penguins Dataset",
    "text": "Penguins Dataset\nWe will illustrate today’s concepts using the penguins.xlsx dataset.\n\n\nUpload it to Google Colab and load it into Python using the following code:\n\npenguins_data = pd.read_excel(\"penguins.xlsx\")\n\n\n\n\n\n\n\n\nIn Google Colab, the file must be placed in the “content” folder."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section",
    "href": "T3_Categorical_Data/Categorical.slides.html#section",
    "title": "Categorical Variables",
    "section": "",
    "text": "We will focus on visualizing the following categorical variables: species, island y sex.\n\n(penguins_data\n  .loc[:, ['species', 'island', 'sex']]\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nsex\n\n\n\n\n0\nAdelie\nTorgersen\nmale\n\n\n1\nAdelie\nTorgersen\nfemale\n\n\n2\nAdelie\nTorgersen\nfemale\n\n\n3\nAdelie\nTorgersen\nNaN\n\n\n4\nAdelie\nTorgersen\nfemale"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#ensuring-python-recognizes-categorical-variables",
    "href": "T3_Categorical_Data/Categorical.slides.html#ensuring-python-recognizes-categorical-variables",
    "title": "Categorical Variables",
    "section": "Ensuring Python Recognizes Categorical Variables",
    "text": "Ensuring Python Recognizes Categorical Variables\nAlthough the variables species, island and sex are clearly categorical, Python does not automatically recognize them as such.\nBy default, Pandas interprets these variables as object ypes because they contain text.\n\nIn Pandas, categorical variables should be explicitly converted to the category data type for efficient processing."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#defining-categorical-variables-in-python",
    "href": "T3_Categorical_Data/Categorical.slides.html#defining-categorical-variables-in-python",
    "title": "Categorical Variables",
    "section": "Defining Categorical Variables in Python",
    "text": "Defining Categorical Variables in Python\nTo ensure Python correctly recognizes these variables as categorical, we use the astype() function:\n\n\n# Convert categorical variables to 'category' type\npenguins_data[['species', 'island', 'sex']] = (penguins_data\n  .loc[:, ['species', 'island', 'sex']]\n  .astype('category')\n)  \n\n\nNote that we have just replaced the penguins_data object with its new version."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-1",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-1",
    "title": "Categorical Variables",
    "section": "",
    "text": "Now, the variables are correctly labeled as categorical.\n\n(penguins_data\n  .loc[:, ['species', 'island', 'sex']]\n  .dtypes\n)\n\nspecies    category\nisland     category\nsex        category\ndtype: object"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#summary-statistics-1",
    "href": "T3_Categorical_Data/Categorical.slides.html#summary-statistics-1",
    "title": "Categorical Variables",
    "section": "Summary statistics",
    "text": "Summary statistics\n\nA summary statistic helps us to summarize a list of observations in a simple way.\n\nThe most commonly used statistical summaries for categorical data are:\n\nThe frequency of a category is the number of observations that belong to that category.\nThe relative frequency is the frequency divided by the total number of observations."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#frequency-table",
    "href": "T3_Categorical_Data/Categorical.slides.html#frequency-table",
    "title": "Categorical Variables",
    "section": "Frequency table",
    "text": "Frequency table\nSummarizes a categorical variable by counting the values per category.\n\n\n\nEspecie\nFrecuencia\n\n\n\n\nAdelie\n152\n\n\nChinstrap\n68\n\n\nGentoo\n124\n\n\nTotal\n344\n\n\n\n\nFrequency: Number of observations in each category.\nTotal: Total sum of observations.\n\n\n\nVentajas de las frequencias.\nResumen claro y conciso de los datos categóricos.\nFacilita la identificación de patrones y tendencias.\nAyuda en la toma de decisiones informadas."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#frequency-table-in-python",
    "href": "T3_Categorical_Data/Categorical.slides.html#frequency-table-in-python",
    "title": "Categorical Variables",
    "section": "Frequency table in Python",
    "text": "Frequency table in Python\nTo construct a frequency table in numpy we use the function value_counts() together with loc[].\n\n(penguins_data\n  .loc[:, ['species']]\n  .value_counts()\n)  \n\nspecies  \nAdelie       152\nGentoo       124\nChinstrap     68\nName: count, dtype: int64"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#relative-frequency-table",
    "href": "T3_Categorical_Data/Categorical.slides.html#relative-frequency-table",
    "title": "Categorical Variables",
    "section": "Relative Frequency Table",
    "text": "Relative Frequency Table\nSummarizes a categorical variable by calculating the proportion of values per category.\n\n\n\n# Calculate number of observations in the dataset.\nn = len(penguins_data) \n\n# Calculate relative frequency.\npenguins_data['species'].value_counts()/n\n\nspecies\nAdelie       0.441860\nGentoo       0.360465\nChinstrap    0.197674\nName: count, dtype: float64\n\n\n\n\n\n\nSpecie\nRelative Frequency\n\n\n\n\nAdelie\n0.4418605\n\n\nChinstrap\n0.1976744\n\n\nGentoo\n0.3604651\n\n\nSuma\n1\n\n\n\n\n\nRelative frequency: Number of observations in each category divided by the total.\n\n\nLa ventaja de la frequencia relativa es que se puede interpretar como una probabilidad. Lo que da mas información."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#bar-chart-1",
    "href": "T3_Categorical_Data/Categorical.slides.html#bar-chart-1",
    "title": "Categorical Variables",
    "section": "Bar chart",
    "text": "Bar chart\n\nA bar chart visually represents a frequency or relative frequency table.\n\nThe frequency (or relative frequency) is represented by a bar with a proportional height.\nWe create the bar chart using the function countplot() from seaborn.\n\n# Create plot.\nplt.figure(figsize=(7,4)) \nsns.countplot(data=penguins_data, x=\"species\")\nplt.show()"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#plot-for-relative-frequency",
    "href": "T3_Categorical_Data/Categorical.slides.html#plot-for-relative-frequency",
    "title": "Categorical Variables",
    "section": "Plot for relative frequency",
    "text": "Plot for relative frequency\nIf you want to plot relative frequencies, you can normalize the counts.\n\n# Create plot.\npenguin_counts = penguins_data[\"species\"].value_counts(normalize=True)\nplt.figure(figsize=(6, 3.3))\nsns.barplot(x=penguin_counts.index, y=penguin_counts.values)\nplt.ylabel(\"Relative Frequency\")\nplt.show()"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#example-improving-the-graph",
    "href": "T3_Categorical_Data/Categorical.slides.html#example-improving-the-graph",
    "title": "Categorical Variables",
    "section": "Example: Improving the graph",
    "text": "Example: Improving the graph\nUsing Seaborn’s customization tools, we enhance the graph:\n\nplt.figure(figsize=(6, 3.5))\nsns.barplot(x=penguin_counts.index, y=penguin_counts.values, palette=\"viridis\")\nplt.title(\"Penguin Proportions\")\nplt.xlabel(\"Species Type\")\nplt.ylabel(\"Relative Frequency\")\nplt.show()"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#pie-chart-1",
    "href": "T3_Categorical_Data/Categorical.slides.html#pie-chart-1",
    "title": "Categorical Variables",
    "section": "Pie chart",
    "text": "Pie chart\n\n\n\n\nA pie chart divides a circle into sections representing different categories of a variable.\nThe size of each section corresponds to the relative frequency of that category.\nIt provides a quick visual comparison of proportions.\n\n\n\n\n\n\nPie charts versus bar charts.\nBar charts can serve as a good way to show comparisons between categories. It is generally observed that new trends tend to shy away from using pie charts, as it is difficult for the human eye to judge the exact angle that shows the value of a category in a pie chart."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#mini-activity-solo-mode",
    "href": "T3_Categorical_Data/Categorical.slides.html#mini-activity-solo-mode",
    "title": "Categorical Variables",
    "section": "Mini-Activity (solo mode)",
    "text": "Mini-Activity (solo mode)\nAsk ChatGPT\n\nGo to https://chat.openai.com/\nAsk ChatGPT how to create a pie chart using matplotlib and seaborn in Python\nAdapt the code to create a pie chart for the island variable in penguin_data."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#example-boston-housing-dataset",
    "href": "T3_Categorical_Data/Categorical.slides.html#example-boston-housing-dataset",
    "title": "Categorical Variables",
    "section": "Example: Boston Housing Dataset",
    "text": "Example: Boston Housing Dataset\nThis dataset contains information collected by the U.S. Census Bureau on housing in the Boston, Massachusetts area."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-3",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-3",
    "title": "Categorical Variables",
    "section": "",
    "text": "The dataset is in Boston_dataset.xlsx. Upload it to Google Colab and load it into Python using:\n\nBoston_dataset = pd.read_excel(\"Boston_dataset.xlsx\")\nBoston_dataset.head()\n\n\n\n\n\n\n\n\ncrim\nzn\nindus\nchas\nnox\nrm\nage\ndis\nrad\ntax\nptratio\nblack\nlstat\nmedv\n\n\n\n\n0\n0.00632\n18.0\n2.31\n0\n0.538\n6.575\n65.2\n4.0900\nLow\n296\n15.3\n396.90\n4.98\n24.0\n\n\n1\n0.02731\n0.0\n7.07\n0\n0.469\n6.421\n78.9\n4.9671\nLow\n242\n17.8\n396.90\n9.14\n21.6\n\n\n2\n0.02729\n0.0\n7.07\n0\n0.469\n7.185\n61.1\n4.9671\nLow\n242\n17.8\n392.83\n4.03\n34.7\n\n\n3\n0.03237\n0.0\n2.18\n0\n0.458\n6.998\n45.8\n6.0622\nLow\n222\n18.7\n394.63\n2.94\n33.4\n\n\n4\n0.06905\n0.0\n2.18\n0\n0.458\n7.147\n54.2\n6.0622\nLow\n222\n18.7\n396.90\n5.33\n36.2"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-4",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-4",
    "title": "Categorical Variables",
    "section": "",
    "text": "We concentrate on the following variables:\n\nchas : Whether the house is next to the Charles River (1: Yes and 0: No)\nrad : Index of accessibility to radial highways (Low, Medium, High)."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#remember",
    "href": "T3_Categorical_Data/Categorical.slides.html#remember",
    "title": "Categorical Variables",
    "section": "Remember…",
    "text": "Remember…\nMake sure Python correctly recognizes categorical variables.\n\nBoston_dataset[\"chas\"] = Boston_dataset[\"chas\"].astype(\"category\")\nBoston_dataset[\"rad\"] = pd.Categorical(Boston_dataset[\"rad\"], categories=[\"Low\", \"Medium\", \"High\"], ordered=True)\n\nBoston_dataset[[\"chas\", \"rad\"]].head()\n\n\n\n\n\n\n\n\nchas\nrad\n\n\n\n\n0\n0\nLow\n\n\n1\n0\nLow\n\n\n2\n0\nLow\n\n\n3\n0\nLow\n\n\n4\n0\nLow"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#initial-graph",
    "href": "T3_Categorical_Data/Categorical.slides.html#initial-graph",
    "title": "Categorical Variables",
    "section": "Initial graph",
    "text": "Initial graph\nLet’s create a bar chart for chas.\n\nplt.figure(figsize=(5, 5))\nsns.countplot(data=Boston_dataset, x=\"chas\")\nplt.show()\n\n\n\n\n\n\n\n\nHowever, the categories are not very informative."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#re-labeling-categories",
    "href": "T3_Categorical_Data/Categorical.slides.html#re-labeling-categories",
    "title": "Categorical Variables",
    "section": "Re-labeling categories",
    "text": "Re-labeling categories\nTo improve readability of the bar chart, rename the categories in the chas variable.\n\nCheck the category names in the variable using the unique() function.\n\n\nBoston_dataset[\"chas\"].unique()  \n\n[0, 1]\nCategories (2, int64): [0, 1]"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-5",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-5",
    "title": "Categorical Variables",
    "section": "",
    "text": "Replace the category names using .map().\n\n\nBoston_dataset[\"chas\"] = Boston_dataset[\"chas\"].map({0: \"No\", 1: \"Yes\"})"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#lets-see-what-happens-now.",
    "href": "T3_Categorical_Data/Categorical.slides.html#lets-see-what-happens-now.",
    "title": "Categorical Variables",
    "section": "Let’s see what happens now.",
    "text": "Let’s see what happens now.\n\nplt.figure(figsize=(6, 4))\nsns.countplot(data=Boston_dataset, x=\"chas\")\nplt.show()\n\n\n\n\n\n\n\n\nMuch better! 😃"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#re-ordering-categories",
    "href": "T3_Categorical_Data/Categorical.slides.html#re-ordering-categories",
    "title": "Categorical Variables",
    "section": "Re-ordering Categories",
    "text": "Re-ordering Categories\nNow, let’s create a bar chart for rad.\n\nplt.figure(figsize=(5, 5))\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nThe categories do not follow a natural order from left to right: Low, Medium, y High."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-6",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-6",
    "title": "Categorical Variables",
    "section": "",
    "text": "To have the desired order in the categories, we must be more explicit when defining te categorical variable.\n\nBoston_dataset[\"rad\"] = pd.Categorical(Boston_dataset[\"rad\"], categories=[\"Low\", \"Medium\", \"High\"], ordered=True)\n\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nMuch better! 😃"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#collapsing",
    "href": "T3_Categorical_Data/Categorical.slides.html#collapsing",
    "title": "Categorical Variables",
    "section": "Collapsing",
    "text": "Collapsing\nSome categorical variables tend to have many categories. For example, states in a country or postal codes. In these cases, it can be difficult to visualize all the categories in a single graph.\nOne strategy for developing an effective visualization is to collapse categories.\nFor example, in the variable rad, we can collapse the categories Medium and High into a single category called Other."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-7",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-7",
    "title": "Categorical Variables",
    "section": "",
    "text": "To collapse categories in pandas, we use the replace() function.\n\nBoston_dataset[\"rad\"] = Boston_dataset[\"rad\"].replace({\"Medium\": \"Other\", \"High\": \"Other\"})\n\nBoston_dataset[\"rad\"].value_counts()\n\nrad\nOther    424\nLow       82\nName: count, dtype: int64"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-8",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-8",
    "title": "Categorical Variables",
    "section": "",
    "text": "Collapsing categories simplifies the graph\n\nplt.figure(figsize=(5.5, 3.5))\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nIt also allows us to emphasize a category like Low and see how it compares to the other categories (as a whole)."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#apply-principle-3",
    "href": "T3_Categorical_Data/Categorical.slides.html#apply-principle-3",
    "title": "Categorical Variables",
    "section": "Apply Principle 3",
    "text": "Apply Principle 3\n\nApply graphic design principles.\n\n\nWe can improve categorical variable charts using these techniques:\n\n\nRe-label categories to make them more informative.\nRe-order categories to follow a logical sequence.\nCollapse categories to simplify the chart."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-9",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-9",
    "title": "Categorical Variables",
    "section": "",
    "text": "Collapsing categories simplifies the graph\n\nplt.figure(figsize=(5, 5))\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nIt also allows us to emphasize a category like Low and see how it compares to the other categories (as a whole)."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#agenda",
    "href": "T4_Numerical_Data/Numerical.slides.html#agenda",
    "title": "Numerical Variables",
    "section": "Agenda",
    "text": "Agenda\n\nIntroduction to the example\nSummary statistics\nGraphs for numerical variables"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#example",
    "href": "T4_Numerical_Data/Numerical.slides.html#example",
    "title": "Numerical Variables",
    "section": "Example",
    "text": "Example\n\n\nA piston is a mechanical device found in most engines.\n\n\n\nOne measure of a piston’s performance is the time it takes to complete a cycle, which we call “cycle time” and is measured in seconds.\nThe file “CYLT.xlsx” contains 50 cycle times of a piston operating under fixed conditions."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#remember-to-import-the-required-libraries",
    "href": "T4_Numerical_Data/Numerical.slides.html#remember-to-import-the-required-libraries",
    "title": "Numerical Variables",
    "section": "Remember to Import the Required Libraries",
    "text": "Remember to Import the Required Libraries\nWe will use the libraries pandas, matplotlib, and seaborn.\nLet’s load them in Google Colab before we start.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#load-the-data",
    "href": "T4_Numerical_Data/Numerical.slides.html#load-the-data",
    "title": "Numerical Variables",
    "section": "Load the data",
    "text": "Load the data\nIn Google Colab, the file “CYLT.xlsx” should be placed in a folder called “content” or “contenido”.\n\n\n\n\n\n\n\n\n\ncycle_time\n\n\n\n\n0\n1.008\n\n\n1\n1.098\n\n\n2\n1.120\n\n\n3\n0.423\n\n\n4\n1.021"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#variable-type",
    "href": "T4_Numerical_Data/Numerical.slides.html#variable-type",
    "title": "Numerical Variables",
    "section": "Variable Type",
    "text": "Variable Type\nIn Python, numerical data is stored as float64.\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50 entries, 0 to 49\nData columns (total 1 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   cycle_time  50 non-null     float64\ndtypes: float64(1)\nmemory usage: 528.0 bytes\n\n\nWe can see that Python recognizes our data correctly."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#summary-statistic",
    "href": "T4_Numerical_Data/Numerical.slides.html#summary-statistic",
    "title": "Numerical Variables",
    "section": "Summary statistic",
    "text": "Summary statistic\n\nHelps us to summarize a list of observations in a simple way.\n\nFor numerical data, the most popular summary statistics are:\n\n\nSample mean\nSample variance and sample standard deviation\nSample quartiles\nSample maximum and minimum"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#sample-mean",
    "href": "T4_Numerical_Data/Numerical.slides.html#sample-mean",
    "title": "Numerical Variables",
    "section": "Sample mean",
    "text": "Sample mean\n\nIndicates the center of the data.\n\nLet \\(y_1, y_2, \\ldots, y_n\\) be an observed sample of size \\(n\\).\nThe sample mean is\n\\[\\bar{y} = \\frac{1}{n}\\sum_{i=1}^{n} y_i = \\frac{y_1 + y_2 + \\cdots + y_n}{n}.\\]"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section",
    "href": "T4_Numerical_Data/Numerical.slides.html#section",
    "title": "Numerical Variables",
    "section": "",
    "text": "In python, we calculate the sample mean using the function mean().\n\npiston_data_mean = piston_data[\"cycle_time\"].mean()\nprint(piston_data_mean)\n\n0.6524599999999999\n\n\nWe use the function print to show the number. Otherwise, python will show the computer type of value stored in piston_data_mean."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-1",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-1",
    "title": "Numerical Variables",
    "section": "",
    "text": "You can also round the result to, say, three decimals.\n\nprint( round(piston_data_mean, 3) )\n\n0.652\n\n\nInterpretation: On average, the piston takes 0.652 seconds to complete a cycle."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#sample-variance",
    "href": "T4_Numerical_Data/Numerical.slides.html#sample-variance",
    "title": "Numerical Variables",
    "section": "Sample variance",
    "text": "Sample variance\n\nIndicates how spread out the data are around the mean.\n\nLet \\(y_1, y_2, \\ldots, y_n\\) be an observed sample of size \\(n\\). The sample mean is\n\\[\ns^2 = \\frac{1}{n-1} \\sum_{i=1}^{n} (y_i - \\bar{y})^2 = \\frac{(y_1 - \\bar{y})^2  + \\cdots + (y_n - \\bar{y})^2}{n-1}\n\\]\n\nThe sample variance is like an average of the squared differences between each observation and the sample mean."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-2",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-2",
    "title": "Numerical Variables",
    "section": "",
    "text": "In python, the sample variance is calculated using the function var().\n\npiston_data_var = piston_data[\"cycle_time\"].var()\nprint( round(piston_data_var, 3))\n\n0.139\n\n\nInterpretation: The variance of the piston cycle times is 0.139. A larger variance means greater dispersion of the data around the mean."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#sample-standard-deviation",
    "href": "T4_Numerical_Data/Numerical.slides.html#sample-standard-deviation",
    "title": "Numerical Variables",
    "section": "Sample standard deviation",
    "text": "Sample standard deviation\nA drawback of the sample variance is that it is not on the same scale as the actual observations.\nTo obtain a measure of spread whose units are the same as those of the sample, we simply take the squared root of the sample variance\n\\[\ns = \\left(\\frac{1}{n-1} \\sum_{i=1}^{n} (y_i - \\bar{y})^2 \\right)^{1/2}\n\\]\nThis quantity is known as the sample standard deviation. It is in the same units as the observations."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-3",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-3",
    "title": "Numerical Variables",
    "section": "",
    "text": "In python, the sample variance is calculated using the function std().\n\npiston_data_std = piston_data[\"cycle_time\"].std()\nprint(round(piston_data_std,3))\n\n0.373\n\n\nInterpretation: On average, a piston takes 0.652 seconds to complete a cycle, with a variation of \\(\\pm 0.373\\) seconds."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#sample-quartiles",
    "href": "T4_Numerical_Data/Numerical.slides.html#sample-quartiles",
    "title": "Numerical Variables",
    "section": "Sample quartiles",
    "text": "Sample quartiles\nThe sample median is the middle number of the ordered data values.\n\nSample quartiles divide the data as nearly as possible into quarters:\n\n\nFirst quartile (\\(Q_1\\)) is the median of the lower half of the data.\nSecond quartile (\\(Q_2\\)) is the median of the data.\nThird quartile (\\(Q_3\\)) is the median of the upper half of the data."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-5",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-5",
    "title": "Numerical Variables",
    "section": "",
    "text": "In python, the quartiles are calculated using the function quantile().\n\n# Set the quantiles.\nset_quantiles = [0.25, 0.5, 0.75]\n# Compute the quantiles.\npiston_data[\"cycle_time\"].quantile(set_quantiles)\n\n0.25    0.3050\n0.50    0.5455\n0.75    1.0690\nName: cycle_time, dtype: float64\n\n\nInterpretation:\n\n25% of cycle times are below 0.305 sec.\n50% of cycle times are below 0.546 sec.\n75% of cycle times are below 1.07 sec."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#sample-maximum-and-minimum",
    "href": "T4_Numerical_Data/Numerical.slides.html#sample-maximum-and-minimum",
    "title": "Numerical Variables",
    "section": "Sample maximum and minimum",
    "text": "Sample maximum and minimum\nWe compute the maximum and minimum using the functions max() and min(), respectively.\n\npiston_data_max = piston_data[\"cycle_time\"].max()\nprint(piston_data_max)\n\n1.141\n\n\n\n\npiston_data_min = piston_data[\"cycle_time\"].min()\nprint(piston_data_min)\n\n0.175\n\n\nInterpretation:\n\nThe maximum cycle time is 1.14 seconds.\nThe minimum cycle time is 0.175 seconds."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#average-vs.-median",
    "href": "T4_Numerical_Data/Numerical.slides.html#average-vs.-median",
    "title": "Numerical Variables",
    "section": "Average vs. Median",
    "text": "Average vs. Median\nThe average and median estimate the central value of the data in different ways.\n\nThe average is the sum of the values divided by the total.\nThe median is the central value of an ordered set of data."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#when-do-we-use-the-average",
    "href": "T4_Numerical_Data/Numerical.slides.html#when-do-we-use-the-average",
    "title": "Numerical Variables",
    "section": "When do we use the average?",
    "text": "When do we use the average?\nThe average is used when the data is symmetrically or evenly distributed and there are no significant outliers.\nFor example, the height of a large sample of people in a homogeneous population."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#when-do-we-use-the-median",
    "href": "T4_Numerical_Data/Numerical.slides.html#when-do-we-use-the-median",
    "title": "Numerical Variables",
    "section": "When do we use the median?",
    "text": "When do we use the median?\nThe median is used when there are outliers that could skew the mean.\nFor example:\n\nAnnual household income in a country (where there are a few billionaires who distort the mean).\nHouse prices in a city (where a few very expensive properties can inflate the mean)."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#activity-only-mode-part-1",
    "href": "T4_Numerical_Data/Numerical.slides.html#activity-only-mode-part-1",
    "title": "Numerical Variables",
    "section": "Activity (only mode) Part 1",
    "text": "Activity (only mode) Part 1\nA company that manufactures capacitor retaining bolts for automobile engines implemented a quality control system. As part of this quality control system, a team of engineers decided to record the number of nonconforming bolts produced each shift.\nThe file bolts.xlsx contains the number of non-conforming bolts during the last 45 shifts.\n\nCalculates and interprets the average, variance, standard deviation, quartiles, minimum and maximum."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#histogram",
    "href": "T4_Numerical_Data/Numerical.slides.html#histogram",
    "title": "Numerical Variables",
    "section": "Histogram",
    "text": "Histogram\n\nGraphical display that gives an idea of the “shape” of the sample, indicating regions where sample points are concentrated and regions where they are sparse.\n\nThe bars of the histogram touch each other. A space indicates that there are no observations in that interval."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#histogram-of-na",
    "href": "T4_Numerical_Data/Numerical.slides.html#histogram-of-na",
    "title": "Numerical Variables",
    "section": "Histogram of Na",
    "text": "Histogram of Na\nTo create a histogram, we use the function histplot() from seabron."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#box-plot",
    "href": "T4_Numerical_Data/Numerical.slides.html#box-plot",
    "title": "Numerical Variables",
    "section": "Box plot",
    "text": "Box plot\n\nA box plot is a graphic that presents the median, the first and third quartiles, and any “outliers” present in the sample.\n\nThe interquartile range (IQR) is the difference between the third quartile and the first quartile (\\(Q_3 - Q_1\\)). This is the distance needed to span the middle half of the data."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#anatomy-of-a-box-plot",
    "href": "T4_Numerical_Data/Numerical.slides.html#anatomy-of-a-box-plot",
    "title": "Numerical Variables",
    "section": "Anatomy of a box plot",
    "text": "Anatomy of a box plot\n\nSee also https://towardsdatascience.com/why-1-5-in-iqr-method-of-outlier-detection-5d07fdc82097"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#box-plot-of-na",
    "href": "T4_Numerical_Data/Numerical.slides.html#box-plot-of-na",
    "title": "Numerical Variables",
    "section": "Box plot of Na",
    "text": "Box plot of Na\nTo create a boxplot, we use the function boxplot() from seabron."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#outliers",
    "href": "T4_Numerical_Data/Numerical.slides.html#outliers",
    "title": "Numerical Variables",
    "section": "Outliers",
    "text": "Outliers\n\nOutliers are points that are much larger or smaller than the rest of the sample points.\nOutliers may be data entry errors or they may be points that really are different from the rest.\nOutliers should not be deleted without considerable thought—sometimes calculations and analyses will be done with and without outliers and then compared."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.html",
    "href": "T3_Categorical_Data/Categorical.html",
    "title": "Categorical Variables",
    "section": "",
    "text": "Introduction\nSummary statistics\nBar chart\nPie chart\nTransforming categorical variables"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.html#summary-statistics",
    "href": "T3_Categorical_Data/Categorical.html#summary-statistics",
    "title": "Categorical Variables",
    "section": "Summary statistics",
    "text": "Summary statistics\n\nSummary statistics\n\nA summary statistic helps us to summarize a list of observations in a simple way.\n\nThe most commonly used statistical summaries for categorical data are:\n\nThe frequency of a category is the number of observations that belong to that category.\nThe relative frequency is the frequency divided by the total number of observations.\n\n\n\nFrequency table\nSummarizes a categorical variable by counting the values per category.\n\n\n\nEspecie\nFrecuencia\n\n\n\n\nAdelie\n152\n\n\nChinstrap\n68\n\n\nGentoo\n124\n\n\nTotal\n344\n\n\n\n\nFrequency: Number of observations in each category.\nTotal: Total sum of observations.\n\n\n\nVentajas de las frequencias.\nResumen claro y conciso de los datos categóricos.\nFacilita la identificación de patrones y tendencias.\nAyuda en la toma de decisiones informadas.\n\n\n\n\nFrequency table in Python\nTo construct a frequency table in numpy we use the function value_counts() together with loc[].\n\n(penguins_data\n  .loc[:, ['species']]\n  .value_counts()\n)  \n\nspecies  \nAdelie       152\nGentoo       124\nChinstrap     68\nName: count, dtype: int64\n\n\n\n\nRelative Frequency Table\nSummarizes a categorical variable by calculating the proportion of values per category.\n\n\n\n# Calculate number of observations in the dataset.\nn = len(penguins_data) \n\n# Calculate relative frequency.\npenguins_data['species'].value_counts()/n\n\nspecies\nAdelie       0.441860\nGentoo       0.360465\nChinstrap    0.197674\nName: count, dtype: float64\n\n\n\n\n\n\nSpecie\nRelative Frequency\n\n\n\n\nAdelie\n0.4418605\n\n\nChinstrap\n0.1976744\n\n\nGentoo\n0.3604651\n\n\nSuma\n1\n\n\n\n\n\n\nRelative frequency: Number of observations in each category divided by the total.\n\n\nLa ventaja de la frequencia relativa es que se puede interpretar como una probabilidad. Lo que da mas información."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.html#bar-chart",
    "href": "T3_Categorical_Data/Categorical.html#bar-chart",
    "title": "Categorical Variables",
    "section": "Bar chart",
    "text": "Bar chart\n\nBar chart\n\nA bar chart visually represents a frequency or relative frequency table.\n\nThe frequency (or relative frequency) is represented by a bar with a proportional height.\nWe create the bar chart using the function countplot() from seaborn.\n\n# Create plot.\nplt.figure(figsize=(7,4)) \nsns.countplot(data=penguins_data, x=\"species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot for relative frequency\nIf you want to plot relative frequencies, you can normalize the counts.\n\n# Create plot.\npenguin_counts = penguins_data[\"species\"].value_counts(normalize=True)\nplt.figure(figsize=(6, 3.3))\nsns.barplot(x=penguin_counts.index, y=penguin_counts.values)\nplt.ylabel(\"Relative Frequency\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nExample: Improving the graph\nUsing Seaborn’s customization tools, we enhance the graph:\n\nplt.figure(figsize=(6, 3.5))\nsns.barplot(x=penguin_counts.index, y=penguin_counts.values, palette=\"viridis\")\nplt.title(\"Penguin Proportions\")\nplt.xlabel(\"Species Type\")\nplt.ylabel(\"Relative Frequency\")\nplt.show()"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.html#pie-chart",
    "href": "T3_Categorical_Data/Categorical.html#pie-chart",
    "title": "Categorical Variables",
    "section": "Pie chart",
    "text": "Pie chart\n\nPie chart\n\n\n\n\nA pie chart divides a circle into sections representing different categories of a variable.\nThe size of each section corresponds to the relative frequency of that category.\nIt provides a quick visual comparison of proportions.\n\n\n\n\n\n\n\nPie charts versus bar charts.\nBar charts can serve as a good way to show comparisons between categories. It is generally observed that new trends tend to shy away from using pie charts, as it is difficult for the human eye to judge the exact angle that shows the value of a category in a pie chart.\n\n\n\nMini-Activity (solo mode)\nAsk ChatGPT\n\nGo to https://chat.openai.com/\nAsk ChatGPT how to create a pie chart using matplotlib and seaborn in Python\nAdapt the code to create a pie chart for the island variable in penguin_data."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.html#transforming-categorical-variables",
    "href": "T3_Categorical_Data/Categorical.html#transforming-categorical-variables",
    "title": "Categorical Variables",
    "section": "Transforming categorical variables",
    "text": "Transforming categorical variables\n\nApply Principle 3\n\nApply graphic design principles.\n\n. . .\nWe can improve categorical variable charts using these techniques:\n\n\nRe-label categories to make them more informative.\nRe-order categories to follow a logical sequence.\nCollapse categories to simplify the chart.\n\n\n\n\nExample: Boston Housing Dataset\nThis dataset contains information collected by the U.S. Census Bureau on housing in the Boston, Massachusetts area.\n\n\n\n\n\n\n\n\n\n\nThe dataset is in Boston_dataset.xlsx. Upload it to Google Colab and load it into Python using:\n\nBoston_dataset = pd.read_excel(\"Boston_dataset.xlsx\")\nBoston_dataset.head()\n\n\n\n\n\n\n\n\ncrim\nzn\nindus\nchas\nnox\nrm\nage\ndis\nrad\ntax\nptratio\nblack\nlstat\nmedv\n\n\n\n\n0\n0.00632\n18.0\n2.31\n0\n0.538\n6.575\n65.2\n4.0900\nLow\n296\n15.3\n396.90\n4.98\n24.0\n\n\n1\n0.02731\n0.0\n7.07\n0\n0.469\n6.421\n78.9\n4.9671\nLow\n242\n17.8\n396.90\n9.14\n21.6\n\n\n2\n0.02729\n0.0\n7.07\n0\n0.469\n7.185\n61.1\n4.9671\nLow\n242\n17.8\n392.83\n4.03\n34.7\n\n\n3\n0.03237\n0.0\n2.18\n0\n0.458\n6.998\n45.8\n6.0622\nLow\n222\n18.7\n394.63\n2.94\n33.4\n\n\n4\n0.06905\n0.0\n2.18\n0\n0.458\n7.147\n54.2\n6.0622\nLow\n222\n18.7\n396.90\n5.33\n36.2\n\n\n\n\n\n\n\n\n\n\nWe concentrate on the following variables:\n\nchas : Whether the house is next to the Charles River (1: Yes and 0: No)\nrad : Index of accessibility to radial highways (Low, Medium, High).\n\n\n\nRemember…\nMake sure Python correctly recognizes categorical variables.\n\nBoston_dataset[\"chas\"] = Boston_dataset[\"chas\"].astype(\"category\")\nBoston_dataset[\"rad\"] = pd.Categorical(Boston_dataset[\"rad\"], categories=[\"Low\", \"Medium\", \"High\"], ordered=True)\n\nBoston_dataset[[\"chas\", \"rad\"]].head()\n\n\n\n\n\n\n\n\nchas\nrad\n\n\n\n\n0\n0\nLow\n\n\n1\n0\nLow\n\n\n2\n0\nLow\n\n\n3\n0\nLow\n\n\n4\n0\nLow\n\n\n\n\n\n\n\n\n\nInitial graph\nLet’s create a bar chart for chas.\n\nplt.figure(figsize=(5, 5))\nsns.countplot(data=Boston_dataset, x=\"chas\")\nplt.show()\n\n\n\n\n\n\n\n\nHowever, the categories are not very informative.\n\n\nRe-labeling categories\nTo improve readability of the bar chart, rename the categories in the chas variable.\n\nCheck the category names in the variable using the unique() function.\n\n\nBoston_dataset[\"chas\"].unique()  \n\n[0, 1]\nCategories (2, int64): [0, 1]\n\n\n\n\n\n\nReplace the category names using .map().\n\n\nBoston_dataset[\"chas\"] = Boston_dataset[\"chas\"].map({0: \"No\", 1: \"Yes\"})\n\n\n\nLet’s see what happens now.\n\nplt.figure(figsize=(6, 4))\nsns.countplot(data=Boston_dataset, x=\"chas\")\nplt.show()\n\n\n\n\n\n\n\n\nMuch better! 😃\n\n\nRe-ordering Categories\nNow, let’s create a bar chart for rad.\n\nplt.figure(figsize=(5, 5))\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nThe categories do not follow a natural order from left to right: Low, Medium, y High.\n\n\n\nTo have the desired order in the categories, we must be more explicit when defining te categorical variable.\n\nBoston_dataset[\"rad\"] = pd.Categorical(Boston_dataset[\"rad\"], categories=[\"Low\", \"Medium\", \"High\"], ordered=True)\n\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nMuch better! 😃\n\n\nCollapsing\nSome categorical variables tend to have many categories. For example, states in a country or postal codes. In these cases, it can be difficult to visualize all the categories in a single graph.\nOne strategy for developing an effective visualization is to collapse categories.\nFor example, in the variable rad, we can collapse the categories Medium and High into a single category called Other.\n\n\n\nTo collapse categories in pandas, we use the replace() function.\n\nBoston_dataset[\"rad\"] = Boston_dataset[\"rad\"].replace({\"Medium\": \"Other\", \"High\": \"Other\"})\n\nBoston_dataset[\"rad\"].value_counts()\n\nrad\nOther    424\nLow       82\nName: count, dtype: int64\n\n\n\n\n\nCollapsing categories simplifies the graph\n\nplt.figure(figsize=(5.5, 3.5))\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nIt also allows us to emphasize a category like Low and see how it compares to the other categories (as a whole)."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.html#return-to-main-page",
    "href": "T3_Categorical_Data/Categorical.html#return-to-main-page",
    "title": "Categorical Variables",
    "section": "Return to main page",
    "text": "Return to main page"
  },
  {
    "objectID": "T1_Introduction/Tools.html",
    "href": "T1_Introduction/Tools.html",
    "title": "Tools to construct graphs",
    "section": "",
    "text": "Introduction to python\nReading data with python\nCreating our first plot"
  },
  {
    "objectID": "T1_Introduction/Tools.html#introduction-to-python",
    "href": "T1_Introduction/Tools.html#introduction-to-python",
    "title": "Tools to construct graphs",
    "section": "Introduction to python",
    "text": "Introduction to python\n\nPython\n\n\n\nA versatile programming language.\nIt is free!\nIt is widely used for data cleaning, data visualization, and data modelling.\nIt can be extended with packages (libraries) developed by other users.\n\n\n\n\n\n\n\n\n\n\n\nGoogle Colab\nGoogle’s free cloud collaboration platform for creating python documents.\n\nRun python and collaborate on Jupyter notebooks for free.\nHarness the power of GPUs for free to accelerate your data science projects.\nEasily save and upload your notebooks to Google Drive.\n\n\n\n\n\n\n\n\nLet’s try a command in R\nWhat do you think will happen if we run this command?\n\nprint(\"Hello world!\")\n\n\n\nLet’s try another command\nWhat do you think will happen if we run this command?\n\nsum([1, 5, 10])\n\n\n\nUse python as a basic calculator\n\n5 + 1\n\n6\n\n\n\n10 - 3\n\n7\n\n\n\n2 * 4\n\n8\n\n\n\n9 / 3\n\n3.0\n\n\n\n\nComments\nSometimes we write things in the coding window that we want python to ignore. These are called comments and start with #.\n\nPython will ignore the comments and just execute the code.\n\n# you can put whatever after #\n# for example... blah blah blah\n\n\nSi desea escribir un comentario que ocupe más de una línea, es una buena idea poner un # al principio de cada línea.\n\n\n\nIntroduction to functions in R\nOne of the best things about python is that there are many built-in commands you can use. These are called functions.\n. . .\nFunctions have two basic parts:\n\n\nThe first part is the name of the function (for example, sum).\nThe second part is the input to the function, which goes inside the parentheses (sum([1, 5, 15])).\n\n\n\n\nPython is strict\nPython, like all programming languages, is very strict. For example, if you write\n\nsum([1, 100])\n\n101\n\n\nit will tell you the answer, 101.\n. . .\nBut if you write\n\nSum([1, 100])\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[43], line 1\n----&gt; 1 Sum([1, 100])\n\nNameError: name 'Sum' is not defined\n\n\n\nwith the “s” capitalized, he will act like he has no idea what we are talking about!\n\nlo mismo si olvidas incluir un parentesis\n\n\n\nSave your work in python objects\nVirtually anything, including the results of any python function, can be saved in an object.\nThis is accomplished by using an assignment operator, which can be an equals symbol (=).\n. . .\nYou can make up any name you want for a python object. However, there are two basic rules for this:\n\n\nIt has to be different from a function name in python.\nIt has to be as specific as possible.\n\n\n\n\nFor example\n\n# This code will assign the number 18\n# to the object called my_favorite_number\n\nmy_favorite_number = 18\n\nAfter running this code, nothing happens. But if we run the object on its own, we can see what’s inside it.\n\nmy_favorite_number\n\n18\n\n\nYou can also use print(my_favorite_number).\n\n\nLists\nSo far we have used python objects to store a single number. But in statistics we are dealing with variation, which by definition needs more than one number.\n. . .\nA python object can also store a complete set of numbers, called a list.\nYou can think of a list as a vector of numbers (or values).\n. . .\nThe [] command can be used to combine several individual values into a list.\n\npuedes pensar que el c es por combinar\n\n\n\nFor example\nThis code creates two vectors\n\nmy_list = [1, 2, 3, 4, 5]\nmy_list_2 = [10, 10, 10, 10, 10]\n\nLet’s see its content\n\nmy_list\n\n[1, 2, 3, 4, 5]\n\n\n\nmy_list_2\n\n[10, 10, 10, 10, 10]\n\n\n\n\nOperations\nWe can do simple operations with vectors. For example, we can sum all the elements of a list.\n\nmy_list = [1, 2, 3, 4, 5]\nsum(my_list)\n\n15\n\n\n\n\nIndexing\nWe can index a position in the vector using square brackets with a number like this: [1].\nSo, if we wanted to print the contents of the first position in my_list, we could write\n\nmy_list[1]\n\n2\n\n\nAn feature of Python is that the first element of a list or vector is indexed using the number 0.\n\nmy_list[0]\n\n1\n\n\n\n\nA little more about objects in python\nYou can think of python objects as containers that hold values.\nA python object can hold a single value, or it can hold a group of values (as in a vector).\nSo far, we’ve only put numbers into python objects.\n. . .\n\nPython objects can actually contain three types of values: numbers, characters, and booleans.\n\n\nCharacter values\nCharacters are made up of text, such as words or sentences. An example of a list with characters as elements is:\n. . .\n\nmany_greetings = [\"hi\", \"hello\", \"hola\", \"bonjour\", \"ni hao\", \"merhaba\"]\nmany_greetings\n\n['hi', 'hello', 'hola', 'bonjour', 'ni hao', 'merhaba']\n\n\n. . .\nIt is important to know that numbers can also be treated as characters, depending on the context.\nFor example, when 20 is enclosed in quotes (\"20\") it will be treated as a character value, even though it encloses a number in quotes.\n\n\nBoolean values\nBoolean values are True or False.\nWe may have a question like:\n\nIs the first element of the vector many_greetings \"hola\"?\n\n. . .\nWe can ask python to find out and return the answer True or False.\n\nmany_greetings[1] == \"hola\"\n\nFalse\n\n\n\n\nLogical operators\nMost of the questions we ask python to answer with True or False involve comparison operators like &gt;, &lt;, &gt;=, &lt;=, and ==.\nThe double == sign checks whether two values are equal. There is even a comparison operator to check whether values are not equal: !=.\nFor example, 5 != 3 is a True statement.\n\n\nCommon logical operators\n\n&gt; (larger than)\n&gt;= (larger than or equal to)\n&lt; (smaller than)\n&lt;= (smaller than or equal to)\n== (equal to)\n!= (not equal to)\n\n\n\nQuestion\nRead this code and predict its response. Then, run the code in Google Colab and validate if you were correct.\n\nA = 1\nB = 5\ncompare = A &gt; B\ncompare\n\n\n\nProgramming culture: Trial and error\nThe best way to learn programming is to try things out and see what happens. Write some code, run it, and think about why it didn’t work.\nThere are many ways to make small mistakes in programming (for example, typing a capital letter when a lowercase letter is needed).\nWe often have to find these mistakes through trial and error.\n\n\nPython libraries\nLibraries are the fundamental units of reproducible python code. They include reusable python functions, documentation describing how to use them, and sample data.\nIn this course, we will be working mostly with the following libraries:\n\npandas for data manipulation\nmatplotlib and seaborn for data visualization\nstatsmodels and scikit-learn for data modelling"
  },
  {
    "objectID": "T1_Introduction/Tools.html#reading-data-with-python",
    "href": "T1_Introduction/Tools.html#reading-data-with-python",
    "title": "Tools to construct graphs",
    "section": "Reading data with python",
    "text": "Reading data with python\n\nData organization\nIn data science, we organize data into rows and columns.\n\n    Condition  Age   Wt    Wt2\n1  Uninformed   35  136  135.8\n2  Uninformed   45  162  161.8\n3    Informed   52  117  116.8\n4    Informed   29  184  182.8\n5  Uninformed   38  134  136.6\n6    Informed   39  189  183.2\n\n. . .\nThe rows are the sampled cases. In this example, the rows are housekeepers from different hotels. There are six rows, so there are six housekeepers in this data set.\n. . .\nDepending on the study, the rows could be people, states, couples, mice—any case you’re taking a sample from to study.\n\n\n\n\n\nThe columns represent variables or attributes of each case that were measured.\n\n    Condition  Age   Wt    Wt2\n1  Uninformed   35  136  135.8\n2  Uninformed   45  162  161.8\n3    Informed   52  117  116.8\n4    Informed   29  184  182.8\n5  Uninformed   38  134  136.6\n6    Informed   39  189  183.2\n\n\n. . .\n\nIn this study, housekeepers were either informed or not that their daily work of cleaning hotel rooms was equivalent to getting adequate exercise for good health.\n. . .\n\nSo one of the variables, Condition, indicates whether they were informed of this fact or not.\n\n\n\nOther variables include the age of the housekeeper (Age), her weight before starting the study (Wt), and her weight at the end of the study (Wt2), measured four weeks later.\n\nTherefore, the values in each row represent the values of that particular case in each of the variables measured.\n    Condition  Age   Wt    Wt2\n1  Uninformed   35  136  135.8\n2  Uninformed   45  162  161.8\n3    Informed   52  117  116.8\n4    Informed   29  184  182.8\n5  Uninformed   38  134  136.6\n6    Informed   39  189  183.2\n\n¿Cuántas variables hay en este conjunto de datos?\n\n\n\nLoading data in python\nIn this course, we will assume that data is stored in an Excel file with the above organization. As an example, let’s use the file penguins.xlsx.\n\n\n\n\n\n\n\n\nThe file must be previously uploaded to Google Colab.\n\n\n\n\nThe dataset penguins.xlsx contains data from penguins living in three islands.\n\n\n\n\n\n\n\npandas library\n\n\n\n\n\n\n\n\n\npandas is an open-source Python library for data manipulation and analysis.\nIt is built on top of numpy for high-performance data operations..\nIt allows the user to import, clean, transform, and analyze data efficiently\nhttps://pandas.pydata.org/\n\n\n\n\n\nImporting pandas\nFortunately, the pandas library is already pre-installed in Google Colab.\n\nHowever, we need to inform Google Colab that we want to use pandas and its functions using the following command:\n\nimport pandas as pd\n\n\nThe command as pd allows us to have a short name for pandas. To use a function of pandas, we use the command pd.function().\n\n\nLoading data using pandas\nThe following code shows how to read the data in the file “penguins.xlsx” into python.\n\n# Load the Excel file into a pandas DataFrame.\npenguins_data = pd.read_excel(\"penguins.xlsx\")\n\n\n\nThe function head()\nThe function head() allows you to print the first rows of a pandas data frame.\n\n# Print the first 4 rows of the dataset.\npenguins_data.head(4)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n\n\n\n\n\n\n\nIndexing variables a dataset\nWe can select a specific variables of a data frame using the syntaxis below.\n\npenguins_data['bill_length_mm']\n\n0      39.1\n1      39.5\n2      40.3\n3       NaN\n4      36.7\n       ... \n339    55.8\n340    43.5\n341    49.6\n342    50.8\n343    50.2\nName: bill_length_mm, Length: 344, dtype: float64\n\n\nHere, we selected the variable bill_length_mm in the penguins_data dataset.\n\n\n\nTo index multiple variables of a data frame, we put the names of the variables in a list object. For example, we select bill_length_mm, species, and island as follows:\n\nsub_penguins_data = penguins_data[ ['bill_length_mm',  'species', 'island'] ]\nsub_penguins_data.head()\n\n\n\n\n\n\n\n\nbill_length_mm\nspecies\nisland\n\n\n\n\n0\n39.1\nAdelie\nTorgersen\n\n\n1\n39.5\nAdelie\nTorgersen\n\n\n2\n40.3\nAdelie\nTorgersen\n\n\n3\nNaN\nAdelie\nTorgersen\n\n\n4\n36.7\nAdelie\nTorgersen\n\n\n\n\n\n\n\n\n\nIndexing rows\nTo index rows in a dataset, we use the argument loc from pandas. For example, we select the rows 3 to 6 of the penguins_dataset dataset:\n\nrows_penguins_data = penguins_data.loc[2:5]\nrows_penguins_data\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n\n\n\n\n\n\n\n\n\nrows_penguins_data\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n\n\n\n\n\nNote that the index 2 and 5 refer to observations 3 and 7, respectively, in the dataset. This is because the first index in python is 0.\n\n\nIndexing rows and columns\nUsing loc, we can also retrieve a subset from the dataset by selecting specific columns and rows.\n\nsub_rows_pdata = penguins_data.loc[2:5, ['bill_length_mm',  'species', 'island'] ]\nsub_rows_pdata\n\n\n\n\n\n\n\n\nbill_length_mm\nspecies\nisland\n\n\n\n\n2\n40.3\nAdelie\nTorgersen\n\n\n3\nNaN\nAdelie\nTorgersen\n\n\n4\n36.7\nAdelie\nTorgersen\n\n\n5\n39.3\nAdelie\nTorgersen"
  },
  {
    "objectID": "T1_Introduction/Tools.html#creating-our-first-plot",
    "href": "T1_Introduction/Tools.html#creating-our-first-plot",
    "title": "Tools to construct graphs",
    "section": "Creating our first plot",
    "text": "Creating our first plot\n\nmatplotlib library\n\nmatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python\nIt is widely used in the data science community for plotting data in various formats\nIdeal for creating simple visualizations like line plots, bar charts, scatter plots, and more\nhttps://matplotlib.org/\n\n\n\n\n\n\n\n\nseaborn library\n\nseaborn is a Python library built on top of Matplotlib\nDesigned to make statistical data visualization easy and beautiful\nIdeal for creating informative and attractive visualizations with minimal code\nhttps://seaborn.pydata.org/index.html\n\n\n\n\n\n\n\n\nImporting the libraries\n\nThe matplotlib and seaborn libraries are pre-installed in Google Colab. However, we need to inform Google Colab that we want to use them and its functions using the following command:\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nSimilar to pandas, the command as sns allows us to have a short name for seaborn. Similarly, we rename matplotlib as plt.\n\n\nSeaborn Plot Structure\nSeaborn has a structured approach to creating visualizations.\nplt.figure(figsize=(WIDTH, HEIGHT))\nsns.PLOTTYPE(data=my_data, x=“Variable1”, y=“Variable2”, hue=“Variable3”, MOREOPTIONS)\nplt.title(“Title”)\nplt.xlabel(“X-axis label”)\nplt.ylabel(“Y-axis label”)\nplt.MOREOPTIONS()\nplt.show()\n\n\nEjemplo\nIs there a difference between bill length and bill depth across penguin species?\n\n\n\n\n\n\n\nEjemplo\nIs there a difference between bill length and bill depth across penguin species?\n\nplt.figure(figsize=(6, 4))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\")\nplt.show() # Display the plot\n\n\n\n\n\n\n\n\n\n\nAdding titles and labels\n\nplt.figure(figsize=(6, 4))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\")\nplt.title(\"Bill Depth vs. Bill Length\")\nplt.xlabel(\"Bill Depth (mm)\")\nplt.ylabel(\"Bill Length (mm)\")\nplt.legend(title=\"Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nChanging theme\n\nplt.figure(figsize=(6, 4))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\")\nplt.xlabel(\"Bill Depth (mm)\")\nplt.ylabel(\"Bill Length (mm)\")\nplt.legend(title=\"Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nMore options\n\nWe can also use other functions to improve the aspect of the figure:\n\nplt.title(fontsize): Font size of the title.\nplt.ylabel(fontsize): Font size of y axis title.\nplt.xlabel(fontsize): Font size of x axis title.\nplt.yticks(fontsize): Font size of the y axis labels.\nplt.xticks(fontsize): Font size of the x axis labels.\n\n\n\n\n\n\nCode\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\", fontsize = 12)\nplt.xlabel(\"Bill Depth (mm)\", fontsize = 12)\nplt.ylabel(\"Bill Length (mm)\", fontsize = 12)\nplt.legend(title=\"Species\", fontsize = 12)\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nSaving plots\n\nWe save a figure using the save.fig function from matplotlib. The dpi argument of this function sets the resolution of the image. The higher the dpi, the better the resolution.\n\nplt.figure(figsize=(5, 5))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \nhue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\", fontsize = 12)\nplt.xlabel(\"Bill Depth (mm)\", fontsize = 12)\nplt.ylabel(\"Bill Length (mm)\", fontsize = 12)\nplt.legend(title=\"Species\", fontsize = 12)\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.savefig('scatter_plot.png',dpi=300)\n\n\n\nMini-actividad (solo mode)\n\nOpen the following Google Colab link:\nhttps://colab.research.google.com/drive/1c-sy5yQY1DwgaZAI6YnDLMTEYMpLCWyX?usp=sharing\nCopy the notebook to your drive.\nAnswer the questions."
  },
  {
    "objectID": "T1_Introduction/Tools.html#return-to-main-page",
    "href": "T1_Introduction/Tools.html#return-to-main-page",
    "title": "Tools to construct graphs",
    "section": "Return to main page",
    "text": "Return to main page"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.html",
    "href": "T2_Type_of_Variables/Types.html",
    "title": "Types of variables",
    "section": "",
    "text": "What type is my data?\nData manipulation with pandas"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.html#review-of-data-types-and-summary-statistics",
    "href": "T2_Type_of_Variables/Types.html#review-of-data-types-and-summary-statistics",
    "title": "Types of variables",
    "section": "Review of data types and summary statistics",
    "text": "Review of data types and summary statistics\n\nTypes of data I\n\nWhen a numerical quantity designating how much or how many is assigned to each item in the sample, the resulting set of values is numerical or quantitative.\n\nHeight (in ft).\nWeight (in lbs).\nAge (in years).\n\n\n\nTypes of data II\n\nWhen sample items are placed into categories and category names are assigned to the sample items, the data are categorical or qualitative.\n\nHair color.\nCountry of origin.\nZIP code.\n\n\n\nData types\n\n\n\n\n\n\n\nHow do we check the type of variable?\nLet’s load the data in “penguins.xlsx”.\n\n# Load pandas.\nimport pandas as pd\n\n# Load the Excel file into a pandas DataFrame.\npenguins_data = pd.read_excel(\"penguins.xlsx\")\n\n# Print the first 4 rows of the dataset.\npenguins_data.head(4)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n\n\n\n\n\n\n\n\nIn python, we check the type of each variable in a dataset using the function info().\n\npenguins_data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \n 7   year               344 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 21.6+ KB\n\n\n\n\nGeneral python formats\n\nfloat64 format for numerical variables with decimals.\nint64 format for numerical variables with integers.\nobject format for general variables with characters.\n\n\n\nActivity (solo mode)\n\nGo to the Modules section on our CANVAS website.\nComplete the Activity 2.1: Types of Variables individually."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.html#data-manipulation-with-pandas",
    "href": "T2_Type_of_Variables/Types.html#data-manipulation-with-pandas",
    "title": "Types of variables",
    "section": "Data manipulation with pandas",
    "text": "Data manipulation with pandas\n\npandas library\n\n\n\n\n\n\n\n\n\npandas allows the user to import, clean, transform, and analyze data efficiently\nhttps://pandas.pydata.org/\n\n\n\nImport it in Google Colab as follows.\n\nimport pandas as pd\n\n\n\nChaining operations with pandas\nOne of the most important techniques in pandas is method chaining, which allows for cleaner and more readable data manipulation.\nThe general structure of chaining looks like this:\n\n\n\n\n\n\n\nKey pandas functions\npandas provides functions to solve common data manipulation tasks:\n\n\nquery() filters observations based on conditions.\nloc[] and iloc[] select specific rows and columns.\nassign() creates new variables.\nsort_values() changes the order of rows.\nagg() reduces multiple values to a single numerical summary.\n\n\n\n\n\n\n\n\n\n\nTo practice, we will use the dataset penguins_data.\n\n\nFiltering with query()\nFilter the data for the species “Gentoo.”\n\n(penguins_data\n  .query(\"species == 'Gentoo'\")\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n152\nGentoo\nBiscoe\n46.1\n13.2\n211.0\n4500.0\nfemale\n2007\n\n\n153\nGentoo\nBiscoe\n50.0\n16.3\n230.0\n5700.0\nmale\n2007\n\n\n154\nGentoo\nBiscoe\n48.7\n14.1\n210.0\n4450.0\nfemale\n2007\n\n\n155\nGentoo\nBiscoe\n50.0\n15.2\n218.0\n5700.0\nmale\n2007\n\n\n156\nGentoo\nBiscoe\n47.6\n14.5\n215.0\n5400.0\nmale\n2007\n\n\n\n\n\n\n\n\nThe head() function prints the first 6 rows of the dataset.\n\n\n\n\nWe can also filter the data to get penguins with a body mass greater than 5000g.\n\n(penguins_data\n  .query(\"body_mass_g &gt; 5000\")\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n153\nGentoo\nBiscoe\n50.0\n16.3\n230.0\n5700.0\nmale\n2007\n\n\n155\nGentoo\nBiscoe\n50.0\n15.2\n218.0\n5700.0\nmale\n2007\n\n\n156\nGentoo\nBiscoe\n47.6\n14.5\n215.0\n5400.0\nmale\n2007\n\n\n159\nGentoo\nBiscoe\n46.7\n15.3\n219.0\n5200.0\nmale\n2007\n\n\n161\nGentoo\nBiscoe\n46.8\n15.4\n215.0\n5150.0\nmale\n2007\n\n\n\n\n\n\n\n\n\nSelecting columns with loc[]\nSelect the columns species, body_mass_g and sex.\n\n(penguins_data\n  .loc[:, [\"species\", \"body_mass_g\", \"sex\"]]\n  .head()\n)\n\n\n\n\n\n\n\n\nspecies\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\n3750.0\nmale\n\n\n1\nAdelie\n3800.0\nfemale\n\n\n2\nAdelie\n3250.0\nfemale\n\n\n3\nAdelie\nNaN\nNaN\n\n\n4\nAdelie\n3450.0\nfemale\n\n\n\n\n\n\n\n\n\nCombining query() and loc()\nSelect the columns species, body_mass_g and sex. Next, filter the data for the species “Gentoo.”\n\n(penguins_data\n  .loc[:, [\"species\", \"body_mass_g\", \"sex\"]]\n  .query(\"species == 'Gentoo'\")\n).head(4)\n\n\n\n\n\n\n\n\nspecies\nbody_mass_g\nsex\n\n\n\n\n152\nGentoo\n4500.0\nfemale\n\n\n153\nGentoo\n5700.0\nmale\n\n\n154\nGentoo\n4450.0\nfemale\n\n\n155\nGentoo\n5700.0\nmale\n\n\n\n\n\n\n\n\n\nCreate new columns with assign()\nWith assign(), we can create new columns (variables) that are functions of existing ones. For example, we can compute the ratio of bill_length_mm y bill_depth_mm.\n\n\n(penguins_data\n  .assign(LengthDepthRatio = lambda df: df[\"bill_length_mm\"] / df[\"bill_depth_mm\"])\n  .loc[:, [\"species\", \"body_mass_g\", \"sex\", \"LengthDepthRatio\"]]\n).head()\n\n\n\n\nThe new dataset has the variable LengthDepthRatio.\n\n\n\n\n\n\n\n\n\nspecies\nbody_mass_g\nsex\nLengthDepthRatio\n\n\n\n\n0\nAdelie\n3750.0\nmale\n2.090909\n\n\n1\nAdelie\n3800.0\nfemale\n2.270115\n\n\n2\nAdelie\n3250.0\nfemale\n2.238889\n\n\n3\nAdelie\nNaN\nNaN\nNaN\n\n\n4\nAdelie\n3450.0\nfemale\n1.901554\n\n\n\n\n\n\n\n\n\nSorting with sort_values()\nWe can sort the data based on a column like bill_length_mm.\n\n(penguins_data\n  .sort_values(\"bill_length_mm\")\n).head(4)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n142\nAdelie\nDream\n32.1\n15.5\n188.0\n3050.0\nfemale\n2009\n\n\n98\nAdelie\nDream\n33.1\n16.1\n178.0\n2900.0\nfemale\n2008\n\n\n70\nAdelie\nTorgersen\n33.5\n19.0\n190.0\n3600.0\nfemale\n2008\n\n\n92\nAdelie\nDream\n34.0\n17.1\n185.0\n3400.0\nfemale\n2008\n\n\n\n\n\n\n\n\n\n\nTo sort in descending order, use ascending=False inside sort_values().\n\n(penguins_data\n  .sort_values(\"bill_length_mm\", ascending=False)\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n185\nGentoo\nBiscoe\n59.6\n17.0\n230.0\n6050.0\nmale\n2007\n\n\n293\nChinstrap\nDream\n58.0\n17.8\n181.0\n3700.0\nfemale\n2007\n\n\n253\nGentoo\nBiscoe\n55.9\n17.0\n228.0\n5600.0\nmale\n2009\n\n\n339\nChinstrap\nDream\n55.8\n19.8\n207.0\n4000.0\nmale\n2009\n\n\n267\nGentoo\nBiscoe\n55.1\n16.0\n230.0\n5850.0\nmale\n2009\n\n\n\n\n\n\n\n\n\nSummarizing with agg()\nWe can calculate the average of the columns bill_length_mm, bill_depth_mm, and body_mass_g.\n\n(penguins_data\n  .loc[:, [\"bill_length_mm\", \"bill_depth_mm\", \"body_mass_g\"]]\n  .agg([\"mean\"])\n)\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nbody_mass_g\n\n\n\n\nmean\n43.92193\n17.15117\n4201.754386\n\n\n\n\n\n\n\n\n\nBy default, agg() ignores missing values.\n\n\n\nSaving results in new objects\nAfter performing operations on our data, we can save the modified dataset as a new object.\n\nsummary_penguins_data = (penguins_data\n  .loc[:, [\"bill_length_mm\", \"bill_depth_mm\", \"body_mass_g\"]]\n  .agg([\"mean\"])\n)\n\nsummary_penguins_data\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nbody_mass_g\n\n\n\n\nmean\n43.92193\n17.15117\n4201.754386\n\n\n\n\n\n\n\n\n\nFinal Remarks\n\n\npandas is a Python library for data manipulation.\nUnderstanding variable types helps determine the best operations and visualizations.\nThere are specific charts for numerical and categorical variables.\nThroughout this course, we will explore various visualizations for different types of data."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.html#return-to-main-page",
    "href": "T2_Type_of_Variables/Types.html#return-to-main-page",
    "title": "Types of variables",
    "section": "Return to main page",
    "text": "Return to main page"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.html",
    "href": "T4_Numerical_Data/Numerical.html",
    "title": "Numerical Variables",
    "section": "",
    "text": "Introduction to the example\nSummary statistics\nGraphs for numerical variables"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.html#summary-statistics",
    "href": "T4_Numerical_Data/Numerical.html#summary-statistics",
    "title": "Numerical Variables",
    "section": "Summary statistics",
    "text": "Summary statistics\n\nSummary statistic\n\nHelps us to summarize a list of observations in a simple way.\n\nFor numerical data, the most popular summary statistics are:\n\n\nSample mean\nSample variance and sample standard deviation\nSample quartiles\nSample maximum and minimum\n\n\n\n\nSample mean\n\nIndicates the center of the data.\n\nLet \\(y_1, y_2, \\ldots, y_n\\) be an observed sample of size \\(n\\).\nThe sample mean is\n\\[\\bar{y} = \\frac{1}{n}\\sum_{i=1}^{n} y_i = \\frac{y_1 + y_2 + \\cdots + y_n}{n}.\\]\n\n\n\nIn python, we calculate the sample mean using the function mean().\n\npiston_data_mean = piston_data[\"cycle_time\"].mean()\nprint(piston_data_mean)\n\n0.6524599999999999\n\n\nWe use the function print to show the number. Otherwise, python will show the computer type of value stored in piston_data_mean.\n\n\n\nYou can also round the result to, say, three decimals.\n\nprint( round(piston_data_mean, 3) )\n\n0.652\n\n\nInterpretation: On average, the piston takes 0.652 seconds to complete a cycle.\n\n\nSample variance\n\nIndicates how spread out the data are around the mean.\n\nLet \\(y_1, y_2, \\ldots, y_n\\) be an observed sample of size \\(n\\). The sample mean is\n\\[\ns^2 = \\frac{1}{n-1} \\sum_{i=1}^{n} (y_i - \\bar{y})^2 = \\frac{(y_1 - \\bar{y})^2  + \\cdots + (y_n - \\bar{y})^2}{n-1}\n\\]\n. . .\nThe sample variance is like an average of the squared differences between each observation and the sample mean.\n\n\n\nIn python, the sample variance is calculated using the function var().\n\npiston_data_var = piston_data[\"cycle_time\"].var()\nprint( round(piston_data_var, 3))\n\n0.139\n\n\nInterpretation: The variance of the piston cycle times is 0.139. A larger variance means greater dispersion of the data around the mean.\n\n\nSample standard deviation\nA drawback of the sample variance is that it is not on the same scale as the actual observations.\nTo obtain a measure of spread whose units are the same as those of the sample, we simply take the squared root of the sample variance\n\\[\ns = \\left(\\frac{1}{n-1} \\sum_{i=1}^{n} (y_i - \\bar{y})^2 \\right)^{1/2}\n\\]\nThis quantity is known as the sample standard deviation. It is in the same units as the observations.\n\n\n\nIn python, the sample variance is calculated using the function std().\n\npiston_data_std = piston_data[\"cycle_time\"].std()\nprint(round(piston_data_std,3))\n\n0.373\n\n\nInterpretation: On average, a piston takes 0.652 seconds to complete a cycle, with a variation of \\(\\pm 0.373\\) seconds.\n\n\nSample quartiles\nThe sample median is the middle number of the ordered data values.\n. . .\nSample quartiles divide the data as nearly as possible into quarters:\n\n\nFirst quartile (\\(Q_1\\)) is the median of the lower half of the data.\nSecond quartile (\\(Q_2\\)) is the median of the data.\nThird quartile (\\(Q_3\\)) is the median of the upper half of the data.\n\n\n\n\n\n\n\n\n\n\nIn python, the quartiles are calculated using the function quantile().\n\n# Set the quantiles.\nset_quantiles = [0.25, 0.5, 0.75]\n# Compute the quantiles.\npiston_data[\"cycle_time\"].quantile(set_quantiles)\n\n0.25    0.3050\n0.50    0.5455\n0.75    1.0690\nName: cycle_time, dtype: float64\n\n\nInterpretation:\n\n25% of cycle times are below 0.305 sec.\n50% of cycle times are below 0.546 sec.\n75% of cycle times are below 1.07 sec.\n\n\n\nSample maximum and minimum\nWe compute the maximum and minimum using the functions max() and min(), respectively.\n\npiston_data_max = piston_data[\"cycle_time\"].max()\nprint(piston_data_max)\n\n1.141\n\n\n\n\npiston_data_min = piston_data[\"cycle_time\"].min()\nprint(piston_data_min)\n\n0.175\n\n\nInterpretation:\n\nThe maximum cycle time is 1.14 seconds.\nThe minimum cycle time is 0.175 seconds.\n\n\n\nAverage vs. Median\nThe average and median estimate the central value of the data in different ways.\n\nThe average is the sum of the values divided by the total.\nThe median is the central value of an ordered set of data.\n\n\n\nWhen do we use the average?\nThe average is used when the data is symmetrically or evenly distributed and there are no significant outliers.\nFor example, the height of a large sample of people in a homogeneous population.\n\n\nWhen do we use the median?\nThe median is used when there are outliers that could skew the mean.\nFor example:\n\nAnnual household income in a country (where there are a few billionaires who distort the mean).\nHouse prices in a city (where a few very expensive properties can inflate the mean).\n\n\n\nActivity (only mode) Part 1\nA company that manufactures capacitor retaining bolts for automobile engines implemented a quality control system. As part of this quality control system, a team of engineers decided to record the number of nonconforming bolts produced each shift.\nThe file bolts.xlsx contains the number of non-conforming bolts during the last 45 shifts.\n\nCalculates and interprets the average, variance, standard deviation, quartiles, minimum and maximum."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.html#data-visualizations-for-numerical-variables",
    "href": "T4_Numerical_Data/Numerical.html#data-visualizations-for-numerical-variables",
    "title": "Numerical Variables",
    "section": "Data visualizations for numerical variables",
    "text": "Data visualizations for numerical variables\n\nHistogram\n\nGraphical display that gives an idea of the “shape” of the sample, indicating regions where sample points are concentrated and regions where they are sparse.\n\nThe bars of the histogram touch each other. A space indicates that there are no observations in that interval.\n\n\nHistogram of Na\nTo create a histogram, we use the function histplot() from seabron.\n\n\nBox plot\n\nA box plot is a graphic that presents the median, the first and third quartiles, and any “outliers” present in the sample.\n\nThe interquartile range (IQR) is the difference between the third quartile and the first quartile (\\(Q_3 - Q_1\\)). This is the distance needed to span the middle half of the data.\n\n\nAnatomy of a box plot\n\n\n\n\n\nSee also https://towardsdatascience.com/why-1-5-in-iqr-method-of-outlier-detection-5d07fdc82097\n\n\nBox plot of Na\nTo create a boxplot, we use the function boxplot() from seabron.\n\n\nOutliers\n\nOutliers are points that are much larger or smaller than the rest of the sample points.\nOutliers may be data entry errors or they may be points that really are different from the rest.\nOutliers should not be deleted without considerable thought—sometimes calculations and analyses will be done with and without outliers and then compared."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.html#return-to-main-page",
    "href": "T4_Numerical_Data/Numerical.html#return-to-main-page",
    "title": "Numerical Variables",
    "section": "Return to main page",
    "text": "Return to main page"
  },
  {
    "objectID": "T1_Introduction/Introduction.html",
    "href": "T1_Introduction/Introduction.html",
    "title": "What is data visualization?",
    "section": "",
    "text": "Introduction to data science\nThree principles of data visualization\nActivity\nStorytelling"
  },
  {
    "objectID": "T1_Introduction/Introduction.html#introduction-to-data-science",
    "href": "T1_Introduction/Introduction.html#introduction-to-data-science",
    "title": "What is data visualization?",
    "section": "Introduction to data science",
    "text": "Introduction to data science\n\nData science is …\na multidisciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge and insights from vast amounts of structured and unstructured data.\n. . .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe scheme of data science\n\n\n\n\n\n\nProvost, F., & Fawcett, T. (2013). Data Science for Business: What you need to know about data mining and data-analytic thinking. O’Reilly Media, Inc.\n\n\n\nBusiness understanding\n\n\nBusiness understanding refers to defining the business problem to be solved.\nThe goal is to reframe the business problem as a data science problem.\nOften, reframing the problem and designing a solution is an iterative process.\n\n\n\nData understanding I\n\n\nIf the goal is to solve a business problem, the data that makes up the raw material available from which the solution will be built.\nThe available data rarely matches the problem.\nFor example, historical data is often collected for purposes unrelated to the current business problem or for no explicit purpose at all.\n\n\n. . .\n\nOur goal is to turn data into information that answers useful questions.\n\n\n\nData types\n\n\n\nText\n\n\nImages\n\nVideo\n\n\nAudio\n\n\n\n\n\n\nNumerical data\nData science methodology is based on numerical data given in tables.\n\n\n\n\n\n\nIn fact, texts, images, videos or audios are transformed into this format to process them.\n\n. . .\nIn this course, we will assume that the data is in a table.\n\n\nProblem Situation\nTBD\n\n\nGoal of the problem situation\nTBD"
  },
  {
    "objectID": "T1_Introduction/Introduction.html#the-three-principles-of-data-science",
    "href": "T1_Introduction/Introduction.html#the-three-principles-of-data-science",
    "title": "What is data visualization?",
    "section": "The three principles of data science",
    "text": "The three principles of data science\n\nWhat is Data Visualization?\n\n“A visualization [of data] is any visual presentation intended to reveal evidence, making the invisible visible.” Alberto Cairo (2015).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.nytimes.com/2019/02/28/learning/whats-going-on-in-this-graph-march-6-2019.html\n\n\n\n\n\n\n\n\n\n\nhttps://www.nytimes.com/2018/09/18/learning/whats-going-on-in-this-graph-sept-19-2018.html\n\n\n\n\n\n\n\n\n\n\nhttps://www.nytimes.com/2018/10/16/learning/whats-going-on-in-this-graph-oct-17-2018.html\n\n\n\n\nAt its core, data visualization allows you to delve into complex datasets to extract meaningful insights using graphical displays.\n\nData visualizations are primarily concerned with providing evidence and enabling the audience to explore and draw their own conclusions about what the visualizations reveal about the data. \n. . .\nData visualization has 3 key principles…\n\nAs data scientists, we create data visualizations in order to understand our data and explain our analyses to other people. A plot should have a message, and it’s our job to communicate this message as clearly as possible.\n\n\n\nPrinciple 1: Define the Message or Question\nFormulate the question of interest or the message you want to convey.\n\n\n\n\n\n\n\n\n\n\n\n\nEl mensaje puede ser una pregunta\n\nWhat is the key comparison?\nHow do we emphasize it?\nDo you have reason to expect that one group/observation might be different?\nWhy might your finding about shape matter?\nWhat additional comparison might add value to the investigation?\nAre there any potentially important features to compare against?\n\n\n\n\nPrinciple 2: Turn Data into Information\nYour graph should use data to convey the message or answer the question. In other words, it should transform data into information.\n\n\n\n\n\n\nEnhance your graph with color symbols and text to convey additional information.\n\n\n\nPrinciple 3: Apply Graphic Design Principles\n\n\n\n\n\n\nObjects are easily identifiable by color.\nUse direct labels instead of a legend.\nElements such as text, lines, and shapes of the same nature should look similar.\nBalance graphics and text.\nBe cautious with default settings in visualization software.\nUse a grid-based layout to organize your visualization.\n\n\n\n\n\n\n\n\n\n\n\n\n\nDon’t limit yourself to simple elements. Enhance your graph with color symbols to convey additional information. If possible, add context with markers and reference labels.\nAdditionally, include a legend in the graph that describes key features and summarizes its conclusions.\n\n\n\nExample\n\nPrinciple 1: It is cheaper to take Uber than to own a car in four of the five largest cities in the USA.\n\n\n\n\nWeekly cost (in USD) of daily commuting\n\n\nCity\nUber\nAuto\n\n\n\n\nNew York City\n142\n218\n\n\nWashington D.C.\n96\n130\n\n\nChicago\n77\n116\n\n\nLos Angeles\n62\n89\n\n\nDallas\n181\n65\n\n\n\n\n\n\n\n\nThe estimated costs are based on a twice-daily 10.4 mile one-way commute at peak times over the course of a week using either the UberPool option (where available) or alternatively UberX vs the cost of using a personal vehicle (including any associated costs of ownership). Study conducted in February 2017.\n\n\n\n\nPrinciple 2: Turn data into information.\n\n\n\n\n\n\n\n\n\n\n\n\nPrinciple 3: Apply Graphic Design Principles.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“The greatest value of a picture is when it forces us to notice what we never expected to see.” John W. Tukey.\n\n\n\n\n\n. . .\nhttps://www.storytellingwithdata.com/ is an excellent guide on data visualization."
  },
  {
    "objectID": "T1_Introduction/Introduction.html#return-to-main-page",
    "href": "T1_Introduction/Introduction.html#return-to-main-page",
    "title": "What is data visualization?",
    "section": "Return to main page",
    "text": "Return to main page"
  },
  {
    "objectID": "index.slides.html#about-the-author",
    "href": "index.slides.html#about-the-author",
    "title": "IN2039 Data Visualization for Decision Making",
    "section": "About the author",
    "text": "About the author\nAlan R. Vazquez (website) is a Research Professor at the Department of Industrial Engineering at Tecnologico de Monterrey, Monterrey campus.\n\n\n\n\nTecnologico de Monterrey"
  }
]