[
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#agenda",
    "href": "T3_Categorical_Data/Categorical.slides.html#agenda",
    "title": "Categorical Variables",
    "section": "Agenda",
    "text": "Agenda\n\nIntroduction\nSummary statistics\nBar chart\nPie chart\nTransforming categorical variables"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#first-things-first",
    "href": "T3_Categorical_Data/Categorical.slides.html#first-things-first",
    "title": "Categorical Variables",
    "section": "First things first",
    "text": "First things first\n\nToday, we will use Python to create charts and tables. For this, we will use libraries such as pandas, matplotlib, and seaborn.\n\nLet’s import them before we start.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#example-1-penguins-dataset",
    "href": "T3_Categorical_Data/Categorical.slides.html#example-1-penguins-dataset",
    "title": "Categorical Variables",
    "section": "Example 1: Penguins dataset",
    "text": "Example 1: Penguins dataset\n\nWe will illustrate today’s concepts using the penguins.xlsx dataset.\n\n\nUpload it to Google Colab and load it into Python using the following code:\n\npenguins_data = pd.read_excel(\"penguins.xlsx\")\n\n\n\n\n\n\n\n\nIn Google Colab, the file must be placed in the “content” folder."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section",
    "href": "T3_Categorical_Data/Categorical.slides.html#section",
    "title": "Categorical Variables",
    "section": "",
    "text": "We will focus on visualizing the following categorical variables: species, island y sex.\n\n(penguins_data\n  .filter(['species', 'island', 'sex'], axis = 1)\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nsex\n\n\n\n\n0\nAdelie\nTorgersen\nmale\n\n\n1\nAdelie\nTorgersen\nfemale\n\n\n2\nAdelie\nTorgersen\nfemale\n\n\n3\nAdelie\nTorgersen\nNaN\n\n\n4\nAdelie\nTorgersen\nfemale"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#ensuring-python-recognizes-categorical-variables",
    "href": "T3_Categorical_Data/Categorical.slides.html#ensuring-python-recognizes-categorical-variables",
    "title": "Categorical Variables",
    "section": "Ensuring Python recognizes categorical variables",
    "text": "Ensuring Python recognizes categorical variables\nAlthough the variables species, island and sex are clearly categorical, Python does not automatically recognize them as such.\nBy default, pandas interprets these variables as object types because they contain text.\n\nIn pandas, categorical variables should be explicitly converted to the category data type for efficient processing."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#defining-categorical-variables-in-python",
    "href": "T3_Categorical_Data/Categorical.slides.html#defining-categorical-variables-in-python",
    "title": "Categorical Variables",
    "section": "Defining categorical variables in Python",
    "text": "Defining categorical variables in Python\nTo ensure Python correctly recognizes these variables as categorical, we use the astype() function:\n\n\n# Convert categorical variables to 'category' type\npenguins_data[['species', 'island', 'sex']] = (penguins_data\n  .filter(['species', 'island', 'sex'], axis = 1)\n  .astype('category')\n)  \n\n\nNote that we have just replaced the penguins_data object with its new version."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-1",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-1",
    "title": "Categorical Variables",
    "section": "",
    "text": "Now, the variables are correctly labeled as categorical.\n\n(penguins_data\n  .filter(['species', 'island', 'sex'], axis = 1)\n  .info()\n)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 3 columns):\n #   Column   Non-Null Count  Dtype   \n---  ------   --------------  -----   \n 0   species  344 non-null    category\n 1   island   344 non-null    category\n 2   sex      333 non-null    category\ndtypes: category(3)\nmemory usage: 1.5 KB"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#summary-statistics-1",
    "href": "T3_Categorical_Data/Categorical.slides.html#summary-statistics-1",
    "title": "Categorical Variables",
    "section": "Summary statistics",
    "text": "Summary statistics\n\n\nA summary statistic helps us to summarize a list of observations in a simple way.\n\n\n\nThe most commonly used statistical summaries for categorical data are:\n\n\nThe frequency of a category is the number of observations that belong to that category.\nThe relative frequency is the frequency divided by the total number of observations."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#frequency-table",
    "href": "T3_Categorical_Data/Categorical.slides.html#frequency-table",
    "title": "Categorical Variables",
    "section": "Frequency table",
    "text": "Frequency table\nSummarizes a categorical variable by counting the values per category.\n\n\n\nEspecie\nFrecuencia\n\n\n\n\nAdelie\n152\n\n\nChinstrap\n68\n\n\nGentoo\n124\n\n\nTotal\n344\n\n\n\n\nFrequency: Number of observations in each category.\nTotal: Total sum of observations.\n\n\n\nVentajas de las frequencias.\nResumen claro y conciso de los datos categóricos.\nFacilita la identificación de patrones y tendencias.\nAyuda en la toma de decisiones informadas."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#frequency-table-in-python",
    "href": "T3_Categorical_Data/Categorical.slides.html#frequency-table-in-python",
    "title": "Categorical Variables",
    "section": "Frequency table in Python",
    "text": "Frequency table in Python\n\nTo construct a frequency table in pandas we use the function .value_counts() together with .filter().\n\n(penguins_data\n  .filter(['species'], axis = 1)\n  .value_counts()\n)  \n\nspecies  \nAdelie       152\nGentoo       124\nChinstrap     68\nName: count, dtype: int64"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#relative-frequency-table",
    "href": "T3_Categorical_Data/Categorical.slides.html#relative-frequency-table",
    "title": "Categorical Variables",
    "section": "Relative Frequency Table",
    "text": "Relative Frequency Table\nSummarizes a categorical variable by calculating the proportion of values per category.\n\n\n\n(penguins_data\n .filter(['species'], axis = 1)\n .value_counts(normalize = True)\n)\n\nspecies  \nAdelie       0.441860\nGentoo       0.360465\nChinstrap    0.197674\nName: proportion, dtype: float64\n\n\n\n\n\n\nSpecie\nRelative Frequency\n\n\n\n\nAdelie\n0.4418605\n\n\nChinstrap\n0.1976744\n\n\nGentoo\n0.3604651\n\n\nSuma\n1\n\n\n\n\n\nRelative frequency: Number of observations in each category divided by the total.\n\n\nLa ventaja de la frequencia relativa es que se puede interpretar como una probabilidad. Lo que da mas información."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#bar-chart-1",
    "href": "T3_Categorical_Data/Categorical.slides.html#bar-chart-1",
    "title": "Categorical Variables",
    "section": "Bar chart",
    "text": "Bar chart\n\n\nA bar chart visually represents a frequency or relative frequency table.\n\nThe frequency (or relative frequency) is represented by a bar with a proportional height.\nWe create the bar chart using the function countplot() from seaborn."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-2",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-2",
    "title": "Categorical Variables",
    "section": "",
    "text": "# Create plot.\nplt.figure(figsize=(8,6)) \nsns.countplot(data=penguins_data, x=\"species\")\nplt.show()"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#plot-for-relative-frequency",
    "href": "T3_Categorical_Data/Categorical.slides.html#plot-for-relative-frequency",
    "title": "Categorical Variables",
    "section": "Plot for relative frequency",
    "text": "Plot for relative frequency\nIf you want to plot relative frequencies, you can normalize the counts.\n\n# Create plot.\npenguin_counts = penguins_data[\"species\"].value_counts(normalize=True)\nplt.figure(figsize=(6, 3.3))\nsns.barplot(x=penguin_counts.index, y=penguin_counts.values)\nplt.ylabel(\"Relative Frequency\")\nplt.show()"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#example-improving-the-graph",
    "href": "T3_Categorical_Data/Categorical.slides.html#example-improving-the-graph",
    "title": "Categorical Variables",
    "section": "Example: Improving the graph",
    "text": "Example: Improving the graph\nUsing Seaborn’s customization tools, we enhance the graph:\n\nplt.figure(figsize=(6, 3.5))\nsns.barplot(x=penguin_counts.index, y=penguin_counts.values, color=\"pink\")\nplt.title(\"Penguin Proportions\")\nplt.xlabel(\"Species Type\")\nplt.ylabel(\"Relative Frequency\")\nplt.show()"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#pie-chart-1",
    "href": "T3_Categorical_Data/Categorical.slides.html#pie-chart-1",
    "title": "Categorical Variables",
    "section": "Pie chart",
    "text": "Pie chart\n\n\n\n\nA pie chart divides a circle into sections representing different categories of a variable.\nThe size of each section corresponds to the relative frequency of that category.\nIt provides a quick visual comparison of proportions.\n\n\n\n\n\n\nPie charts versus bar charts.\nBar charts can serve as a good way to show comparisons between categories. It is generally observed that new trends tend to shy away from using pie charts, as it is difficult for the human eye to judge the exact angle that shows the value of a category in a pie chart."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#mini-activity-solo-mode",
    "href": "T3_Categorical_Data/Categorical.slides.html#mini-activity-solo-mode",
    "title": "Categorical Variables",
    "section": "Mini-Activity (solo mode)",
    "text": "Mini-Activity (solo mode)\nAsk ChatGPT\n\nGo to https://chat.openai.com/\nAsk ChatGPT how to create a pie chart using matplotlib and seaborn in Python\nAdapt the code to create a pie chart for the island variable in penguin_data."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#apply-principle-3",
    "href": "T3_Categorical_Data/Categorical.slides.html#apply-principle-3",
    "title": "Categorical Variables",
    "section": "Apply Principle 3",
    "text": "Apply Principle 3\n\nApply graphic design principles.\n\n\nWe can improve categorical variable charts using these techniques:\n\n\nRe-label categories to make them more informative.\nRe-order categories to follow a logical sequence.\nCollapse categories to simplify the chart."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#example-2-boston-housing-dataset",
    "href": "T3_Categorical_Data/Categorical.slides.html#example-2-boston-housing-dataset",
    "title": "Categorical Variables",
    "section": "Example 2: Boston Housing Dataset",
    "text": "Example 2: Boston Housing Dataset\nThis dataset contains information collected by the U.S. Census Bureau on housing in the Boston, Massachusetts area."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-3",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-3",
    "title": "Categorical Variables",
    "section": "",
    "text": "The dataset is in Boston_dataset.xlsx. Upload it to Google Colab and load it into Python using:\n\nBoston_dataset = pd.read_excel(\"Boston_dataset.xlsx\")\nBoston_dataset.head()\n\n\n\n\n\n\n\n\ncrim\nzn\nindus\nchas\nnox\nrm\nage\ndis\nrad\ntax\nptratio\nblack\nlstat\nmedv\n\n\n\n\n0\n0.00632\n18.0\n2.31\n0\n0.538\n6.575\n65.2\n4.0900\nLow\n296\n15.3\n396.90\n4.98\n24.0\n\n\n1\n0.02731\n0.0\n7.07\n0\n0.469\n6.421\n78.9\n4.9671\nLow\n242\n17.8\n396.90\n9.14\n21.6\n\n\n2\n0.02729\n0.0\n7.07\n0\n0.469\n7.185\n61.1\n4.9671\nLow\n242\n17.8\n392.83\n4.03\n34.7\n\n\n3\n0.03237\n0.0\n2.18\n0\n0.458\n6.998\n45.8\n6.0622\nLow\n222\n18.7\n394.63\n2.94\n33.4\n\n\n4\n0.06905\n0.0\n2.18\n0\n0.458\n7.147\n54.2\n6.0622\nLow\n222\n18.7\n396.90\n5.33\n36.2"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-4",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-4",
    "title": "Categorical Variables",
    "section": "",
    "text": "We concentrate on the following variables:\n\nchas : Whether the house is next to the Charles River (1: Yes and 0: No)\nrad : Index of accessibility to radial highways (Low, Medium, High)."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#remember",
    "href": "T3_Categorical_Data/Categorical.slides.html#remember",
    "title": "Categorical Variables",
    "section": "Remember…",
    "text": "Remember…\nMake sure Python correctly recognizes categorical variables.\n\nBoston_dataset[[\"chas\", \"rad\"]] = (Boston_dataset\n .filter([\"chas\", \"rad\"], axis = 1)\n .astype(\"category\")\n )"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#initial-graph",
    "href": "T3_Categorical_Data/Categorical.slides.html#initial-graph",
    "title": "Categorical Variables",
    "section": "Initial graph",
    "text": "Initial graph\nLet’s create a bar chart for chas.\n\nplt.figure(figsize=(5, 5))\nsns.countplot(data=Boston_dataset, x=\"chas\")\nplt.show()\n\n\n\n\n\n\n\n\nHowever, the categories are not very informative."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#re-labeling-categories",
    "href": "T3_Categorical_Data/Categorical.slides.html#re-labeling-categories",
    "title": "Categorical Variables",
    "section": "Re-labeling categories",
    "text": "Re-labeling categories\nTo improve readability of the bar chart, rename the categories in the chas variable.\n\nCheck the category names in the variable using the unique() function.\n\n\nBoston_dataset[\"chas\"].unique()  \n\n[0, 1]\nCategories (2, int64): [0, 1]"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-5",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-5",
    "title": "Categorical Variables",
    "section": "",
    "text": "Replace the category names using .map().\n\n\nBoston_dataset[\"chas\"] = Boston_dataset[\"chas\"].map({0: \"No\", 1: \"Yes\"})"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#lets-see-what-happens-now.",
    "href": "T3_Categorical_Data/Categorical.slides.html#lets-see-what-happens-now.",
    "title": "Categorical Variables",
    "section": "Let’s see what happens now.",
    "text": "Let’s see what happens now.\n\nplt.figure(figsize=(6, 4))\nsns.countplot(data=Boston_dataset, x=\"chas\")\nplt.show()\n\n\n\n\n\n\n\n\nMuch better! 😃"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#re-ordering-categories",
    "href": "T3_Categorical_Data/Categorical.slides.html#re-ordering-categories",
    "title": "Categorical Variables",
    "section": "Re-ordering Categories",
    "text": "Re-ordering Categories\nNow, let’s create a bar chart for rad.\n\nplt.figure(figsize=(5, 5))\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nThe categories do not follow a natural order from left to right: Low, Medium, y High."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-6",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-6",
    "title": "Categorical Variables",
    "section": "",
    "text": "To have the desired order in the categories, we must be more explicit when defining te categorical variable.\n\nBoston_dataset[\"rad\"] = pd.Categorical(Boston_dataset[\"rad\"], \n                                      categories=[\"Low\", \"Medium\", \"High\"], \n                                      ordered=True)"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-7",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-7",
    "title": "Categorical Variables",
    "section": "",
    "text": "plt.figure(figsize=(7, 5))\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nMuch better! 😃"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#collapsing",
    "href": "T3_Categorical_Data/Categorical.slides.html#collapsing",
    "title": "Categorical Variables",
    "section": "Collapsing",
    "text": "Collapsing\n\nSome categorical variables tend to have many categories. For example, states in a country or postal codes. In these cases, it can be difficult to visualize all the categories in a single graph.\nOne strategy for developing an effective visualization is to collapse categories.\nFor example, in the variable rad, we can collapse the categories Medium and High into a single category called Other."
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-8",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-8",
    "title": "Categorical Variables",
    "section": "",
    "text": "To collapse categories in pandas, we use the replace() function.\n\nBoston_dataset[\"rad\"] = Boston_dataset[\"rad\"].replace({\"Medium\": \"Other\", \"High\": \"Other\"})\n\nBoston_dataset[\"rad\"].value_counts()\n\nrad\nOther    424\nLow       82\nName: count, dtype: int64"
  },
  {
    "objectID": "T3_Categorical_Data/Categorical.slides.html#section-9",
    "href": "T3_Categorical_Data/Categorical.slides.html#section-9",
    "title": "Categorical Variables",
    "section": "",
    "text": "Collapsing categories simplifies the graph\n\nplt.figure(figsize=(5.5, 3.5))\nsns.countplot(data=Boston_dataset, x=\"rad\")\nplt.show()\n\n\n\n\n\n\n\n\nIt also allows us to emphasize a category like Low and see how it compares to the other categories (as a whole)."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#agenda",
    "href": "T1_Introduction/Tools.slides.html#agenda",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Agenda",
    "text": "Agenda\n\n\nIntroduction to Python\nReading data with Python\nCreating our first plot"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#python",
    "href": "T1_Introduction/Tools.slides.html#python",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Python",
    "text": "Python\n\n\n\n\nA versatile programming language.\nIt is free!\nIt is widely used for data cleaning, data visualization, and data modelling.\nIt can be extended with packages (libraries) developed by other users."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#google-colab",
    "href": "T1_Introduction/Tools.slides.html#google-colab",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Google Colab",
    "text": "Google Colab\nGoogle’s free cloud collaboration platform for creating Python documents.\n\nRun Python and collaborate on Jupyter notebooks for free.\nHarness the power of GPUs for free to accelerate your data science projects.\nEasily save and upload your notebooks to Google Drive."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#lets-try-a-command-in-python",
    "href": "T1_Introduction/Tools.slides.html#lets-try-a-command-in-python",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Let’s try a command in Python",
    "text": "Let’s try a command in Python\nWhat do you think will happen if we run this command?\n\nprint(\"Hello world!\")\n\n\n\n\nHello world!"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#lets-try-another-command",
    "href": "T1_Introduction/Tools.slides.html#lets-try-another-command",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Let’s try another command",
    "text": "Let’s try another command\nWhat do you think will happen if we run this command?\n\nsum([1, 5, 10])\n\n\n\n\n16"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#use-python-as-a-basic-calculator",
    "href": "T1_Introduction/Tools.slides.html#use-python-as-a-basic-calculator",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Use Python as a basic calculator",
    "text": "Use Python as a basic calculator\n\n5 + 1\n\n6\n\n\n\n10 - 3\n\n7\n\n\n\n2 * 4\n\n8\n\n\n\n9 / 3\n\n3.0"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#comments",
    "href": "T1_Introduction/Tools.slides.html#comments",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Comments",
    "text": "Comments\n\nSometimes we write things in the coding window that we want Python to ignore. These are called comments and start with #.\n\nPython will ignore the comments and just execute the code.\n\n# you can put whatever after #\n# for example... blah blah blah\n\n\nSi desea escribir un comentario que ocupe más de una línea, es una buena idea poner un # al principio de cada línea."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#introduction-to-functions-in-python",
    "href": "T1_Introduction/Tools.slides.html#introduction-to-functions-in-python",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Introduction to functions in Python",
    "text": "Introduction to functions in Python\n\nOne of the cool things about Python is that there are many built-in commands you can use. These are called functions.\n\nFunctions have two basic parts:\n\n\nThe first part is the name of the function (for example, sum).\nThe second part is the input to the function, which goes inside the parentheses (sum([1, 5, 15]))."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#python-is-strict",
    "href": "T1_Introduction/Tools.slides.html#python-is-strict",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Python is strict",
    "text": "Python is strict\nPython, like all programming languages, is very strict. For example, if you write\n\nsum([1, 100])\n\n101\n\n\nit will tell you the answer, 101.\n\nBut if you write\n\nSum([1, 100])\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 1\n----&gt; 1 Sum([1, 100])\n\nNameError: name 'Sum' is not defined\n\n\n\nwith the “s” capitalized, he will act like he has no idea what we are talking about!\n\nlo mismo si olvidas incluir un parentesis"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#save-your-work-in-python-objects",
    "href": "T1_Introduction/Tools.slides.html#save-your-work-in-python-objects",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Save your work in Python objects",
    "text": "Save your work in Python objects\nVirtually anything, including the results of any Python function, can be saved in an object.\nThis is accomplished by using an assignment operator, which can be an equals symbol (=).\n\nYou can make up any name you want for a Python object. However, there are three basic rules for this:\n\n\nIt has to be different from a function name in Python.\nIt has to be specific possible yet succinct.\nIt must not have a period (.) in it."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#for-example",
    "href": "T1_Introduction/Tools.slides.html#for-example",
    "title": "Tools for Data Analysis and Visualization",
    "section": "For example",
    "text": "For example\n\n\n# This code will assign the number 18\n# to the object called my_favorite_number\n\nmy_favorite_number = 18\n\nAfter running this code, nothing happens. But if we run the object on its own, we can see what’s inside it.\n\nmy_favorite_number\n\n18\n\n\nYou can also use print(my_favorite_number)."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#lists",
    "href": "T1_Introduction/Tools.slides.html#lists",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Lists",
    "text": "Lists\n\nSo far we have used Python objects to store a single number. But in statistics we are dealing with variation, which by definition needs more than one number.\n\nA Python object can also store a complete set of numbers, called a list.\nYou can think of a list as a vector of numbers (or values).\n\n\nThe [] command can be used to combine several individual values into a list.\n\npuedes pensar que el c es por combinar"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#for-example-1",
    "href": "T1_Introduction/Tools.slides.html#for-example-1",
    "title": "Tools for Data Analysis and Visualization",
    "section": "For example",
    "text": "For example\n\nThis code creates two lists or vectors:\n\nmy_list = [1, 2, 3, 4, 5]\nmy_list_2 = [10, 10, 10, 10, 10]\n\n\nLet’s see their content:\n\nmy_list\n\n[1, 2, 3, 4, 5]\n\n\n\nmy_list_2\n\n[10, 10, 10, 10, 10]"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#operations",
    "href": "T1_Introduction/Tools.slides.html#operations",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Operations",
    "text": "Operations\n\nWe can do simple operations with vectors. For example, we can sum all the elements of a list.\n\nmy_list = [1, 2, 3, 4, 5]\nsum(my_list)\n\n15"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#indexing",
    "href": "T1_Introduction/Tools.slides.html#indexing",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Indexing",
    "text": "Indexing\n\nWe can index a position in the vector using square brackets with a number like this: [1].\nSo, if we wanted to print the contents of the first position in my_list, we could write\n\nmy_list[1]\n\n2\n\n\nAn feature of Python is that the first element of a list or vector is indexed using the number 0.\n\nmy_list[0]\n\n1"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#a-little-more-about-python-objects",
    "href": "T1_Introduction/Tools.slides.html#a-little-more-about-python-objects",
    "title": "Tools for Data Analysis and Visualization",
    "section": "A little more about Python objects",
    "text": "A little more about Python objects\n\nYou can think of Python objects as containers that hold values.\nA Python object can hold a single value, or it can hold a group of values (as in a vector).\nSo far, we’ve only put numbers into Python objects.\n\n\nPython objects can actually contain three types of values: numbers, characters, and booleans."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#character-values",
    "href": "T1_Introduction/Tools.slides.html#character-values",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Character values",
    "text": "Character values\n\nCharacters are made up of text, such as words or sentences. An example of a list with characters as elements is:\n\n\nmany_greetings = [\"hi\", \"hello\", \"hola\", \"bonjour\", \"ni hao\", \"merhaba\"]\nmany_greetings\n\n['hi', 'hello', 'hola', 'bonjour', 'ni hao', 'merhaba']\n\n\n\n\nIt is important to know that numbers can also be treated as characters, depending on the context.\nFor example, when 20 is enclosed in quotes (\"20\") it will be treated as a character value, even though it encloses a number in quotes."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#boolean-values",
    "href": "T1_Introduction/Tools.slides.html#boolean-values",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Boolean values",
    "text": "Boolean values\nBoolean values are True or False.\nWe may have a question like:\n\nIs the first element of the vector many_greetings \"hola\"?\n\n\nWe can ask Python to find out and return the answer True or False.\n\nmany_greetings[1] == \"hola\"\n\nFalse"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#logical-operators",
    "href": "T1_Introduction/Tools.slides.html#logical-operators",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Logical operators",
    "text": "Logical operators\n\nMost of the questions we ask Python to answer with True or False involve comparison operators like &gt;, &lt;, &gt;=, &lt;=, and ==.\nThe double == sign checks whether two values are equal. There is even a comparison operator to check whether values are not equal: !=.\nFor example, 5 != 3 is a True statement."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#common-logical-operators",
    "href": "T1_Introduction/Tools.slides.html#common-logical-operators",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Common logical operators",
    "text": "Common logical operators\n\n\n&gt; (larger than)\n&gt;= (larger than or equal to)\n&lt; (smaller than)\n&lt;= (smaller than or equal to)\n== (equal to)\n!= (not equal to)"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#question",
    "href": "T1_Introduction/Tools.slides.html#question",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Question",
    "text": "Question\n\nRead this code and predict its response. Then, run the code in Google Colab and validate if you were correct.\n\nA = 1\nB = 5\ncompare = A &gt; B\ncompare"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#programming-culture-trial-and-error",
    "href": "T1_Introduction/Tools.slides.html#programming-culture-trial-and-error",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Programming culture: Trial and error",
    "text": "Programming culture: Trial and error\n\nThe best way to learn programming is to try things out and see what happens. Write some code, run it, and think about why it didn’t work.\nThere are many ways to make small mistakes in programming (for example, typing a capital letter when a lowercase letter is needed).\nWe often have to find these mistakes through trial and error."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#python-libraries",
    "href": "T1_Introduction/Tools.slides.html#python-libraries",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Python libraries",
    "text": "Python libraries\n\nLibraries are the fundamental units of reproducible Python code. They include reusable Python functions, documentation describing how to use them, and sample data.\nIn this course, we will be working mostly with the following libraries:\n\npandas for data manipulation.\nmatplotlib and seaborn for data visualization.\nstatsmodels for data modelling."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#data-organization",
    "href": "T1_Introduction/Tools.slides.html#data-organization",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Data organization",
    "text": "Data organization\nIn data science, we organize data into rows and columns.\n\n    Condition  Age   Wt    Wt2\n1  Uninformed   35  136  135.8\n2  Uninformed   45  162  161.8\n3    Informed   52  117  116.8\n4    Informed   29  184  182.8\n5  Uninformed   38  134  136.6\n6    Informed   39  189  183.2\n\n\nThe rows are the sampled cases. In this example, the rows are housekeepers from different hotels. There are six rows, so there are six housekeepers in this data set.\n\n\nDepending on the study, the rows could be people, states, couples, mice—any case you’re taking a sample from to study."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section",
    "href": "T1_Introduction/Tools.slides.html#section",
    "title": "Tools for Data Analysis and Visualization",
    "section": "",
    "text": "The columns represent variables or attributes of each case that were measured.\n\n    Condition  Age   Wt    Wt2\n1  Uninformed   35  136  135.8\n2  Uninformed   45  162  161.8\n3    Informed   52  117  116.8\n4    Informed   29  184  182.8\n5  Uninformed   38  134  136.6\n6    Informed   39  189  183.2\n\n\n\nIn this study, housekeepers were either informed or not that their daily work of cleaning hotel rooms was equivalent to getting adequate exercise for good health.\n\n\n\nSo one of the variables, Condition, indicates whether they were informed of this fact or not."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section-1",
    "href": "T1_Introduction/Tools.slides.html#section-1",
    "title": "Tools for Data Analysis and Visualization",
    "section": "",
    "text": "Other variables include the age of the housekeeper (Age), her weight before starting the study (Wt), and her weight at the end of the study (Wt2), measured four weeks later.\n\nTherefore, the values in each row represent the values of that particular case in each of the variables measured.\n    Condition  Age   Wt    Wt2\n1  Uninformed   35  136  135.8\n2  Uninformed   45  162  161.8\n3    Informed   52  117  116.8\n4    Informed   29  184  182.8\n5  Uninformed   38  134  136.6\n6    Informed   39  189  183.2\n\n¿Cuántas variables hay en este conjunto de datos?"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#loading-data-in-python",
    "href": "T1_Introduction/Tools.slides.html#loading-data-in-python",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Loading data in Python",
    "text": "Loading data in Python\nIn this course, we will assume that data is stored in an Excel file with the above organization. As an example, let’s use the file penguins.xlsx.\n\n\n\n\n\n\n\nThe file must be previously uploaded to Google Colab."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section-2",
    "href": "T1_Introduction/Tools.slides.html#section-2",
    "title": "Tools for Data Analysis and Visualization",
    "section": "",
    "text": "The dataset penguins.xlsx contains data from penguins living in three islands."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#alan-vazquez-with-a-gentoo-penguin",
    "href": "T1_Introduction/Tools.slides.html#alan-vazquez-with-a-gentoo-penguin",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Alan Vazquez with a gentoo penguin",
    "text": "Alan Vazquez with a gentoo penguin"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#pandas-library",
    "href": "T1_Introduction/Tools.slides.html#pandas-library",
    "title": "Tools for Data Analysis and Visualization",
    "section": "pandas library",
    "text": "pandas library\n\n\n\n\n\n\n\n\n\n\npandas is an open-source Python library for data manipulation and analysis.\nIt is built on top of numpy for high-performance data operations.\nIt allows the user to import, clean, transform, and analyze data efficiently\nhttps://pandas.pydata.org/"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#importing-pandas",
    "href": "T1_Introduction/Tools.slides.html#importing-pandas",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Importing pandas",
    "text": "Importing pandas\nFortunately, the pandas library is already pre-installed in Google Colab.\n\nHowever, we need to inform Google Colab that we want to use pandas and its functions using the following command:\n\nimport pandas as pd\n\n\nThe command as pd allows us to have a short name for pandas. To use a function of pandas, we use the command pd.function()."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#loading-data-using-pandas",
    "href": "T1_Introduction/Tools.slides.html#loading-data-using-pandas",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Loading data using pandas",
    "text": "Loading data using pandas\n\nThe following code shows how to read the data in the file “penguins.xlsx” into Python.\n\n# Load the Excel file into a pandas DataFrame.\npenguins_data = pd.read_excel(\"penguins.xlsx\")"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#the-function-head",
    "href": "T1_Introduction/Tools.slides.html#the-function-head",
    "title": "Tools for Data Analysis and Visualization",
    "section": "The function head()",
    "text": "The function head()\nThe function head() allows you to print the first rows of a pandas data frame.\n\n# Print the first 4 rows of the dataset.\npenguins_data.head(4)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#indexing-variables-a-dataset",
    "href": "T1_Introduction/Tools.slides.html#indexing-variables-a-dataset",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Indexing variables a dataset",
    "text": "Indexing variables a dataset\nWe can select a specific variables of a data frame using the syntaxis below.\n\npenguins_data['bill_length_mm']\n\n0      39.1\n1      39.5\n2      40.3\n3       NaN\n4      36.7\n       ... \n339    55.8\n340    43.5\n341    49.6\n342    50.8\n343    50.2\nName: bill_length_mm, Length: 344, dtype: float64\n\n\nHere, we selected the variable bill_length_mm in the penguins_data dataset."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section-3",
    "href": "T1_Introduction/Tools.slides.html#section-3",
    "title": "Tools for Data Analysis and Visualization",
    "section": "",
    "text": "To index multiple variables of a data frame, we put the names of the variables in a list object. For example, we select bill_length_mm, species, and island as follows:\n\nsub_penguins_data = penguins_data[ ['bill_length_mm',  'species', 'island'] ]\nsub_penguins_data.head()\n\n\n\n\n\n\n\n\nbill_length_mm\nspecies\nisland\n\n\n\n\n0\n39.1\nAdelie\nTorgersen\n\n\n1\n39.5\nAdelie\nTorgersen\n\n\n2\n40.3\nAdelie\nTorgersen\n\n\n3\nNaN\nAdelie\nTorgersen\n\n\n4\n36.7\nAdelie\nTorgersen"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#indexing-rows",
    "href": "T1_Introduction/Tools.slides.html#indexing-rows",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Indexing rows",
    "text": "Indexing rows\nTo index rows in a dataset, we use the argument loc from pandas. For example, we select the rows 3 to 6 of the penguins_dataset dataset:\n\nrows_penguins_data = penguins_data.loc[2:5]\nrows_penguins_data\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#section-4",
    "href": "T1_Introduction/Tools.slides.html#section-4",
    "title": "Tools for Data Analysis and Visualization",
    "section": "",
    "text": "rows_penguins_data\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n\n\n\n\n\nNote that the index 2 and 5 refer to observations 3 and 7, respectively, in the dataset. This is because the first index in Python is 0."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#indexing-rows-and-columns",
    "href": "T1_Introduction/Tools.slides.html#indexing-rows-and-columns",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Indexing rows and columns",
    "text": "Indexing rows and columns\nUsing loc, we can also retrieve a subset from the dataset by selecting specific columns and rows.\n\nsub_rows_pdata = penguins_data.loc[2:5, ['bill_length_mm',  'species', 'island'] ]\nsub_rows_pdata\n\n\n\n\n\n\n\n\nbill_length_mm\nspecies\nisland\n\n\n\n\n2\n40.3\nAdelie\nTorgersen\n\n\n3\nNaN\nAdelie\nTorgersen\n\n\n4\n36.7\nAdelie\nTorgersen\n\n\n5\n39.3\nAdelie\nTorgersen"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#matplotlib-library",
    "href": "T1_Introduction/Tools.slides.html#matplotlib-library",
    "title": "Tools for Data Analysis and Visualization",
    "section": "matplotlib library",
    "text": "matplotlib library\n\nmatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python\nIt is widely used in the data science community for plotting data in various formats\nIdeal for creating simple visualizations like line plots, bar charts, scatter plots, and more\nhttps://matplotlib.org/"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#seaborn-library",
    "href": "T1_Introduction/Tools.slides.html#seaborn-library",
    "title": "Tools for Data Analysis and Visualization",
    "section": "seaborn library",
    "text": "seaborn library\n\nseaborn is a Python library built on top of Matplotlib\nDesigned to make statistical data visualization easy and beautiful\nIdeal for creating informative and attractive visualizations with minimal code\nhttps://seaborn.pydata.org/index.html"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#importing-the-libraries",
    "href": "T1_Introduction/Tools.slides.html#importing-the-libraries",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Importing the libraries",
    "text": "Importing the libraries\n\nThe matplotlib and seaborn libraries are pre-installed in Google Colab. However, we need to tell Google Colab that we want to use them using the following command:\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nLike pandas, the command as sns allows us to have a short name for seaborn. Similarly, we rename matplotlib as plt."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#seaborn-plot-structure",
    "href": "T1_Introduction/Tools.slides.html#seaborn-plot-structure",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Seaborn plot structure",
    "text": "Seaborn plot structure\nSeaborn has a structured approach to creating visualizations:\nplt.figure(figsize=(WIDTH, HEIGHT))\nsns.PLOTTYPE(data=my_data, x=“Variable1”, y=“Variable2”, hue=“Variable3”, MOREOPTIONS)\nplt.title(“Title”)\nplt.xlabel(“X-axis label”)\nplt.ylabel(“Y-axis label”)\nplt.MOREOPTIONS()\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#example-principle-1",
    "href": "T1_Introduction/Tools.slides.html#example-principle-1",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Example: Principle 1",
    "text": "Example: Principle 1\nIs there a difference between bill length and bill depth across penguin species?"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#apply-principle-2",
    "href": "T1_Introduction/Tools.slides.html#apply-principle-2",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Apply Principle 2",
    "text": "Apply Principle 2\nIs there a difference between bill length and bill depth across penguin species?\n\nplt.figure(figsize=(6, 4)) # Set figure size.\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \n                hue=\"species\") # Define type of plot.\nplt.show() # Display the plot."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#principle-2-adding-titles-and-labels",
    "href": "T1_Introduction/Tools.slides.html#principle-2-adding-titles-and-labels",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Principle 2: Adding titles and labels",
    "text": "Principle 2: Adding titles and labels\n\nplt.figure(figsize=(6, 4))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \n                hue=\"species\")\nplt.title(\"Bill Depth vs. Bill Length\")\nplt.xlabel(\"Bill Depth (mm)\")\nplt.ylabel(\"Bill Length (mm)\")\nplt.legend(title=\"Species\")\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#changing-theme",
    "href": "T1_Introduction/Tools.slides.html#changing-theme",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Changing theme",
    "text": "Changing theme\n\nplt.figure(figsize=(6, 4))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \n                hue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\")\nplt.xlabel(\"Bill Depth (mm)\")\nplt.ylabel(\"Bill Length (mm)\")\nplt.legend(title=\"Species\")\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#more-options",
    "href": "T1_Introduction/Tools.slides.html#more-options",
    "title": "Tools for Data Analysis and Visualization",
    "section": "More options",
    "text": "More options\n\nWe can also use the argument fontsize and other functions to improve the aspect of the figure:\n\nplt.title(fontsize): Font size of the title.\nplt.ylabel(fontsize): Font size of y axis title.\nplt.xlabel(fontsize): Font size of x axis title.\nplt.yticks(fontsize): Font size of the y axis labels.\nplt.xticks(fontsize): Font size of the x axis labels."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#applying-principle-3",
    "href": "T1_Introduction/Tools.slides.html#applying-principle-3",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Applying Principle 3",
    "text": "Applying Principle 3\n\n\nCode\nplt.figure(figsize=(7, 5))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \n                hue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\", fontsize = 12)\nplt.xlabel(\"Bill Depth (mm)\", fontsize = 12)\nplt.ylabel(\"Bill Length (mm)\", fontsize = 12)\nplt.legend(title=\"Species\", fontsize = 12)\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#saving-plots",
    "href": "T1_Introduction/Tools.slides.html#saving-plots",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Saving plots",
    "text": "Saving plots\n\nWe save a figure using the save.fig function from matplotlib. The dpi argument of this function sets the resolution of the image. The higher the dpi, the better the resolution.\n\nplt.figure(figsize=(5, 5))\nsns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\", \n                hue=\"species\", palette=\"viridis\")\nplt.title(\"Bill Depth vs. Bill Length\", fontsize = 12)\nplt.xlabel(\"Bill Depth (mm)\", fontsize = 12)\nplt.ylabel(\"Bill Length (mm)\", fontsize = 12)\nplt.legend(title=\"Species\", fontsize = 12)\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.savefig('scatter_plot.png',dpi=300) # Save figure."
  },
  {
    "objectID": "T1_Introduction/Tools.slides.html#mini-activity-solo-mode",
    "href": "T1_Introduction/Tools.slides.html#mini-activity-solo-mode",
    "title": "Tools for Data Analysis and Visualization",
    "section": "Mini-activity (solo mode)",
    "text": "Mini-activity (solo mode)\n\nOpen the following Google Colab link:\nhttps://colab.research.google.com/drive/1xLoaOMharQmmasNApjm38jZcw-gtcxvm?usp=sharing\nCopy the notebook to your drive.\nAnswer the questions."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#agenda",
    "href": "T4_Numerical_Data/Numerical.slides.html#agenda",
    "title": "Numerical Variables",
    "section": "Agenda",
    "text": "Agenda\n\nIntroduction to the example\nSummary statistics\nGraphs for numerical variables"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#example",
    "href": "T4_Numerical_Data/Numerical.slides.html#example",
    "title": "Numerical Variables",
    "section": "Example",
    "text": "Example\n\n\nA piston is a mechanical device found in most engines.\n\n\n\nOne measure of a piston’s performance is the time it takes to complete a cycle, which we call “cycle time” and is measured in seconds.\nThe file “CYLT.xlsx” contains 50 cycle times of a piston operating under fixed conditions."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#remember-to-import-the-required-libraries",
    "href": "T4_Numerical_Data/Numerical.slides.html#remember-to-import-the-required-libraries",
    "title": "Numerical Variables",
    "section": "Remember to import the required libraries",
    "text": "Remember to import the required libraries\nWe will use the libraries pandas, matplotlib, and seaborn.\nLet’s load them in Google Colab before we start.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#load-the-data",
    "href": "T4_Numerical_Data/Numerical.slides.html#load-the-data",
    "title": "Numerical Variables",
    "section": "Load the data",
    "text": "Load the data\nIn Google Colab, the file “CYLT.xlsx” should be placed in a folder called “Files”.\n\npiston_data = pd.read_excel(\"CYCLT.xlsx\")\npiston_data.head()\n\n\n\n\n\n\n\n\ncycle_time\n\n\n\n\n0\n1.008\n\n\n1\n1.098\n\n\n2\n1.120\n\n\n3\n0.423\n\n\n4\n1.021"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#variable-type",
    "href": "T4_Numerical_Data/Numerical.slides.html#variable-type",
    "title": "Numerical Variables",
    "section": "Variable Type",
    "text": "Variable Type\n\nIn Python, numerical data is stored as float64.\n\npiston_data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50 entries, 0 to 49\nData columns (total 1 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   cycle_time  50 non-null     float64\ndtypes: float64(1)\nmemory usage: 528.0 bytes\n\n\nWe can see that Python recognizes our data correctly."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#summary-statistic",
    "href": "T4_Numerical_Data/Numerical.slides.html#summary-statistic",
    "title": "Numerical Variables",
    "section": "Summary statistic",
    "text": "Summary statistic\n\nHelps us to summarize a list of observations in a simple way.\n\nFor numerical data, the most popular summary statistics are:\n\n\nMean\nVariance and sample standard deviation\nQuartiles\nMaximum and minimum"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#mean",
    "href": "T4_Numerical_Data/Numerical.slides.html#mean",
    "title": "Numerical Variables",
    "section": "Mean",
    "text": "Mean\n\nIndicates the center of the data.\n\nLet \\(y_1, y_2, \\ldots, y_n\\) be an observed sample of size \\(n\\).\nThe mean is\n\\[\\bar{y} = \\frac{1}{n}\\sum_{i=1}^{n} y_i = \\frac{y_1 + y_2 + \\cdots + y_n}{n}.\\]"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section",
    "href": "T4_Numerical_Data/Numerical.slides.html#section",
    "title": "Numerical Variables",
    "section": "",
    "text": "In Python, we calculate the mean using the function mean().\n\n(piston_data\n .agg(\"mean\")\n)\n\ncycle_time    0.65246\ndtype: float64\n\n\n\nWe use the function print to show the number. Otherwise, python will show the computer type of value stored in piston_data_mean."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-1",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-1",
    "title": "Numerical Variables",
    "section": "",
    "text": "You can also round the result to, say, two decimals.\n\npiston_data_mean = (piston_data\n .agg(\"mean\")\n)\nprint( round(piston_data_mean, 2) )\n\ncycle_time    0.65\ndtype: float64\n\n\n\nInterpretation: On average, the piston takes 0.652 seconds to complete a cycle."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#variance",
    "href": "T4_Numerical_Data/Numerical.slides.html#variance",
    "title": "Numerical Variables",
    "section": "Variance",
    "text": "Variance\n\nIndicates how spread out the data are around the mean.\n\nLet \\(y_1, y_2, \\ldots, y_n\\) be an observed sample of size \\(n\\). The variance is\n\\[\ns^2 = \\frac{1}{n-1} \\sum_{i=1}^{n} (y_i - \\bar{y})^2 = \\frac{(y_1 - \\bar{y})^2  + \\cdots + (y_n - \\bar{y})^2}{n-1}\n\\]\n\nThe variance is like an average of the squared differences between each observation and the mean."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-2",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-2",
    "title": "Numerical Variables",
    "section": "",
    "text": "In python, the variance is calculated using the function var().\n\n(piston_data\n .agg(\"var\")\n)\n\ncycle_time    0.139107\ndtype: float64\n\n\n\nInterpretation: The variance of the piston cycle times is 0.139. A larger variance means greater dispersion of the data around the mean."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#standard-deviation",
    "href": "T4_Numerical_Data/Numerical.slides.html#standard-deviation",
    "title": "Numerical Variables",
    "section": "Standard deviation",
    "text": "Standard deviation\nA drawback of the variance is that it is not on the same scale as the actual observations.\nTo obtain a measure of spread whose units are the same as those of the sample, we simply take the squared root of the variance\n\\[\ns = \\left(\\frac{1}{n-1} \\sum_{i=1}^{n} (y_i - \\bar{y})^2 \\right)^{1/2}\n\\]\nThis quantity is known as the standard deviation. It is in the same units as the observations."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-3",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-3",
    "title": "Numerical Variables",
    "section": "",
    "text": "In python, the standard deviation is calculated using the function std().\n\n(piston_data\n .agg(\"std\")\n)\n\ncycle_time    0.372971\ndtype: float64\n\n\n\nInterpretation: On average, a piston takes 0.652 seconds to complete a cycle, with a variation of \\(\\pm 0.373\\) seconds."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#quartiles",
    "href": "T4_Numerical_Data/Numerical.slides.html#quartiles",
    "title": "Numerical Variables",
    "section": "Quartiles",
    "text": "Quartiles\nThe sample median is the middle number of the ordered data values.\n\nSample quartiles divide the data as nearly as possible into quarters:\n\n\nFirst quartile (\\(Q_1\\)) is the median of the lower half of the data.\nSecond quartile (\\(Q_2\\)) is the median of the data.\nThird quartile (\\(Q_3\\)) is the median of the upper half of the data."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-4",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-4",
    "title": "Numerical Variables",
    "section": "",
    "text": "The generalization of quartiles are percentiles or quantiles."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-5",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-5",
    "title": "Numerical Variables",
    "section": "",
    "text": "In python, the quartiles are calculated using the function quantile().\n\n\n\n# Set the quantiles.\nset_quantiles = [0.25, 0.5, 0.75]\n# Compute the quantiles.\n(piston_data\n .agg(\"quantile\", q = set_quantiles)\n)\n\n\n\n\n\n\n\n\ncycle_time\n\n\n\n\n0.25\n0.3050\n\n\n0.50\n0.5455\n\n\n0.75\n1.0690\n\n\n\n\n\n\n\n\nInterpretation:\n\n25% of cycle times are below 0.305 sec.\n50% of cycle times are below 0.546 sec.\n75% of cycle times are below 1.07 sec."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#maximum-and-minimum",
    "href": "T4_Numerical_Data/Numerical.slides.html#maximum-and-minimum",
    "title": "Numerical Variables",
    "section": "Maximum and minimum",
    "text": "Maximum and minimum\nWe compute the maximum and minimum using the functions max() and min(), respectively.\n\n(piston_data\n .agg(\"max\")\n)\n\ncycle_time    1.141\ndtype: float64\n\n\nInterpretation: The maximum cycle time is 1.14 seconds.\n\n(piston_data\n .agg(\"min\")\n)\n\ncycle_time    0.175\ndtype: float64\n\n\nInterpretation: The minimum cycle time is 0.175 seconds."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#average-vs.-median",
    "href": "T4_Numerical_Data/Numerical.slides.html#average-vs.-median",
    "title": "Numerical Variables",
    "section": "Average vs. Median",
    "text": "Average vs. Median\n\nThe average and median estimate the central value of the data in different ways.\n\nThe average is the sum of the values divided by the total.\nThe median is the central value of an ordered set of data."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#when-do-we-use-the-average",
    "href": "T4_Numerical_Data/Numerical.slides.html#when-do-we-use-the-average",
    "title": "Numerical Variables",
    "section": "When do we use the average?",
    "text": "When do we use the average?\n\nThe average is used when the data is symmetrically or evenly distributed and there are no significant outliers.\nFor example, the height of a large sample of people in a homogeneous population."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#when-do-we-use-the-median",
    "href": "T4_Numerical_Data/Numerical.slides.html#when-do-we-use-the-median",
    "title": "Numerical Variables",
    "section": "When do we use the median?",
    "text": "When do we use the median?\n\nThe median is used when there are outliers that could skew the mean.\nFor example:\n\nAnnual household income in a country (where there are a few billionaires who distort the mean).\nHouse prices in a city (where a few very expensive properties can inflate the mean)."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#activity-only-mode-part-1",
    "href": "T4_Numerical_Data/Numerical.slides.html#activity-only-mode-part-1",
    "title": "Numerical Variables",
    "section": "Activity (only mode) Part 1",
    "text": "Activity (only mode) Part 1\nA company that manufactures capacitor retaining bolts for automobile engines implemented a quality control system. As part of this quality control system, a team of engineers decided to record the number of nonconforming bolts produced each shift.\nThe file bolts.xlsx contains the number of non-conforming bolts during the last 45 shifts.\n\nCalculates and interprets the average, variance, standard deviation, quartiles, minimum and maximum."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#principle-1",
    "href": "T4_Numerical_Data/Numerical.slides.html#principle-1",
    "title": "Numerical Variables",
    "section": "Principle 1",
    "text": "Principle 1\n\nFormulate the question of interest.\n\n\nTypical questions about a numeric variable \\(X\\) are:\n\n\nWhat is the shape of the observations of the variable \\(X\\)?\nAre there unusual or atypical observations in the variable \\(X\\)?\nDoes the shape of the observations of the variable \\(X\\) resemble a bell?"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#principle-2",
    "href": "T4_Numerical_Data/Numerical.slides.html#principle-2",
    "title": "Numerical Variables",
    "section": "Principle 2",
    "text": "Principle 2\n\nTransform data into information.\n\n\nTwo common types of graphs to visualize a numerical variable are:\n\nHistogram.\nBox plot.\n\n\n\nBasically, they are different ways of visualizing the “shape” or distribution of the variable."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#histogram",
    "href": "T4_Numerical_Data/Numerical.slides.html#histogram",
    "title": "Numerical Variables",
    "section": "Histogram",
    "text": "Histogram\nVisualizes the distribution of observations, indicating regions where observations are concentrated or sparse.\n\nIt is built using a frequency table.\n\nDefine a maximum number of intervals or bins (from 5 to 30).\nDefine the ranges of the intervals.\nGroup the observations in the interval to which they belong.\n\n\n\nPython automatically calculates the frequency table for numerical data. The histogram is a visualization of this table."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-6",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-6",
    "title": "Numerical Variables",
    "section": "",
    "text": "To create a histogram, we use the function histplot() from seabron.\n\nplt.figure(figsize=(10, 4))\nsns.histplot(data = piston_data, x = \"cycle_time\")\nplt.show() \n\n\n\n\n\n\n\n\n\nThe bars of the histogram touch each other. A gap indicates that there are no observations in that interval."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#improving-the-graph",
    "href": "T4_Numerical_Data/Numerical.slides.html#improving-the-graph",
    "title": "Numerical Variables",
    "section": "Improving the graph",
    "text": "Improving the graph\nTo convey a better message, we apply Principle 3: Apply the principles of graphic design.\n\n\nCode\nplt.figure(figsize=(10, 4))\nsns.histplot(data = piston_data, x = \"cycle_time\", edgecolor = \"black\", \n             color = \"pink\")\nplt.title(\"Histogram of Cycle Time: Data from 50 pistons\")\nplt.xlabel(\"Cycle Time (seconds)\")\nplt.ylabel(\"Frequency\")\nplt.show()"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#it-is-not-the-same-as-a-bar-chart",
    "href": "T4_Numerical_Data/Numerical.slides.html#it-is-not-the-same-as-a-bar-chart",
    "title": "Numerical Variables",
    "section": "It is not the same as a bar chart",
    "text": "It is not the same as a bar chart\n\nWith categorical data, a bar chart looks similar to a histogram because it displays the frequency of categories.\nHowever, we cannot interpret the shape of a bar chart in the same way as a histogram.\n\nThe frequency of a category is represented by the height of the bar, and the width does not contain any information.\nA bar chart will not highlight outliers.\n\n\nTails and symmetry do not make sense in this setting."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#number-of-bins",
    "href": "T4_Numerical_Data/Numerical.slides.html#number-of-bins",
    "title": "Numerical Variables",
    "section": "Number of bins",
    "text": "Number of bins\n\nThe number of bins is a parameter of the histogram that affects its appearance.\n\nThis is set using the argument bins in histplot().\n\nplt.figure(figsize=(5, 3))\nsns.histplot(data = piston_data, x = \"cycle_time\", bins = 5)\nplt.show()"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-7",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-7",
    "title": "Numerical Variables",
    "section": "",
    "text": "The left histogram uses bins = 5, and the right histogram uses bins = 30\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this course, we will use the default number of bins.\n\nA histogram is a familiar type of plot that involves smoothing. A histogram aggregates data values by placing points into bins and plotting one bar for each bin. Smoothing here means that we cannot differentiate the location of individual points within a bin: the points are smoothly distributed across their bins."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#what-to-look-for-in-a-histogram",
    "href": "T4_Numerical_Data/Numerical.slides.html#what-to-look-for-in-a-histogram",
    "title": "Numerical Variables",
    "section": "What to look for in a histogram?",
    "text": "What to look for in a histogram?\n\n\nSymmetry and asymmetry of the distribution\nThe number, location, and size of high-frequency regions (bins)\nGaps where no values are observed\nUnusually large or anomalous values\nA bell-shaped form"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#the-obsession-with-bell-curves",
    "href": "T4_Numerical_Data/Numerical.slides.html#the-obsession-with-bell-curves",
    "title": "Numerical Variables",
    "section": "The obsession with bell curves",
    "text": "The obsession with bell curves\n\n\n\nThe normal distribution is a very important probability distribution in statistics.\n\n\n\nIt is characterized by a symmetric bell-shaped curve centered around its mean, with the highest probability density at the mean and decreasing symmetrically towards the extremes"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-8",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-8",
    "title": "Numerical Variables",
    "section": "",
    "text": "Basically, if your observations follow a normal distribution, you can use statistical methods to draw conclusions based on mathematical theory.\n\n\n\n\n\nWhat many people don’t know is that this condition is only needed if you have few observations (less than 50)."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#boxplot",
    "href": "T4_Numerical_Data/Numerical.slides.html#boxplot",
    "title": "Numerical Variables",
    "section": "Boxplot",
    "text": "Boxplot\nA boxplot helps us visualize the distribution of observations using quartiles.\n\n\nIt is very effective for detecting “outliers.”\n\n\n\nAn important component of the boxplot is the interquartile range (IQR), which is the difference between the third quartile and the first quartile (\\(Q_3 - Q_1\\)).\n\n\nThe interquartile range is the distance needed to encompass the middle half of the data."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#anatomy-of-a-box-plot",
    "href": "T4_Numerical_Data/Numerical.slides.html#anatomy-of-a-box-plot",
    "title": "Numerical Variables",
    "section": "Anatomy of a Box Plot",
    "text": "Anatomy of a Box Plot\n\nLearn more in that league https://towardsdatascience.com/why-1-5-in-iqr-method-of-outlier-detection-5d07fdc82097"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#outliers",
    "href": "T4_Numerical_Data/Numerical.slides.html#outliers",
    "title": "Numerical Variables",
    "section": "Outliers",
    "text": "Outliers\n\n\nOutliers are points that are much larger or smaller than the rest of the sample points.\nOutliers may be data entry errors or they may be points that really are different from the rest.\nOutliers should not be deleted without considerable thought—sometimes calculations and analyses will be done with and without outliers and then compared."
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#boxplot-in-python",
    "href": "T4_Numerical_Data/Numerical.slides.html#boxplot-in-python",
    "title": "Numerical Variables",
    "section": "Boxplot in Python",
    "text": "Boxplot in Python\n\nTo create a boxplot in seaborn, use the boxplot() function.\n\nplt.figure(figsize=(5, 4))\nsns.boxplot(piston_data, y = \"cycle_time\")\nplt.show()"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#section-9",
    "href": "T4_Numerical_Data/Numerical.slides.html#section-9",
    "title": "Numerical Variables",
    "section": "",
    "text": "If we specify the variable in the x argument, we get a horizontal boxplot.\n\nplt.figure(figsize=(5, 4))\nsns.boxplot(piston_data, x = \"cycle_time\")\nplt.show()"
  },
  {
    "objectID": "T4_Numerical_Data/Numerical.slides.html#activity-solo-mode-part-2",
    "href": "T4_Numerical_Data/Numerical.slides.html#activity-solo-mode-part-2",
    "title": "Numerical Variables",
    "section": "Activity (solo mode) Part 2",
    "text": "Activity (solo mode) Part 2\n\nThe file bolts.xlsx contains the number of non-conforming bolts during the last 45 shifts. Using Python, create the following graphs\n\nHistogram\nBoxplot"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IN2039 Data Visualization for Decision Making",
    "section": "",
    "text": "Course topics\n\nIntroduction (slides)\nTools (slides) (colab)\nTypes of variables (slides) (colab) (pandas cheat sheet)\nCategorical variables (slides) (colab)\nNumerical variables (slides) (colab)\nMultivariate data (slides) (colab)\nSimple linear regression (slides) (colab)\n\n\n\nAbout the author\nAlan R. Vazquez (website) is a Research Professor at the Department of Industrial Engineering at Tecnologico de Monterrey, Monterrey campus.\n\n\nLicense\n\nIN2039 Data Visualization for Decision Making by Alan R. Vazquez is licensed under CC BY-NC-SA 4.0"
  },
  {
    "objectID": "index.slides.html#course-topics",
    "href": "index.slides.html#course-topics",
    "title": "IN2039 Data Visualization for Decision Making",
    "section": "Course topics",
    "text": "Course topics\n\nIntroduction (slides)\nTools (slides) (colab)\nTypes of variables (slides) (colab) (pandas cheat sheet)\nCategorical variables (slides) (colab)\nNumerical variables (slides) (colab)\nMultivariate data (slides) (colab)\nSimple linear regression (slides) (colab)"
  },
  {
    "objectID": "index.slides.html#about-the-author",
    "href": "index.slides.html#about-the-author",
    "title": "IN2039 Data Visualization for Decision Making",
    "section": "About the author",
    "text": "About the author\nAlan R. Vazquez (website) is a Research Professor at the Department of Industrial Engineering at Tecnologico de Monterrey, Monterrey campus."
  },
  {
    "objectID": "index.slides.html#license",
    "href": "index.slides.html#license",
    "title": "IN2039 Data Visualization for Decision Making",
    "section": "License",
    "text": "License\n\nIN2039 Data Visualization for Decision Making by Alan R. Vazquez is licensed under CC BY-NC-SA 4.0\n\n\n\n\n\nTecnologico de Monterrey"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#agenda",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#agenda",
    "title": "Introduction to Linear Regression",
    "section": "Agenda",
    "text": "Agenda\n\nIntroduction\nRelationship between two numerical variables\nSimple linear regression\nLocal regression"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#loading-the-libraries",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#loading-the-libraries",
    "title": "Introduction to Linear Regression",
    "section": "Loading the Libraries",
    "text": "Loading the Libraries\n\nLet’s import the pandas, matplotlib, and seaborn in Google Colab.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#example",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#example",
    "title": "Introduction to Linear Regression",
    "section": "Example",
    "text": "Example\n\nWe will use data from 392 cars, including miles per gallon, number of cylinders, horsepower, weight, acceleration, year, origin, and other variables.\nThe data is in the file “auto_dataset.xlsx”.\n\nauto_data = pd.read_excel(\"auto_dataset.xlsx\")\n# Set categorical variable.\nauto_data[['origin']] = auto_data[['origin']].astype('category')"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "mpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nyear\norigin\ncar name\n\n\n\n\n0\n18.0\n8\n307.0\n130\n3504\n12.0\n70\nAmerican\nchevrolet chevelle malibu\n\n\n1\n15.0\n8\n350.0\n165\n3693\n11.5\n70\nAmerican\nbuick skylark 320\n\n\n2\n18.0\n8\n318.0\n150\n3436\n11.0\n70\nAmerican\nplymouth satellite\n\n\n3\n16.0\n8\n304.0\n150\n3433\n12.0\n70\nAmerican\namc rebel sst"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#principle-1-formulate-the-question-or-message",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#principle-1-formulate-the-question-or-message",
    "title": "Introduction to Linear Regression",
    "section": "Principle 1: Formulate the question or message",
    "text": "Principle 1: Formulate the question or message\n\nQuestions we can answer with simple linear regression:\n\n\nIs there a relationship between a response variable and predictors?\nHow strong is the relationship?\nWhat is the uncertainty?\nHow precisely can we predict a future outcome?"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-1",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-1",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "Is there a relationship between a car’s weight and its miles per gallon?"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#regression-problem",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#regression-problem",
    "title": "Introduction to Linear Regression",
    "section": "Regression Problem",
    "text": "Regression Problem\n\nObjetive: Objective: Find the best function \\(f(X)\\) of the predictor \\(X\\) that describes the response \\(Y\\).\n\nMathematically, we want to establish the following relationship:\n\\[\nY = f(X) + \\epsilon,\n\\]\nwhere \\(\\epsilon\\) is a natural (random) error."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-2",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-2",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "In practice, it is very difficult to know the true structure of the function \\(f(X)\\).\n\n\n\nThe best we can do is construct an approximation (function) \\(\\hat{f}(X)\\).\nThere are several strategies to build \\(\\hat{f}(X)\\), one of the most common is:\n\nDefine a simple “structure” or “formula.”\nEstimate the elements of the “formula” using the data."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#linear-regression-model",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#linear-regression-model",
    "title": "Introduction to Linear Regression",
    "section": "Linear Regression Model",
    "text": "Linear Regression Model\nA very common function \\(f(X)\\) to predict a response \\(Y\\) is the linear regression model.\nIts mathematical form is:\n\\[\n\\hat{Y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1 X_i,\n\\]\n\n\nWhere \\(i\\) is the index of the \\(n\\) observations, and\n\\(\\hat{Y}_i\\) is the predicted value of the actual response \\(Y_i\\) associated with a predictor value \\(X_i\\).\nThe values \\(\\hat{\\beta}_0\\) and \\(\\hat{\\beta}_1\\) are called coefficients of the model."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#principle-2-turn-data-into-information",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#principle-2-turn-data-into-information",
    "title": "Introduction to Linear Regression",
    "section": "Principle 2: Turn data into information",
    "text": "Principle 2: Turn data into information\nThe values of \\(\\hat{\\beta}_0\\) and \\(\\hat{\\beta}_1\\) are obtained using the data. Specifically, the formulas for the coefficients are:\n\\[\\hat{\\beta}_1 = \\frac{ \\sum_{i=1}^{n} (Y_i - \\bar{Y}) (X_i - \\bar{X}) }{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\text{  y  } \\hat{\\beta}_0 = \\bar{Y} - \\hat{\\beta}_1 \\bar{X},\\]\nwhere \\(\\bar{X} = \\sum_{i=1}^n X_i/n\\) and \\(\\bar{Y} = \\sum_{i=1}^n Y_i/n\\).\nThese formulas are derived from the method of least squares."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#fitting-regression-models-in-r",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#fitting-regression-models-in-r",
    "title": "Introduction to Linear Regression",
    "section": "Fitting Regression Models in R",
    "text": "Fitting Regression Models in R\nTo fit a linear regression model, we use the regplot() in seaborn.\n\nplt.figure(figsize=(5.8, 3.8))\nsns.regplot(data=auto_data, x=\"weight\", y=\"mpg\")\nplt.xlabel(\"Weight (lb)\")\nplt.ylabel(\"Miles per Gallon (mpg)\")\nplt.show()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-3",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-3",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "We can modify the line type, thickness, and color using the arguments linestyle, linewidth, and color, respectively, in the line_kws argument of the function.\n\nplt.figure(figsize=(8, 6))\nsns.regplot(data=auto_data, x=\"weight\", y=\"mpg\",  \n            scatter_kws={\"color\": \"blue\"},\n            line_kws={\"linestyle\": \"-\", \"linewidth\": 3, \"color\": \"red\", \n                      \"label\": \"Linear Fit\"})\nplt.xlabel(\"Weight (lb)\")\nplt.ylabel(\"Miles per Gallon (mpg)\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#for-our-example",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#for-our-example",
    "title": "Introduction to Linear Regression",
    "section": "For Our Example",
    "text": "For Our Example\n\\(\\hat{Y}_i = 46.32 -0.0076 X_i\\)"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#the-formula",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#the-formula",
    "title": "Introduction to Linear Regression",
    "section": "The Formula",
    "text": "The Formula\n\\(\\text{mpg}_i = 46.32 - 0.0076 \\times \\text{peso}_i\\)"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#interpretation-of-the-coefficients",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#interpretation-of-the-coefficients",
    "title": "Introduction to Linear Regression",
    "section": "Interpretation of the Coefficients",
    "text": "Interpretation of the Coefficients\nWhat does \\(\\hat{\\beta}_0 = 46.32\\) mean?\n\n\\(\\hat{\\beta}_0\\) is the average response value when \\(X_i = 0\\)."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-4",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-4",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "Does \\(\\hat{\\beta}_0 = 46.32\\) make sense?\n\n\n\n\n\n\n\n\n\n\nNo! Because there are no cars with a weight of 0."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-5",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-5",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "What does \\(\\hat{\\beta}_1 = - 0.0076\\) mean?\n\n\\(\\hat{\\beta}_1\\) is the average change in the response when \\(X_i\\) increases by one unit."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#interpretation-of-hatbeta_1",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#interpretation-of-hatbeta_1",
    "title": "Introduction to Linear Regression",
    "section": "Interpretation of \\(\\hat{\\beta}_1\\)",
    "text": "Interpretation of \\(\\hat{\\beta}_1\\)\n\n\nFor every extra pound in a car’s weight, the car has an average reduction of 0.0076 miles per gallon."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#do-all-points-fall-exactly-on-the-line",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#do-all-points-fall-exactly-on-the-line",
    "title": "Introduction to Linear Regression",
    "section": "Do all points fall exactly on the line?",
    "text": "Do all points fall exactly on the line?\n\n\nNo! The model has errors.\n\n\nTechnically, the error of the i-th observation is given by: \\(e_i = Y_i - \\hat{Y}_i = Y_i - \\hat{\\beta}_0 - \\hat{\\beta}_1 X_i\\)."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#in-fact",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#in-fact",
    "title": "Introduction to Linear Regression",
    "section": "In fact …",
    "text": "In fact …\n\nThe formulas for \\(\\hat{\\beta}_0\\) and \\(\\hat{\\beta}_1\\) are obtained by minimizing the sum of squared errors.\nSpecifically, the least squares method finds \\(\\hat{\\beta}_0\\) and \\(\\hat{\\beta}_1\\) by minimizing the function:\n\\[\\begin{align}\ng(\\hat{\\beta}_0, \\hat{\\beta}_1) & = \\sum_{i=1}^{n} (e_{i})^2 = \\sum_{i=1}^{n} (Y_i - (\\hat{\\beta}_0 + \\hat{\\beta}_1 X_i ))^2.\n\\end{align}\\]"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#inspecting-the-errors",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#inspecting-the-errors",
    "title": "Introduction to Linear Regression",
    "section": "Inspecting the errors",
    "text": "Inspecting the errors\nThe behavior of the errors (\\(e_i\\)’s) indicates whether the model is correct or not. If the model is correct, the errors should behave as follows:\n\n\nOn average, they should be around 0 for each predicted value \\(\\hat{Y}_i\\).\nThey should have constant dispersion around each predicted value \\(\\hat{Y}_i\\).\nThey should be independent of each other, meaning they should not be related."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#graphical-analysis-of-errors",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#graphical-analysis-of-errors",
    "title": "Introduction to Linear Regression",
    "section": "Graphical analysis of errors",
    "text": "Graphical analysis of errors\nTo evaluate these behaviors, we use two scatter plots of the errors:\n\nHorizontal Axis = Errors and Vertical Axis = Predictions. This plot helps validate the first two assumptions (errors around 0 and constant dispersion).\nEje Horizontal = Errores y Eje Vertical = Tiempo en que se tomó la observación. Está gráfica permite validar el tercer supuesto (independencia)."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#statsmodels-library",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#statsmodels-library",
    "title": "Introduction to Linear Regression",
    "section": "statsmodels library",
    "text": "statsmodels library\n\nstatsmodels is a powerful python library for statistical modeling, data analysis, and hypothesis testing.\nIt provides classes and functions for estimating statistical models.\nIt is built on top of libraries such as NumPy, SciPy, and pandas\nhttps://www.statsmodels.org/stable/index.html"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#load-the-libraries",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#load-the-libraries",
    "title": "Introduction to Linear Regression",
    "section": "Load the libraries",
    "text": "Load the libraries\n\nLet’s import statsmodels into Python\n\nimport statsmodels.api as sm"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#fit-a-linear-model",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#fit-a-linear-model",
    "title": "Introduction to Linear Regression",
    "section": "Fit a linear model",
    "text": "Fit a linear model\n\nTo fit a linear model in statsmodels, we first split the data set into a vector with the values of the predictor only, and a vector with the response values.\n\n# Matrix with predictors.\nX = auto_data['weight']\n\n# Add intercept.\nX = sm.add_constant(X)  \n\n# Matrix with response.\nY = auto_data['mpg']\n\nWe also must include a vector of ones to the predictors to account for the intercept."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-6",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-6",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "Next, we use the functions OLS() and fit() from statsmodels.\n\n# Create linear regression object\nregr = sm.OLS(Y, X)\n\n# Train the model using the training sets\nlinear_model = regr.fit()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-7",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-7",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "To show the estimated coefficients, we use the argument params of the linear_model object created previously.\n\n# The estimated coefficients.\nprint(linear_model.params)\n\nconst     46.317364\nweight    -0.007677\ndtype: float64\n\n\nThe elements in the vector above are the estimates \\(\\hat{\\beta}_0 = 46.317\\) and \\(\\hat{\\beta}_1 = -0.00767\\)."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#residuals-and-fitted-values",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#residuals-and-fitted-values",
    "title": "Introduction to Linear Regression",
    "section": "Residuals and fitted values",
    "text": "Residuals and fitted values\n\nTo create the plots for the residuals, we need the predicted values (\\(\\hat{Y}_i\\)’s) of the response and the residuals (\\(e_i\\)’s) first. To this end, we use the commands below.\n\n# Make predictions using the the model\nY_pred = linear_model.fittedvalues\n\n# Calculate residuals.\nresiduals = linear_model.resid"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#constant-dispersion",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#constant-dispersion",
    "title": "Introduction to Linear Regression",
    "section": "Constant dispersion",
    "text": "Constant dispersion\n\n\nCode\n# Residual vs Fitted Values Plot\nplt.figure(figsize=(7.5, 5.5))\nsns.scatterplot(x = Y_pred, y = residuals, color=\"darkblue\", s = 50)\nplt.axhline(y=0, color='red', linestyle='--')\nplt.xlabel('Fitted (predicted) Values', fontsize=15)\nplt.ylabel('Residuals', fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\nplt.show()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#independent-errors",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#independent-errors",
    "title": "Introduction to Linear Regression",
    "section": "Independent errors",
    "text": "Independent errors\n\n\nCode\n# Residuals vs Time (Case) Plot\nplt.figure(figsize=(7.5, 5.5))\nsns.scatterplot(x = range(len(auto_data)), y = residuals, \n                color=\"darkblue\", s = 50)\nplt.axhline(y=0, color='red', linestyle='--')\nplt.xlabel('Time', fontsize=15)\nplt.ylabel('Residuals', fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\nplt.show()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#comments",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#comments",
    "title": "Introduction to Linear Regression",
    "section": "Comments",
    "text": "Comments\n\n\n\nThe two plots do not validate the assumptions of the linear regression model.\nThere are methods to correct this, but we will not cover them here.\nIf both assumptions are not validated, then the linear regression model is used only as a trend line or a reference for the data."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-8",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-8",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "If both assumptions are validated, then the model can be used to predict the response for new observations and to check if there is a significant relationship between \\(Y\\) and \\(X\\).\nYou have explored about linear regression in IN1002B."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#local-regression-1",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#local-regression-1",
    "title": "Introduction to Linear Regression",
    "section": "Local regression",
    "text": "Local regression\nThis is a modern alternative to the simple linear regression model for capturing complex relationships between two variables.\nBasic Idea: It fits linear regression models to small subsets of the data. These subsets consist of observations that are close to each other.\nThe most common method for fitting a local regression model is LOESS. We will omit the details of this method here since they require advanced statistical concepts."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-9",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-9",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "In Python, we fit a local regression by setting the lowess argument to True in the regplot() function.\n\nplt.figure(figsize=(7, 5))\nsns.regplot(data=auto_data, x=\"weight\", y=\"mpg\", lowess=True)\nplt.show()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-10",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-10",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "We can change the color, thickness, and line type using the color, linewidth, and linestyle,arguments in the line_kws argument function.\n\nplt.figure(figsize=(6, 4))\nsns.regplot(data=auto_data, x=\"weight\", y=\"mpg\", scatter=True, lowess=True,\n            line_kws={\"color\": \"red\", \"linewidth\": 2, \"linestyle\": \"--\"})\nplt.show()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#another-example",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#another-example",
    "title": "Introduction to Linear Regression",
    "section": "Another example",
    "text": "Another example\nLet’s consider the relationship between car acceleration (acceleration) and the total volume of all engine cylinders (displacement).\n\nplt.figure(figsize=(5.5, 3.5))\nsns.scatterplot(data=auto_data, x=\"displacement\", y=\"acceleration\")\nplt.show()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#linear-regression",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#linear-regression",
    "title": "Introduction to Linear Regression",
    "section": "Linear regression",
    "text": "Linear regression\n\nplt.figure(figsize=(7, 5))\nsns.regplot(data=auto_data, x=\"displacement\", y=\"acceleration\", \n            scatter=True)\nplt.show()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#local-regression-2",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#local-regression-2",
    "title": "Introduction to Linear Regression",
    "section": "Local regression",
    "text": "Local regression\n\nplt.figure(figsize=(7, 5))\nsns.regplot(data=auto_data, x=\"displacement\", y=\"acceleration\", \n            scatter=True, lowess = True)\nplt.show()"
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#discussion",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#discussion",
    "title": "Introduction to Linear Regression",
    "section": "Discussion",
    "text": "Discussion\n\n\nThe simple linear regression model is easy to interpret due to its structure:\n\n\\[\n\\hat{Y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1 X_i.\n\\]\n\nHowever, it may be too rigid to capture complex relationships between two variables."
  },
  {
    "objectID": "T6_Introduction_Linear_Regression/LR.slides.html#section-11",
    "href": "T6_Introduction_Linear_Regression/LR.slides.html#section-11",
    "title": "Introduction to Linear Regression",
    "section": "",
    "text": "Local regression is flexible and allows capturing complex relationships between two variables.\nHowever, it has a low level of interpretability because it does not provide an explicit equation to relate the predictor \\(X\\) to the response \\(Y\\)."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#agenda",
    "href": "T2_Type_of_Variables/Types.slides.html#agenda",
    "title": "Types of Variables",
    "section": "Agenda",
    "text": "Agenda\n\n\nWhat type is my data?\nData manipulation with pandas"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#types-of-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#types-of-variables",
    "title": "Types of Variables",
    "section": "Types of variables",
    "text": "Types of variables\n\nBefore creating a graph, we must examine the type of values that our dataset variables take.\n\nThere are two main types of variables:\n\n\nNumerical variables.\nCategorical variables."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#numerical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#numerical-variables",
    "title": "Types of Variables",
    "section": "Numerical variables",
    "text": "Numerical variables\n\nThese take values that represent numerical measurements or quantities.\n\n\nHeight (in centimeters).\nWeight (in kilograms).\nAge (in years).\nPrice (in dollars).\nTime (in hours or seconds).\nExam score (number of points on a 100-point scale)."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#types-of-numerical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#types-of-numerical-variables",
    "title": "Types of Variables",
    "section": "Types of numerical variables",
    "text": "Types of numerical variables\n\nNumerical variables are divided into two types:\n\nDiscrete: variables that take integer values.\n\n\nExamples:\n\nNumber of children (0, 1, 2, or 3)\nNumber of students in a class (20, 30, or 35)\nNumber of books in a library (10,000, 15,000, 20,000)"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section",
    "href": "T2_Type_of_Variables/Types.slides.html#section",
    "title": "Types of Variables",
    "section": "",
    "text": "Continuous: variables that have a large range of possible values.\n\n\nExamples:\n\nA person’s height (could be within the range of 1.60 m to 1.85 m)\nAmbient temperature (could be within the range of -30 \\(^\\circ\\)C to 50 \\(^\\circ\\)C)\nTime for an Uber to arrive (between 5 and 60 minutes)"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#categorical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#categorical-variables",
    "title": "Types of Variables",
    "section": "Categorical variables",
    "text": "Categorical variables\n\nThese take values that fall into categories.\n\n\nA category is a class or division of people or things that share particular characteristics.\n\n\n\n\n\n\n\n\n\n\nVariable\nCategories\n\n\nAmazon review\n1\\(\\bigstar\\), 2\\(\\bigstar\\), 3\\(\\bigstar\\), 4\\(\\bigstar\\), 5\\(\\bigstar\\)\n\n\nCountry of origin\nMéxico, Canadá, EUA\n\n\nPostal code\n72703, 90034, 3000, …"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#classification-of-categorical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#classification-of-categorical-variables",
    "title": "Types of Variables",
    "section": "Classification of categorical variables",
    "text": "Classification of categorical variables\n\n\nCategorical variables are divided into two important types:\n\nNominal\nOrdinal\n\n\nThe distinction depends on whether the categories have a meaningful order or not."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#nominal-categorical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#nominal-categorical-variables",
    "title": "Types of Variables",
    "section": "Nominal categorical variables",
    "text": "Nominal categorical variables\n\nA categorical variable is nominal if its categories do not have a specific order.\n\nExamples:\n\n\nPolitical party affiliation (Democrat or Republican).\nDog breed (Shepherd, Hound, Terrier, Other).\nComputer operating system (Windows, macOS, Linux)."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#ordinal-categorical-variables",
    "href": "T2_Type_of_Variables/Types.slides.html#ordinal-categorical-variables",
    "title": "Types of Variables",
    "section": "Ordinal categorical variables",
    "text": "Ordinal categorical variables\n\nA categorical variable is ordinal if its categories do have a meaningful order.\n\nExamples:\n\n\nT-shirt size (Small, Medium, Large).\nEducation level (High School, University, Postgraduate).\nIncome level (Less than $250K, $250K-$500K, More than $500K)\n\n\n\nIt is important to note that with an ordinal variable, the difference between, say, small and medium is not necessarily the same as the difference between medium and large. Additionally, the differences between consecutive categories may not be quantifiable. Think about star ratings in a restaurant review—how much better is one star compared to two stars?"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#interesting-fact",
    "href": "T2_Type_of_Variables/Types.slides.html#interesting-fact",
    "title": "Types of Variables",
    "section": "Interesting fact…",
    "text": "Interesting fact…\n\nInteger values (e.g., 1, 2, 3, …, 5) can represent nominal or ordinal categorical variables.\n\n\n\nRepresentation\n1\n2\n3\n4\n\n\nBlood Type\nA\nB\nAB\nO\n\n\nReview\nBad\nFair\nGood\nVery Good\n\n\n\n\n\nIn practice, boolean values (TRUE and FALSE) often represent nominal categories."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#remember",
    "href": "T2_Type_of_Variables/Types.slides.html#remember",
    "title": "Types of Variables",
    "section": "Remember",
    "text": "Remember"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#a-general-difference-is",
    "href": "T2_Type_of_Variables/Types.slides.html#a-general-difference-is",
    "title": "Types of Variables",
    "section": "A general difference is …",
    "text": "A general difference is …\n\n\nQuantitative variables (discrete or continuous) are those where addition or subtraction makes sense.\nCategorical variables (nominal or ordinal) are those where addition or subtraction does NOT make sense."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#how-do-we-check-the-type-of-variable",
    "href": "T2_Type_of_Variables/Types.slides.html#how-do-we-check-the-type-of-variable",
    "title": "Types of Variables",
    "section": "How do we check the type of variable?",
    "text": "How do we check the type of variable?\n\nAs an example, we will use “penguins.xlsx” dataset. Let’s load it using pandas.\n\n# Load pandas.\nimport pandas as pd\n\n# Load the Excel file into a pandas DataFrame.\npenguins_data = pd.read_excel(\"penguins.xlsx\")"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-1",
    "href": "T2_Type_of_Variables/Types.slides.html#section-1",
    "title": "Types of Variables",
    "section": "",
    "text": "In Python, we check the type of each variable in a dataset using the function info().\n\npenguins_data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \n 7   year               344 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 21.6+ KB"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#general-python-formats",
    "href": "T2_Type_of_Variables/Types.slides.html#general-python-formats",
    "title": "Types of Variables",
    "section": "General Python formats",
    "text": "General Python formats\n\n\nfloat64 format for numerical variables with decimals. It is used for continuous variables.\nint64 format for numerical variables with integers. It is used for discrete variables.\nobject format for general variables with characters. It is used for nominal and ordinal variables. However, we must inform Python about this. More on that later."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#activity-solo-mode",
    "href": "T2_Type_of_Variables/Types.slides.html#activity-solo-mode",
    "title": "Types of Variables",
    "section": "Activity (solo mode)",
    "text": "Activity (solo mode)\n\n\nGo to the Modules section on our CANVAS website.\nComplete the Activity 2.1: Types of Variables individually."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#chaining-operations-with-pandas",
    "href": "T2_Type_of_Variables/Types.slides.html#chaining-operations-with-pandas",
    "title": "Types of Variables",
    "section": "Chaining operations with pandas",
    "text": "Chaining operations with pandas\nOne of the most important techniques in pandas is chaining, which allows for cleaner and more readable data manipulation.\nThe general structure of chaining looks like this:"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#key-pandas-methods",
    "href": "T2_Type_of_Variables/Types.slides.html#key-pandas-methods",
    "title": "Types of Variables",
    "section": "Key pandas methods",
    "text": "Key pandas methods\npandas provides methods or functions to solve common data manipulation tasks:\n\n\n.filter() selects specific columns or rows.\n.query() filters observations based on conditions.\n.assign() adds new variables that are functions of existing variables.\n.sort_values() changes the order of rows.\n.agg() reduces multiple values to a single numerical summary."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-2",
    "href": "T2_Type_of_Variables/Types.slides.html#section-2",
    "title": "Types of Variables",
    "section": "",
    "text": "To practice, we will use the dataset penguins_data."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#selecting-columns-with-.filter",
    "href": "T2_Type_of_Variables/Types.slides.html#selecting-columns-with-.filter",
    "title": "Types of Variables",
    "section": "Selecting columns with .filter()",
    "text": "Selecting columns with .filter()\nSelect the columns species, body_mass_g and sex.\n\n(penguins_data\n  .filter([\"species\", \"body_mass_g\", \"sex\"], axis = 1)\n).head()\n\n\n\n\n\n\n\n\nspecies\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\n3750.0\nmale\n\n\n1\nAdelie\n3800.0\nfemale\n\n\n2\nAdelie\n3250.0\nfemale\n\n\n3\nAdelie\nNaN\nNaN\n\n\n4\nAdelie\n3450.0\nfemale"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-3",
    "href": "T2_Type_of_Variables/Types.slides.html#section-3",
    "title": "Types of Variables",
    "section": "",
    "text": "The axis argument tells .filter() whether to select rows (0) or columns (1) from the dataframe.\n\n(penguins_data\n  .filter([\"species\", \"body_mass_g\", \"sex\"], axis = 1)\n).head()\n\n\n\nThe .head() command allows us to print the first six rows of the newly produced dataframe. We must remove it to have the entire new dataframe."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-4",
    "href": "T2_Type_of_Variables/Types.slides.html#section-4",
    "title": "Types of Variables",
    "section": "",
    "text": "We can also use .filter() to select rows too. To this end, we set axis = 1. We can select specific rows, such as 0 and 10.\n\n(penguins_data\n  .filter([0, 10], axis = 0)\n)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n10\nAdelie\nTorgersen\n37.8\n17.1\n186.0\n3300.0\nNaN\n2007"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-5",
    "href": "T2_Type_of_Variables/Types.slides.html#section-5",
    "title": "Types of Variables",
    "section": "",
    "text": "Or, we can select a set of rows using the function range(). For example, let’s select the first 5 rows.\n\n(penguins_data\n  .filter(range(5), axis = 0)\n)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#filtering-rows-with-.query",
    "href": "T2_Type_of_Variables/Types.slides.html#filtering-rows-with-.query",
    "title": "Types of Variables",
    "section": "Filtering rows with .query()",
    "text": "Filtering rows with .query()\n\nAn alternative way of selecting rows is .query(). Compared to .filter(), .query() allows us to filter the data using statements or queries involving the variables.\n\nFor example, let’s filter the data for the species “Gentoo.”\n\n(penguins_data\n  .query(\"species == 'Gentoo'\")\n)"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-6",
    "href": "T2_Type_of_Variables/Types.slides.html#section-6",
    "title": "Types of Variables",
    "section": "",
    "text": "(penguins_data\n  .query(\"species == 'Gentoo'\")\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n152\nGentoo\nBiscoe\n46.1\n13.2\n211.0\n4500.0\nfemale\n2007\n\n\n153\nGentoo\nBiscoe\n50.0\n16.3\n230.0\n5700.0\nmale\n2007\n\n\n154\nGentoo\nBiscoe\n48.7\n14.1\n210.0\n4450.0\nfemale\n2007\n\n\n155\nGentoo\nBiscoe\n50.0\n15.2\n218.0\n5700.0\nmale\n2007\n\n\n156\nGentoo\nBiscoe\n47.6\n14.5\n215.0\n5400.0\nmale\n2007"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-7",
    "href": "T2_Type_of_Variables/Types.slides.html#section-7",
    "title": "Types of Variables",
    "section": "",
    "text": "We can also filter the data to get penguins with a body mass greater than 5000g.\n\n(penguins_data\n  .query(\"body_mass_g &gt; 5000\")\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n153\nGentoo\nBiscoe\n50.0\n16.3\n230.0\n5700.0\nmale\n2007\n\n\n155\nGentoo\nBiscoe\n50.0\n15.2\n218.0\n5700.0\nmale\n2007\n\n\n156\nGentoo\nBiscoe\n47.6\n14.5\n215.0\n5400.0\nmale\n2007\n\n\n159\nGentoo\nBiscoe\n46.7\n15.3\n219.0\n5200.0\nmale\n2007\n\n\n161\nGentoo\nBiscoe\n46.8\n15.4\n215.0\n5150.0\nmale\n2007"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-8",
    "href": "T2_Type_of_Variables/Types.slides.html#section-8",
    "title": "Types of Variables",
    "section": "",
    "text": "We can even combine .filter() and .query(). For example, let’s select the columns species, body_mass_g and sex, then filter the data for the “Gentoo” species.\n\n(penguins_data\n  .filter([\"species\", \"body_mass_g\", \"sex\"], axis = 1)\n  .query(\"species == 'Gentoo'\")\n).head(4)\n\n\n\n\n\n\n\n\nspecies\nbody_mass_g\nsex\n\n\n\n\n152\nGentoo\n4500.0\nfemale\n\n\n153\nGentoo\n5700.0\nmale\n\n\n154\nGentoo\n4450.0\nfemale\n\n\n155\nGentoo\n5700.0\nmale"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#create-new-columns-with-.assign",
    "href": "T2_Type_of_Variables/Types.slides.html#create-new-columns-with-.assign",
    "title": "Types of Variables",
    "section": "Create new columns with .assign()",
    "text": "Create new columns with .assign()\nWith .assign(), we can create new columns (variables) that are functions of existing ones. This function uses a special Python keyword called lambda. Technically, this keyword defines an anonymous function.\nFor example, we create a new variable LDRatio equaling the ratio of bill_length_mm and bill_depth_mm.\n\n(penguins_data\n  .assign(LDRatio = lambda df: df[\"bill_length_mm\"] / df[\"bill_depth_mm\"])\n)"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-9",
    "href": "T2_Type_of_Variables/Types.slides.html#section-9",
    "title": "Types of Variables",
    "section": "",
    "text": "In this code, the df after lambda indicates that the dataframe (penguins_data) will be referred to as df inside the function. The colon : sets the start of the function.\n\n(penguins_data\n  .assign(LDRatio = lambda df: df[\"bill_length_mm\"] / df[\"bill_depth_mm\"])\n)\n\nThe code appends the new variable to the end of the resulting dataframe."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-10",
    "href": "T2_Type_of_Variables/Types.slides.html#section-10",
    "title": "Types of Variables",
    "section": "",
    "text": "We can see the new variable using .filter().\n\n(penguins_data\n  .assign(LDRatio = lambda df: df[\"bill_length_mm\"] / df[\"bill_depth_mm\"])\n  .filter([\"bill_length_mm\", \"bill_depth_mm\", \"LDRatio\"], axis = 1)\n).head()\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nLDRatio\n\n\n\n\n0\n39.1\n18.7\n2.090909\n\n\n1\n39.5\n17.4\n2.270115\n\n\n2\n40.3\n18.0\n2.238889\n\n\n3\nNaN\nNaN\nNaN\n\n\n4\n36.7\n19.3\n1.901554"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#sorting-with-.sort_values",
    "href": "T2_Type_of_Variables/Types.slides.html#sorting-with-.sort_values",
    "title": "Types of Variables",
    "section": "Sorting with .sort_values()",
    "text": "Sorting with .sort_values()\nWe can sort the data based on a column like bill_length_mm.\n\n(penguins_data\n  .sort_values(\"bill_length_mm\")\n).head(4)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n142\nAdelie\nDream\n32.1\n15.5\n188.0\n3050.0\nfemale\n2009\n\n\n98\nAdelie\nDream\n33.1\n16.1\n178.0\n2900.0\nfemale\n2008\n\n\n70\nAdelie\nTorgersen\n33.5\n19.0\n190.0\n3600.0\nfemale\n2008\n\n\n92\nAdelie\nDream\n34.0\n17.1\n185.0\n3400.0\nfemale\n2008"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#section-11",
    "href": "T2_Type_of_Variables/Types.slides.html#section-11",
    "title": "Types of Variables",
    "section": "",
    "text": "To sort in descending order, use ascending=False inside sort_values().\n\n(penguins_data\n  .sort_values(\"bill_length_mm\", ascending=False)\n).head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n185\nGentoo\nBiscoe\n59.6\n17.0\n230.0\n6050.0\nmale\n2007\n\n\n293\nChinstrap\nDream\n58.0\n17.8\n181.0\n3700.0\nfemale\n2007\n\n\n253\nGentoo\nBiscoe\n55.9\n17.0\n228.0\n5600.0\nmale\n2009\n\n\n339\nChinstrap\nDream\n55.8\n19.8\n207.0\n4000.0\nmale\n2009\n\n\n267\nGentoo\nBiscoe\n55.1\n16.0\n230.0\n5850.0\nmale\n2009"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#summarizing-with-.agg",
    "href": "T2_Type_of_Variables/Types.slides.html#summarizing-with-.agg",
    "title": "Types of Variables",
    "section": "Summarizing with .agg()",
    "text": "Summarizing with .agg()\nWe can calculate summary statistics of the columns bill_length_mm, bill_depth_mm, and body_mass_g.\n\n(penguins_data\n  .filter([\"bill_length_mm\", \"bill_depth_mm\", \"body_mass_g\"], axis = 1)\n  .agg([\"mean\"])\n)\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nbody_mass_g\n\n\n\n\nmean\n43.92193\n17.15117\n4201.754386\n\n\n\n\n\n\n\n\n\nBy default, agg() ignores missing values."
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#saving-results-in-new-objects",
    "href": "T2_Type_of_Variables/Types.slides.html#saving-results-in-new-objects",
    "title": "Types of Variables",
    "section": "Saving results in new objects",
    "text": "Saving results in new objects\n\nAfter performing operations on our data, we can save the modified dataset as a new object.\n\nmean_penguins_data = (penguins_data\n  .filter([\"bill_length_mm\", \"bill_depth_mm\", \"body_mass_g\"], axis = 1)\n  .agg([\"mean\"])\n)\n\nmean_penguins_data\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nbody_mass_g\n\n\n\n\nmean\n43.92193\n17.15117\n4201.754386"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#more-on-pandas",
    "href": "T2_Type_of_Variables/Types.slides.html#more-on-pandas",
    "title": "Types of Variables",
    "section": "More on pandas",
    "text": "More on pandas\n\n\nhttps://wesmckinney.com/book/"
  },
  {
    "objectID": "T2_Type_of_Variables/Types.slides.html#final-remarks",
    "href": "T2_Type_of_Variables/Types.slides.html#final-remarks",
    "title": "Types of Variables",
    "section": "Final remarks",
    "text": "Final remarks\n\n\npandas is a Python library for data manipulation.\nUnderstanding variable types helps determine the best operations and visualizations.\nThere are specific charts for numerical and categorical variables.\nThroughout this course, we will explore various visualizations for different types of data."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#agenda",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#agenda",
    "title": "Multivariable Data",
    "section": "Agenda",
    "text": "Agenda\n\nData with more than one variable\nTwo numerical variables\nOne numerical and one categorical variable\nTwo categorical variables\nThree or more variables"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#load-libraries",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#load-libraries",
    "title": "Multivariable Data",
    "section": "Load Libraries",
    "text": "Load Libraries\n\nLet’s import the pandas, matplotlib, and seaborn in Google Colab before starting.\n\nimport pandas as pd      \nimport matplotlib.pyplot as plt  \nimport seaborn as sns"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#multivariate-data",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#multivariate-data",
    "title": "Multivariable Data",
    "section": "Multivariate data",
    "text": "Multivariate data\n\nMultivariate data consists of datasets that contain observations of two or more variables.\n\n\nVariables can be numerical or categorical.\nVariables may or may not depend on each other.\n\n\n\nIn fact, the goal is to determine whether there is a relationship between the variables and the type of relationship."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#example-1",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#example-1",
    "title": "Multivariable Data",
    "section": "Example 1",
    "text": "Example 1\n\nConsider data from 392 cars, including miles per gallon, number of cylinders, horsepower, weight, acceleration, year, origin, among other variables.\nThe data is in the file “auto_dataset.xlsx”.\n\nauto_data = pd.read_excel(\"auto_dataset.xlsx\")"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section",
    "title": "Multivariable Data",
    "section": "",
    "text": "auto_data.head(4)\n\n\n\n\n\n\n\n\nmpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nyear\norigin\ncar name\n\n\n\n\n0\n18.0\n8\n307.0\n130\n3504\n12.0\n70\nAmerican\nchevrolet chevelle malibu\n\n\n1\n15.0\n8\n350.0\n165\n3693\n11.5\n70\nAmerican\nbuick skylark 320\n\n\n2\n18.0\n8\n318.0\n150\n3436\n11.0\n70\nAmerican\nplymouth satellite\n\n\n3\n16.0\n8\n304.0\n150\n3433\n12.0\n70\nAmerican\namc rebel sst"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#principle-1-formulate-the-question",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#principle-1-formulate-the-question",
    "title": "Multivariable Data",
    "section": "Principle 1: Formulate the question",
    "text": "Principle 1: Formulate the question\nIn the context of multiple-variable data, typical questions to study include:\n\n\nHow are variable \\(X\\) and variable \\(Y\\) related?\nIs the distribution of variable \\(X\\) the same across all subgroups defined by variable \\(Z\\)?\nAre there any unusual observations in the combination of values for variables \\(X\\) and \\(Y\\)?\nAre there any unusual observations in \\(X\\) for a subgroup of variable \\(Z\\)?"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#principle-2-turn-data-into-information",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#principle-2-turn-data-into-information",
    "title": "Multivariable Data",
    "section": "Principle 2: Turn data into information",
    "text": "Principle 2: Turn data into information\nThere are various types of graphs that help us explore relationships between two or more variables.\n\n\n\n\nType\nGraph Type\n\n\n\n\nNumerical\nScatter plot, line graph\n\n\nCategorical\nSide-by-side bar chart, stacked bar chart\n\n\nMixed\nGSide-by-side box plot, bubble chart\n\n\n\n\n\nFor two features, the combination of types (both quantitative, both qualitative, or a mix) matters."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#independent-and-dependent-variables",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#independent-and-dependent-variables",
    "title": "Multivariable Data",
    "section": "Independent and dependent variables",
    "text": "Independent and dependent variables\nWhen investigating the relationship between two variables (numerical or categorical), we use specific terminology.\n\nOne variable is called the dependent or response variable, denoted by the letter \\(Y\\).\n\n\nThe other variable is called the independent or predictor variable, denoted by the letter \\(X\\).\n\n\n\nOur goal is to determine whether changes in variable \\(X\\) are associated with changes in variable \\(Y\\), and the nature of this association."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#scatter-plot",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#scatter-plot",
    "title": "Multivariable Data",
    "section": "Scatter plot",
    "text": "Scatter plot\n\nThe most common graph for examining the relationship between two numerical variables is the scatter plot.\n\nVariables \\(X\\) and \\(Y\\) are placed on the horizontal and vertical axes, respectively. Each point on the graph represents a pair of \\(X\\) and \\(Y\\) values.\n\n\n\nThe goal is to explore linear or non-linear relationships between variables."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#scatter-plot-in-python",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#scatter-plot-in-python",
    "title": "Multivariable Data",
    "section": "Scatter plot in Python",
    "text": "Scatter plot in Python\n\nTo create scatter plots in seaborn, we use the function scatterplot().\n\nFor example, let’s create a plot to explore the relationship between a car’s weight (weight) and its fuel efficiency in miles per gallon (mpg)\n\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data = auto_data, x = \"weight\", y = \"mpg\")\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-1",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-1",
    "title": "Multivariable Data",
    "section": "",
    "text": "plt.figure(figsize=(8, 6))\nsns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\")\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#principle-3-apply-graphic-design-principles",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#principle-3-apply-graphic-design-principles",
    "title": "Multivariable Data",
    "section": "Principle 3: Apply graphic design principles",
    "text": "Principle 3: Apply graphic design principles\nFollowing Principle 3, we can modify the default function values to define different colors or shapes for the points in the graph.\nSpecifically, you can change the color, shape, and size of points using the arguments color, shape and s, respectively.\n\nsns.scatterplot(data=data_set, x=X, y=Y, color, marker, s)"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-2",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-2",
    "title": "Multivariable Data",
    "section": "",
    "text": "plt.figure(figsize=(8, 6))\nsns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\", color=\"blue\", \n                marker=\"x\", s=100)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#possible-point-shapes",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#possible-point-shapes",
    "title": "Multivariable Data",
    "section": "Possible point shapes",
    "text": "Possible point shapes\n\nTo change the symbols used for points in a scatter plot, set the marker parameter to a number or character from the chart below."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-3",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-3",
    "title": "Multivariable Data",
    "section": "",
    "text": "Continuing with Principle 3, you can use previously seen functions to further improve the graph’s appearance.\n\n\nCode\nplt.figure(figsize=(7, 5))\nsns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\", color=\"darkblue\", s=50)\n# Customize the plot\nplt.title(\"Weight and miles per gallon relationship in cars\", fontsize=17)\nplt.xlabel(\"Weight (lb)\", fontsize=15)\nplt.ylabel(\"Miles per gallon\", fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#include-zero",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#include-zero",
    "title": "Multivariable Data",
    "section": "Include zero",
    "text": "Include zero\nIn the previous graph, the minimum vertical axis value is around 10. To adjust the minimum value to 0, we use the additional function ylim() below.\n\n\nCode\n# Create the scatter plot with custom color and size\nplt.figure(figsize=(5.2, 3.2))\nsns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\", color=\"darkblue\", s=50)\n# Set y-axis limits\nplt.ylim(0, 50)\n# Customize the plot\nplt.title(\"Weight and miles per gallon relationship in cars\", fontsize=17)\nplt.xlabel(\"Weight (lb)\", fontsize=15)\nplt.ylabel(\"Miles per gallon\", fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-4",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-4",
    "title": "Multivariable Data",
    "section": "",
    "text": "If necessary, we can also adjust the horizontal axis to show 0 as well. To this end we use the xlim() function.\n\n\nCode\n# Create the scatter plot with custom color and size\nplt.figure(figsize=(7, 5))\nsns.scatterplot(data=auto_data, x=\"weight\", y=\"mpg\", color=\"darkblue\", s=50)\n# Set y-axis limits\nplt.ylim(0, 50)\n# Set x-axis limits\nplt.xlim(0, 5500)\n# Customize the plot\nplt.title(\"Weight and miles per gallon relationship in cars\", fontsize=17)\nplt.xlabel(\"Weight (lb)\", fontsize=15)\nplt.ylabel(\"Miles per gallon\", fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#individual-graphs",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#individual-graphs",
    "title": "Multivariable Data",
    "section": "Individual graphs",
    "text": "Individual graphs\nIndividual variable graphs (such as histograms) do not allow us to study the relationship between two variables. They only provide information on the distribution of each variable.\n\n\n\n\nCode\nplt.figure(figsize=(4, 3))\nsns.histplot(data=auto_data, x=\"mpg\", color=\"darkblue\", edgecolor=\"black\")\nplt.title(\"Distribution of miles per gallon\", fontsize=17)\nplt.xlabel(\"Miles per gallon\", fontsize=15)\nplt.ylabel(\"Frequency\", fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplt.figure(figsize=(4, 3))\nsns.histplot(data=auto_data, x=\"weight\", color=\"darkblue\", kde=False, edgecolor=\"black\")\nplt.title(\"Distribution of weight\", fontsize=17)\nplt.xlabel(\"Weight (lb)\", fontsize=15)\nplt.ylabel(\"Frecuencia\", fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#line-graph",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#line-graph",
    "title": "Multivariable Data",
    "section": "Line graph",
    "text": "Line graph\nA line graph is a visual representation of data where data points are connected by a line. Axes:\n\n\\(X\\) (horizontal): Represents time or the independent variable.\n\\(Y\\) (vertical): Represents the dependent variable.\n\nEach point represents a value at a given moment.\n\n\nThe objective is to explore trends over time or the evolution of a continuous variable."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#example-2",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#example-2",
    "title": "Multivariable Data",
    "section": "Example 2",
    "text": "Example 2\n\nConsider the data in the file “spotify.xlsx”. This dataset contains the global daily streams of the top five most popular songs on the music streaming service Spotify in 2017.\n\nspotify_data = pd.read_excel(\"spotify.xlsx\")"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-5",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-5",
    "title": "Multivariable Data",
    "section": "",
    "text": "spotify_data.head(4)\n\n\n\n\n\n\n\n\nDate\nDay\nShape of You\nDespacito\nSomething Just Like This\nHUMBLE.\nUnforgettable\n\n\n\n\n0\n2017-01-06\n1\n12287078\nNaN\nNaN\nNaN\nNaN\n\n\n1\n2017-01-07\n2\n13190270\nNaN\nNaN\nNaN\nNaN\n\n\n2\n2017-01-08\n3\n13099919\nNaN\nNaN\nNaN\nNaN\n\n\n3\n2017-01-09\n4\n14506351\nNaN\nNaN\nNaN\nNaN"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-6",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-6",
    "title": "Multivariable Data",
    "section": "",
    "text": "We will focus on the song Despacito by Luis Fonsi. To construct line plots, we use the functionlineplot() in seaborn.\n\nplt.figure(figsize=(7, 5))\nsns.lineplot(data=spotify_data, x=\"Date\", y=\"Despacito\")\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#applying-principle-3",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#applying-principle-3",
    "title": "Multivariable Data",
    "section": "Applying Principle 3",
    "text": "Applying Principle 3\nWe can change various aspects of the graph using additional arguments linetype, size, and color.\n\nsns.lineplot(data = data_set, x = x, y = Y, linestyle, linewidth, color)."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-7",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-7",
    "title": "Multivariable Data",
    "section": "",
    "text": "Code\n# Create the line plot\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=spotify_data, x=\"Date\", y=\"Despacito\", linestyle = '-',\n            color=\"darkblue\", linewidth=1.3)\nplt.title(\"Popularity of the song Despacito by Luis Fonsi\", fontsize=16)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Number of plays on Spotify\", fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#line-types",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#line-types",
    "title": "Multivariable Data",
    "section": "Line types",
    "text": "Line types\n\nTo change the line type, set the linestyle parameter to a character shown below."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#divide-the-data-into-groups",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#divide-the-data-into-groups",
    "title": "Multivariable Data",
    "section": "Divide the Data into Groups!",
    "text": "Divide the Data into Groups!\nTo examine the relationship between a numerical and a categorical variable, we use the categorical variable to divide the data into groups. This way, we compare the distribution of the numerical variable among these groups.\n\nIn this context:\n\n\\(X\\) is the categorical variable.\n\\(Y\\) is the numerical variable.\n\n\n\nThe side-by-side boxplot is the most effective way to study the relationship between a categorical and a numerical variable."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#boxplot-by-groups",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#boxplot-by-groups",
    "title": "Multivariable Data",
    "section": "Boxplot by Groups",
    "text": "Boxplot by Groups\n\nThe side-by-side boxplot compares the distribution of a variable across different groups.\n\nIn seaborn, the plot is obtained using the function:\nsns.boxplot(data=data_set, x=X, y=Y)."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-8",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-8",
    "title": "Multivariable Data",
    "section": "",
    "text": "For example, if we want to compare the distributions of miles per gallon of cars built in America, Europe, or Japan, we use the following command:\n\nplt.figure(figsize=(7, 5))\nsns.boxplot(data=auto_data, x=\"origin\", y=\"mpg\")\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#applying-principle-3-1",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#applying-principle-3-1",
    "title": "Multivariable Data",
    "section": "Applying Principle 3",
    "text": "Applying Principle 3\n\n\nCode\nplt.figure(figsize=(7, 5))\nsns.boxplot(data=auto_data, x=\"origin\", y=\"mpg\", color=\"lightblue\")\nplt.title(\"Miles per Gallon Distribution by Origin\", fontsize=17)\nplt.xlabel(\"Origen\", fontsize=15)\nplt.ylabel(\"Miles per gallon\", fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-9",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-9",
    "title": "Multivariable Data",
    "section": "",
    "text": "We can also change the format of outlier points using the arguments marker, markersize, and markerfacecolor inside the argument flierprops in sns.boxplot.\n\n\nCode\nplt.figure(figsize=(6, 4))\nsns.boxplot(data=auto_data, x=\"origin\", y=\"mpg\", color=\"lightblue\",  \n            flierprops=dict(marker=\"o\", markerfacecolor=\"purple\", markersize=8))\nplt.title(\"Miles per Gallon Distribution by Origin\", fontsize=17)\nplt.xlabel(\"Origen\", fontsize=15)\nplt.ylabel(\"Miles per gallon\", fontsize=15)\nplt.yticks(fontsize=12)\nplt.xticks(fontsize=12)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#plotting-statistical-summaries-by-groups",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#plotting-statistical-summaries-by-groups",
    "title": "Multivariable Data",
    "section": "Plotting statistical summaries by groups",
    "text": "Plotting statistical summaries by groups\nAlternatively, we can summarize the values of the numerical variable \\(Y\\) for each category of the variable \\(X\\) using the median or the mean.\nFor example, let’s plot the average miles per gallon of cars produced in America, Europe, and Japan. First, we calculate the average for each category using groupby() and mean().\n\nsum_auto = (auto_data\n  .filter(['mpg', 'origin'], axis = 1)\n  .groupby([\"origin\"], observed = True)\n  .agg(meanMPG = (\"mpg\", \"mean\"))\n)"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-10",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-10",
    "title": "Multivariable Data",
    "section": "",
    "text": "The data to be plotted are:\n\nsum_auto\n\n\n\n\n\n\n\n\nmeanMPG\n\n\norigin\n\n\n\n\n\nAmerican\n20.083534\n\n\nEuropean\n27.891429\n\n\nJapanese\n30.450633"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-11",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-11",
    "title": "Multivariable Data",
    "section": "",
    "text": "Two common visualization types for plotting a numerical and a discrete variable when there is only one value per category are:\n\nCleveland dot plot\nBar chart"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#cleveland-dot-plot",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#cleveland-dot-plot",
    "title": "Multivariable Data",
    "section": "Cleveland dot plot",
    "text": "Cleveland dot plot\n\nThe Cleveland dot plot encodes quantitative data across different categories. It is an alternative to a bar chart. It is obtained using the function scatterplot().\n\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=sum_auto, x='meanMPG', y='origin')\nplt.title(\"Average Miles per Gallon by Origin\", fontsize=17)\nplt.xlabel(\"Average Miles Per Gallon\", fontsize=15)\nplt.ylabel(\"Origen\", fontsize=15)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#improving-the-plot",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#improving-the-plot",
    "title": "Multivariable Data",
    "section": "Improving the plot",
    "text": "Improving the plot\nWe apply Principle 3 to improve the plot.\n\n\nCode\nplt.figure(figsize=(7, 5))\nsns.scatterplot(data=sum_auto, x='meanMPG', y='origin', s=100, color='pink')\nplt.title(\"Average Miles per Gallon by Origin\", fontsize=17)\nplt.xlabel(\"Average Miles Per Gallon\", fontsize=15)\nplt.ylabel(\"Origen\", fontsize=15)\n# Set x-axis limits\nplt.xlim(0, 35)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#bar-chart",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#bar-chart",
    "title": "Multivariable Data",
    "section": "Bar Chart",
    "text": "Bar Chart\nTo create a bar chart where the bar length equals a specific value, we use the function barplot() dfrom the seaborn.\n\nplt.figure(figsize=(5, 3))\nsns.barplot(data=sum_auto, x='meanMPG', y='origin')\nplt.title(\"Average Miles per Gallon by Origin\")\nplt.xlabel(\"Average Miles Per Gallon\")\nplt.ylabel(\"Origen\")\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-13",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-13",
    "title": "Multivariable Data",
    "section": "",
    "text": "We can use similar commands as the Cleveland dot plot to improve the bar chart.\n\n\nCode\nplt.figure(figsize=(7, 5))\nsns.barplot(data=sum_auto, x='meanMPG', y='origin', color='lightblue')\nplt.title(\"Average Miles per Gallon by Origin\", fontsize=17)\nplt.xlabel(\"Average Miles Per Gallon\", fontsize=15)\nplt.ylabel(\"Origen\", fontsize=15)\nplt.xlim(0, 35)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#divide-the-data-into-groups-1",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#divide-the-data-into-groups-1",
    "title": "Multivariable Data",
    "section": "Divide the Data into Groups!",
    "text": "Divide the Data into Groups!\nWith two categorical variables, we compare the distribution of one variable across subgroups defined by the other variable.\nIn fact, we keep one variable constant and plot the distribution of the other.\n\nTo do this, the most popular charts are extensions of bar graphs:\n\nStacked bar charts\nSide-by-side bar charts"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#example-3",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#example-3",
    "title": "Multivariable Data",
    "section": "Example 3",
    "text": "Example 3\nAs an example, let’s consider the data in the file “penguins.xlsx”.\n\npenguins_data = pd.read_excel(\"penguins.xlsx\")\npenguins_data.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-14",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-14",
    "title": "Multivariable Data",
    "section": "",
    "text": "The data has two categorical variables:\n\nThe species of penguins (species).\nThe island they come from (island).\n\nMake sure they are specified as factor in Python!\n\npenguins_data[['species', 'island', 'sex']] = (penguins_data\n                                              .filter(['species', 'island', 'sex'], axis = 1)\n                                              .astype('category')\n)"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#stacked-bar-chart",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#stacked-bar-chart",
    "title": "Multivariable Data",
    "section": "Stacked bar chart",
    "text": "Stacked bar chart\nThe side-by-side bar chart is generated using the .histplot() function, assigning the \\(X\\) variable to the hue argument and setting multiple='stack'.\n\nFor example, to study the distribution of penguin species across the three different islands, we use the following:\n\nplt.figure(figsize=(8, 6))\nsns.histplot(data=penguins_data, x='species', hue='island', \n              multiple='stack')\nplt.title(\"Distribution of Penguin Species by Island\", fontsize=17)\nplt.xlabel(\"Species\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-15",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-15",
    "title": "Multivariable Data",
    "section": "",
    "text": "The chart shows the frequency of each species, separated by island name."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#side-by-side-bar-chart",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#side-by-side-bar-chart",
    "title": "Multivariable Data",
    "section": "Side-by-side bar chart",
    "text": "Side-by-side bar chart\n\nAn alternative to the previous chart is to place the bars side by side for the categories of the \\(X\\) variable.\nIn this case, we use the .countplot() function of seaborn.\n\nplt.figure(figsize=(8, 6))\nsns.countplot(data=penguins_data, x='species', hue='island')\nplt.title(\"Distribution of Penguin Species by Island\", fontsize=17)\nplt.xlabel(\"Species\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#stacked-or-side-by-side",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#stacked-or-side-by-side",
    "title": "Multivariable Data",
    "section": "Stacked or Side-by-Side?",
    "text": "Stacked or Side-by-Side?\n\nThe main difference between stacked and side-by-side bar charts is that the side-by-side chart shows values in separate bars within a category.\nAdvantages of stacked bars:\n\nEasier to understand what proportions of a whole are divided among segments.\nVisually adds up each proportion."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-17",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-17",
    "title": "Multivariable Data",
    "section": "",
    "text": "Advantages of side-by-side bars:\n\nEasier to compare the heights of each individual entity.\nBetter for comparing between groups."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#statistical-summaries",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#statistical-summaries",
    "title": "Multivariable Data",
    "section": "Statistical Summaries",
    "text": "Statistical Summaries\nFor categorical variables, the most common statistical summaries are frequency and relative frequency.\nWith pandas, we calculate frequency using the size(), function, which counts the unique values of one or more variables. We also use groupby() to compute the distribution by categorical variables.\n\ncount_data = (penguins_data\n  .groupby(['island', 'species'], observed = True)\n  .size()\n  .reset_index(name='count')\n  )"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-18",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-18",
    "title": "Multivariable Data",
    "section": "",
    "text": "# Show the result\nprint(count_data)\n\n      island    species  count\n0     Biscoe     Adelie     44\n1     Biscoe     Gentoo    124\n2      Dream     Adelie     56\n3      Dream  Chinstrap     68\n4  Torgersen     Adelie     52"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-19",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-19",
    "title": "Multivariable Data",
    "section": "",
    "text": "To calculate relative frequency, we use assign() along with the lambda, function, which calculates the proportions of a column.\n\nrel_freq_table = (penguins_data\n  .groupby(['island', 'species'], observed = True)\n  .size()\n  .reset_index(name='count')\n  .assign(Proportion = lambda df: df[\"count\"]/df[\"count\"].sum())\n  )\n  \nprint(rel_freq_table)  \n\n      island    species  count  Proportion\n0     Biscoe     Adelie     44    0.127907\n1     Biscoe     Gentoo    124    0.360465\n2      Dream     Adelie     56    0.162791\n3      Dream  Chinstrap     68    0.197674\n4  Torgersen     Adelie     52    0.151163"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#charts-for-three-variables",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#charts-for-three-variables",
    "title": "Multivariable Data",
    "section": "Charts for Three Variables",
    "text": "Charts for Three Variables\n\n\nWhen examining a distribution or relationship, we often want to compare it across data subgroups.\nThis process of conditioning on additional variables leads to visualizations involving three or more variables.\nHere we explain how to create charts to visualize multiple variables."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#scatter-plot-by-color",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#scatter-plot-by-color",
    "title": "Multivariable Data",
    "section": "Scatter plot by color",
    "text": "Scatter plot by color\nFor two numerical variables and one categorical variable.\n\nplt.figure(figsize=(6.2, 4.2))\nsns.scatterplot(data = auto_data, x='weight', y='mpg', hue='origin')\nplt.xlabel(\"Weight (lb)\")\nplt.ylabel(\"Miles per Gallon (MPG)\")\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#faceted-or-lattice-plot",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#faceted-or-lattice-plot",
    "title": "Multivariable Data",
    "section": "Faceted or lattice Plot",
    "text": "Faceted or lattice Plot\nA faceted plot visualizes the relationship or distribution of one or two variables for each subgroup defined by a third variable \\(Z\\).\n\nIdea: Create a chart for each subgroup of \\(Z\\).\n\n\nTo create the plot, use the FacetGrid() function in seaborn with the following syntax:\n\nplt.figure(figsize=(8, 6))\ng = sns.FacetGrid(auto_data, col='origin')\ng.map(sns.scatterplot, 'weight', 'mpg')\ng.set_axis_labels(\"Weight (lb)\", \"Miles per Gallon (MPG)\")\ng.set_titles(\"{col_name} Origin\")\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-20",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-20",
    "title": "Multivariable Data",
    "section": "",
    "text": "The function produces a grid with 1 column and 3 rows of charts. Each row accommodates one category of origin.\n\n\n&lt;Figure size 768x576 with 0 Axes&gt;"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#multiple-line-charts",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#multiple-line-charts",
    "title": "Multivariable Data",
    "section": "Multiple line charts",
    "text": "Multiple line charts\n\nWe can use the functions .lineplot() and FacetGrid() to visualize the evolution of play counts for the 5 songs in the file “spotify.xlsx” over time.\n\nHowever, we need to manipulate the data to obtain the format required by these functions."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#the-required-format",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#the-required-format",
    "title": "Multivariable Data",
    "section": "The required format",
    "text": "The required format\n\nFor a multiple line chart, we need to merge the columns Shape of You, Despacito, Something Just Like This, HUMBLE and Unforgettable into two columns.\nOne column will contain the number of plays, and the other will contain the song title.\nBoth columns will be ordered by the variable Date."
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-21",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-21",
    "title": "Multivariable Data",
    "section": "",
    "text": "To format the data, we use the melt() function from the pandas library.\n\ndata_lines = spotify_data.melt(id_vars=[\"Date\"], \n                                value_vars=[\"Shape of You\", \"Despacito\", \"Something Just Like This\", \"HUMBLE.\", \"Unforgettable\"], \n                                var_name=\"Song\", \n                                value_name=\"Plays\")"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-22",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-22",
    "title": "Multivariable Data",
    "section": "",
    "text": "data_lines.head()\n\n\n\n\n\n\n\n\nDate\nSong\nPlays\n\n\n\n\n0\n2017-01-06\nShape of You\n12287078.0\n\n\n1\n2017-01-07\nShape of You\n13190270.0\n\n\n2\n2017-01-08\nShape of You\n13099919.0\n\n\n3\n2017-01-09\nShape of You\n14506351.0\n\n\n4\n2017-01-10\nShape of You\n14275628.0"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-23",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-23",
    "title": "Multivariable Data",
    "section": "",
    "text": "Now, we apply similar functions to the data_lines object.\n\n\nCode\n# Create the line plot and facet by 'Cancion'\nplt.figure(figsize=(8, 6))\ng = sns.FacetGrid(data_lines, col='Song')\ng.map(sns.lineplot, 'Date', 'Plays')\n\n# Customize the plot\ng.set_axis_labels(\"Date\", \"Plays\")\ng.set_titles(\"{col_name} Song\")\n\n# Rotate the x-axis labels for better readability\nfor ax in g.axes.flat:\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\n# Show the plot\nplt.show()\n\n\n&lt;Figure size 768x576 with 0 Axes&gt;"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#section-24",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#section-24",
    "title": "Multivariable Data",
    "section": "",
    "text": "Or we can plot all lines on a single chart.\n\n\nCode\n# Create the line plot with color mapped to 'Cancion'\nplt.figure(figsize=(7, 5))\nsns.lineplot(x='Date', y='Plays', hue='Song', data=data_lines)\n\n# Customize the plot\nplt.title(\"Plays by Song Over Time\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Plays\")\nplt.xticks(rotation=90)  # Rotate x-axis labels for better readability\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#applying-principle-3-2",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#applying-principle-3-2",
    "title": "Multivariable Data",
    "section": "Applying Principle 3",
    "text": "Applying Principle 3\n\n\nCode\n# Create the line plot with color mapped to 'Cancion'\nplt.figure(figsize=(7.8, 5.8))\nsns.lineplot(x='Date', y='Plays', hue='Song', data=data_lines)\n\n# Customize the plot\nplt.title(\"Plays by Song Over Time\", fontsize = 17)\nplt.xlabel(\"Date\", fontsize = 12)\nplt.ylabel(\"Plays\", fontsize = 12)\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "T5_Multivariate_Data/Multivariate.slides.html#graphs-for-four-variables",
    "href": "T5_Multivariate_Data/Multivariate.slides.html#graphs-for-four-variables",
    "title": "Multivariable Data",
    "section": "Graphs for four variables",
    "text": "Graphs for four variables\nA common chart for four variables is the scatter plot, where the color and size of the symbols depend on two categorical variables.\n\n\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=penguins_data, x='bill_depth_mm', y='bill_length_mm',\n    hue='species', size='island')\nplt.xlabel(\"Bill Depth (mm)\")\nplt.ylabel(\"Bill Length (mm)\")\nplt.title(\"Penguin Bill Dimensions by Species and Island\")\nplt.show()"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#agenda",
    "href": "T1_Introduction/Introduction.slides.html#agenda",
    "title": "What is Data Visualization?",
    "section": "Agenda",
    "text": "Agenda\n\n\nIntroduction to data science\nThree principles of data visualization\nActivity\nStorytelling for data visualization"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#data-science-is",
    "href": "T1_Introduction/Introduction.slides.html#data-science-is",
    "title": "What is Data Visualization?",
    "section": "Data science is …",
    "text": "Data science is …\na multidisciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge and insights from vast amounts of structured and unstructured data."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#the-scheme-of-data-science",
    "href": "T1_Introduction/Introduction.slides.html#the-scheme-of-data-science",
    "title": "What is Data Visualization?",
    "section": "The scheme of data science",
    "text": "The scheme of data science\n\n\nProvost, F., & Fawcett, T. (2013). Data Science for Business: What you need to know about data mining and data-analytic thinking. O’Reilly Media, Inc."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#business-understanding",
    "href": "T1_Introduction/Introduction.slides.html#business-understanding",
    "title": "What is Data Visualization?",
    "section": "Business understanding",
    "text": "Business understanding\n\n\nBusiness understanding refers to defining the business problem to be solved.\nThe goal is to reframe the business problem as a data science problem.\nOften, reframing the problem and designing a solution is an iterative process."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#data-understanding",
    "href": "T1_Introduction/Introduction.slides.html#data-understanding",
    "title": "What is Data Visualization?",
    "section": "Data understanding",
    "text": "Data understanding\n\n\nIf the goal is to solve a business problem, the data that makes up the raw material available from which the solution will be built.\nThe available data rarely matches the problem.\nFor example, historical data is often collected for purposes unrelated to the current business problem or for no explicit purpose at all.\n\n\n\n\nOur goal is to turn data into information that answers useful questions."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#data-types",
    "href": "T1_Introduction/Introduction.slides.html#data-types",
    "title": "What is Data Visualization?",
    "section": "Data types",
    "text": "Data types\n\n\n\nText\n\n\nImages\n\nVideo\n\n\nAudio"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#numerical-data",
    "href": "T1_Introduction/Introduction.slides.html#numerical-data",
    "title": "What is Data Visualization?",
    "section": "Numerical data",
    "text": "Numerical data\n\nData science methodology is based on numerical data given in tables.\n\n\nIn fact, texts, images, videos or audios are transformed into this format to process them.\n\n\nIn this course, we will assume that the data is in a table."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#problem-situation",
    "href": "T1_Introduction/Introduction.slides.html#problem-situation",
    "title": "What is Data Visualization?",
    "section": "Problem situation",
    "text": "Problem situation\n\nFood pricing inequality is a crucial issue affecting access to affordable and nutritious food, particularly in New York City.\nPrevious work has suggested that the price of food sold at supermarkets may vary according to the socioeconomic characteristics of a neighborhood.\nGiven the importance of food prices in securing access to food, understanding how food prices vary across neighborhoods is crucial to assessing affordability."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#goal-of-the-problem-situation",
    "href": "T1_Introduction/Introduction.slides.html#goal-of-the-problem-situation",
    "title": "What is Data Visualization?",
    "section": "Goal of the problem situation",
    "text": "Goal of the problem situation\n\n\nThis problem situation concerns the creation of a poster that studies the disparities in the prices of food products across the neighborhoods in New York City.\n\n\n\nTo this end, you will have two datasets with data about food prices of a sample of supermarkets and statistics of the neighborhoods where they are located."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#what-is-data-visualization",
    "href": "T1_Introduction/Introduction.slides.html#what-is-data-visualization",
    "title": "What is Data Visualization?",
    "section": "What is data visualization?",
    "text": "What is data visualization?\n\n“A visualization [of data] is any visual presentation intended to reveal evidence, making the invisible visible.” Alberto Cairo (2015)."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section",
    "href": "T1_Introduction/Introduction.slides.html#section",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "https://www.nytimes.com/2019/02/28/learning/whats-going-on-in-this-graph-march-6-2019.html"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-1",
    "href": "T1_Introduction/Introduction.slides.html#section-1",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "https://www.nytimes.com/2018/09/18/learning/whats-going-on-in-this-graph-sept-19-2018.html"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-2",
    "href": "T1_Introduction/Introduction.slides.html#section-2",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "https://www.nytimes.com/2018/10/16/learning/whats-going-on-in-this-graph-oct-17-2018.html"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-3",
    "href": "T1_Introduction/Introduction.slides.html#section-3",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "At its core, data visualization allows you to delve into complex datasets to extract meaningful insights using graphical displays.\n\nData visualizations are primarily concerned with providing evidence and enabling the audience to explore and draw their own conclusions about what the visualizations reveal about the data.\n\n\nData visualization has 3 key principles…\n\nAs data scientists, we create data visualizations in order to understand our data and explain our analyses to other people. A plot should have a message, and it’s our job to communicate this message as clearly as possible."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#principle-1-define-the-message-or-question",
    "href": "T1_Introduction/Introduction.slides.html#principle-1-define-the-message-or-question",
    "title": "What is Data Visualization?",
    "section": "Principle 1: Define the Message or Question",
    "text": "Principle 1: Define the Message or Question\n\nFormulate the question of interest or the message you want to convey.\n\n\n\n\n\n\n\n\n\n\n\nEl mensaje puede ser una pregunta\n\nWhat is the key comparison?\nHow do we emphasize it?\nDo you have reason to expect that one group/observation might be different?\nWhy might your finding about shape matter?\nWhat additional comparison might add value to the investigation?\nAre there any potentially important features to compare against?"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#principle-2-turn-data-into-information",
    "href": "T1_Introduction/Introduction.slides.html#principle-2-turn-data-into-information",
    "title": "What is Data Visualization?",
    "section": "Principle 2: Turn Data into Information",
    "text": "Principle 2: Turn Data into Information\nYour graph should use data to convey the message or answer the question. In other words, it should transform data into information.\n\n\nEnhance your graph with color symbols and text to convey additional information."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#principle-3-apply-graphic-design-principles",
    "href": "T1_Introduction/Introduction.slides.html#principle-3-apply-graphic-design-principles",
    "title": "What is Data Visualization?",
    "section": "Principle 3: Apply Graphic Design Principles",
    "text": "Principle 3: Apply Graphic Design Principles\n\n\n\n\n\n\n\nObjects are easily identifiable by color.\nUse direct labels instead of a legend.\nElements such as text, lines, and shapes of the same nature should look similar.\nBalance graphics and text.\nBe cautious with default settings in visualization software.\nUse a grid-based layout to organize your visualization.\n\n\n\n\n\n\n\n\n\n\n\n\nDon’t limit yourself to simple elements. Enhance your graph with color symbols to convey additional information. If possible, add context with markers and reference labels.\nAdditionally, include a legend in the graph that describes key features and summarizes its conclusions."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#example",
    "href": "T1_Introduction/Introduction.slides.html#example",
    "title": "What is Data Visualization?",
    "section": "Example",
    "text": "Example\n\nPrinciple 1: It is cheaper to take Uber than to own a car in four of the five largest cities in the USA.\n\n\n\n\nWeekly cost (in USD) of daily commuting\n\n\nCity\nUber\nAuto\n\n\n\n\nNew York City\n142\n218\n\n\nWashington D.C.\n96\n130\n\n\nChicago\n77\n116\n\n\nLos Angeles\n62\n89\n\n\nDallas\n181\n65\n\n\n\n\n\n\n\nThe estimated costs are based on a twice-daily 10.4 mile one-way commute at peak times over the course of a week using either the UberPool option (where available) or alternatively UberX vs the cost of using a personal vehicle (including any associated costs of ownership). Study conducted in February 2017."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-4",
    "href": "T1_Introduction/Introduction.slides.html#section-4",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "Principle 2: Turn data into information."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-5",
    "href": "T1_Introduction/Introduction.slides.html#section-5",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "Principle 3: Apply Graphic Design Principles."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-6",
    "href": "T1_Introduction/Introduction.slides.html#section-6",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "“The greatest value of a picture is when it forces us to notice what we never expected to see.” John W. Tukey.\n\n\n\n\n\nhttps://www.storytellingwithdata.com/ is an excellent guide on data visualization."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#activity-cooperative-mode",
    "href": "T1_Introduction/Introduction.slides.html#activity-cooperative-mode",
    "title": "What is Data Visualization?",
    "section": "Activity (cooperative mode)",
    "text": "Activity (cooperative mode)\n\nGet together with a partner.\nFind a good and a bad example of a visualization (chart) online.\nSave the visualizations (for example, by taking a screenshot).\nWrite a short critique (3-4 sentences) of each visualization.\nUpload a document with your critiques and images to Canvas."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#why-storytelling-matters-in-data-visualization",
    "href": "T1_Introduction/Introduction.slides.html#why-storytelling-matters-in-data-visualization",
    "title": "What is Data Visualization?",
    "section": "Why storytelling matters in data visualization",
    "text": "Why storytelling matters in data visualization\n\nRaw data alone is not enough—insights must be communicated effectively.\nDecision-makers rely on clear, engaging, and meaningful presentations of data.\nGood storytelling connects data to real-world problems and solutions.\n\n\nFor example, a simple bar chart can be enhanced by context and narrative to explain a business trend or social issue."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-7",
    "href": "T1_Introduction/Introduction.slides.html#section-7",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "“The most powerful person in the world is the storyteller.” – Steve Jobs"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#the-three-components-of-a-data-story",
    "href": "T1_Introduction/Introduction.slides.html#the-three-components-of-a-data-story",
    "title": "What is Data Visualization?",
    "section": "The Three Components of a Data Story",
    "text": "The Three Components of a Data Story\n\nData (What?)\n\n\nThe foundation—collected, cleaned, and analyzed.\nProvides objective evidence to support claims.\n\n\nVisuals (How?)\n\n\nGraphs, charts, and maps help translate numbers into meaningful insights.\nGood design guides the audience to the key message."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-8",
    "href": "T1_Introduction/Introduction.slides.html#section-8",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "Narrative (Why?)\n\n\nPuts data into context—explains the significance of findings.\nAnswers: Why does this matter? Who is affected? What should be done?"
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#structuring-a-data-story",
    "href": "T1_Introduction/Introduction.slides.html#structuring-a-data-story",
    "title": "What is Data Visualization?",
    "section": "Structuring a data story",
    "text": "Structuring a data story\n\nIntroduction (Set the Stage) 📌\n\n\nDefine the problem or question you’re addressing.\nProvide relevant background or context.\n\n\n\nMain Findings (Show the Data) 📊\n\n\nUse effective visuals (histograms, box plots, line charts, scatter plots, etc.).\nHighlight key trends, comparisons, and relationships."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-9",
    "href": "T1_Introduction/Introduction.slides.html#section-9",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "Insights & Implications (So What?) 💡\n\n\nExplain why the findings matter.\nSuggest potential actions or decisions based on the insights.\n\n\nFor example: A study on food pricing inequality might start with disparities in NYC, show visualizations comparing food prices across neighborhoods, and conclude with recommendations for policymakers."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#best-practices-for-storytelling",
    "href": "T1_Introduction/Introduction.slides.html#best-practices-for-storytelling",
    "title": "What is Data Visualization?",
    "section": "Best practices for storytelling",
    "text": "Best practices for storytelling\n\n\nKnow Your Audience – Tailor the message to decision-makers, engineers, or the public.\nKeep it Simple – Avoid unnecessary complexity; clarity is key.\nUse the Right Visuals – Choose the best chart type for your message.\nEmphasize Key Takeaways – Bold the most important insights.\nCreate a Narrative Flow – Guide the audience through the story step by step."
  },
  {
    "objectID": "T1_Introduction/Introduction.slides.html#section-10",
    "href": "T1_Introduction/Introduction.slides.html#section-10",
    "title": "What is Data Visualization?",
    "section": "",
    "text": "https://www.amazon.com/Even-Geek-Speak-Joey-Asher/dp/0978577604"
  }
]