{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Numerical Variables\"\n",
        "subtitle: \"IN2039: Data Visualization for Decision Making\"\n",
        "author: \n",
        "  - name: Alan R. Vazquez\n",
        "    affiliations:\n",
        "      - name: Department of Industrial Engineering\n",
        "format: \n",
        "  revealjs:\n",
        "    chalkboard: false\n",
        "    multiplex: true\n",
        "    footer: \"Tecnologico de Monterrey\"\n",
        "    logo: IN2039_logo.png\n",
        "    css: style.css\n",
        "    slide-number: True\n",
        "    html-math-method: mathjax\n",
        "editor: visual\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## Agenda\n",
        "\n",
        "</br>\n",
        "\n",
        "1.  Introduction to the example\n",
        "2.  Summary statistics\n",
        "3.  Graphs for numerical variables\n",
        "\n",
        "## Example\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"70%\"}\n",
        "A piston is a mechanical device found in most engines.\n",
        ":::\n",
        "\n",
        "::: {.column width=\"30%\"}\n",
        "![](images/clipboard-545995500.png){width=\"402\"}\n",
        ":::\n",
        ":::::\n",
        "\n",
        "One measure of a piston's performance is the time it takes to complete a cycle, which we call \"cycle time\" and is measured in seconds.\n",
        "\n",
        "The file \"CYLT.xlsx\" contains 50 cycle times of a piston operating under fixed conditions.\n",
        "\n",
        "## Remember to import the required libraries\n",
        "\n",
        "</br>\n",
        "\n",
        "We will use the libraries `pandas`, `matplotlib`, and `seaborn`.\n",
        "\n",
        "</br>\n",
        "\n",
        "Let's load them in Google Colab before we start.\n"
      ],
      "id": "6289efd6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "id": "9733d91a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Load the data\n",
        "\n",
        "In Google Colab, the file \"CYLT.xlsx\" should be placed in a folder called \"Files\".\n"
      ],
      "id": "e6beb0d8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "piston_data = pd.read_excel(\"CYCLT.xlsx\")\n",
        "piston_data.head()"
      ],
      "id": "82e0327a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Variable type\n",
        "\n",
        "</br>\n",
        "\n",
        "In Python, numerical data is stored as `float64`.\n"
      ],
      "id": "587b17d9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "\n",
        "piston_data.info()"
      ],
      "id": "74b6caad",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We can see that Python recognizes our data correctly.\n",
        "\n",
        "# Summary statistics\n",
        "\n",
        "## Summary statistic\n",
        "\n",
        "> Helps us to summarize a list of observations in a simple way.\n",
        "\n",
        "For **numerical** data, the most popular summary statistics are:\n",
        "\n",
        "::: incremental\n",
        "-   [Mean]{style=\"color:darkblue;\"}\n",
        "-   [Variance]{style=\"color:darkblue;\"} and [standard deviation]{style=\"color:darkblue;\"}\n",
        "-   [Quartiles]{style=\"color:darkgreen;\"}\n",
        "-   Maximum and minimum\n",
        ":::\n",
        "\n",
        "## Mean\n",
        "\n",
        "> Indicates the center of the data.\n",
        "\n",
        "</br>\n",
        "\n",
        "Let $y_1, y_2, \\ldots, y_n$ be an observed sample of size $n$.\n",
        "\n",
        "The mean is\n",
        "\n",
        "$$\\bar{y} = \\frac{1}{n}\\sum_{i=1}^{n} y_i = \\frac{y_1 + y_2 + \\cdots + y_n}{n}.$$\n",
        "\n",
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "In Python, we can calculate the mean using chaining. To this end, we use the function `.agg()` with \"mean\".\n"
      ],
      "id": "a27aa2b5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "piston_data_mean = (piston_data\n",
        "                    .agg(\"mean\")\n",
        "                   )\n",
        "piston_data_mean"
      ],
      "id": "4e2384e3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "You can also round the result to, say, two decimals using the function `round()`.\n"
      ],
      "id": "59127bf2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "piston_data_mean = (piston_data\n",
        " .agg(\"mean\")\n",
        ")\n",
        "round(piston_data_mean, 2)"
      ],
      "id": "5d33057b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "[*Interpretation:*]{style=\"color:darkgray;\"} On average, the piston takes 0.652 seconds to complete a cycle.\n",
        "\n",
        "## Variance\n",
        "\n",
        "> Indicates how spread out the data are around the mean.\n",
        "\n",
        "</br>\n",
        "\n",
        "Let $y_1, y_2, \\ldots, y_n$ be an observed sample of size $n$. The variance is\n",
        "\n",
        "$$\n",
        "s^2 = \\frac{1}{n-1} \\sum_{i=1}^{n} (y_i - \\bar{y})^2 = \\frac{(y_1 - \\bar{y})^2  + \\cdots + (y_n - \\bar{y})^2}{n-1}\n",
        "$$\n",
        "\n",
        ". . .\n",
        "\n",
        "*The variance is like an average of the squared differences between each observation and the mean.*\n",
        "\n",
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "In Python, the variance is calculated using `.agg()` with \"var\".\n"
      ],
      "id": "b828e716"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "piston_data_var = (piston_data\n",
        "                  .agg(\"var\")\n",
        "                  )\n",
        "round(piston_data_var, 3)"
      ],
      "id": "25ccca1e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "[*Interpretation:*]{style=\"color:darkgray;\"} The variance of the piston cycle times is 0.139. *A larger variance means greater dispersion of the data around the mean.*\n",
        "\n",
        "## Standard deviation\n",
        "\n",
        "A drawback of the variance is that it is not on the same scale as the actual observations.\n",
        "\n",
        "To obtain a measure of spread whose units are the same as those of the sample, we simply take the squared root of the variance\n",
        "\n",
        "$$\n",
        "s = \\left(\\frac{1}{n-1} \\sum_{i=1}^{n} (y_i - \\bar{y})^2 \\right)^{1/2}\n",
        "$$\n",
        "\n",
        "This quantity is known as the standard deviation. [*It is in the same units as the observations*]{style=\"color:purple;\"}.\n",
        "\n",
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "In Python, the standard deviation is calculated using the the function `.agg()` and with \"std\".\n"
      ],
      "id": "4c3da09e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "piston_data_sd = (piston_data\n",
        "                  .agg(\"std\")\n",
        "                 )\n",
        "round(piston_data_sd, 3)"
      ],
      "id": "cd0d59c4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "[*Interpretation:*]{style=\"color:darkgray;\"} On average, a piston takes 0.652 seconds to complete a cycle, with a variation of $\\pm$ 0.373 seconds.\n",
        "\n",
        "## Quartiles\n",
        "\n",
        "The [**median**]{style=\"color:darkgreen;\"} is the middle number of the ordered data values.\n",
        "\n",
        ". . .\n",
        "\n",
        "[**Quartiles**]{style=\"color:darkgreen;\"} divide the data as nearly as possible into quarters:\n",
        "\n",
        "::: incremental\n",
        "-   First quartile ($Q_1$) is the median of the lower half of the data.\n",
        "\n",
        "-   Second quartile ($Q_2$) is the median of the data.\n",
        "\n",
        "-   Third quartile ($Q_3$) is the median of the upper half of the data.\n",
        ":::\n",
        "\n",
        "## \n",
        "\n",
        "</br></br>\n",
        "\n",
        "![](images/clipboard-1950324610.png)\n",
        "\n",
        "</br>\n",
        "\n",
        "The generalization of quartiles are percentiles or **quantiles**.\n",
        "\n",
        "## \n",
        "\n",
        "In Python, the quartiles are calculated using the function `.agg()` with \"quantile\".\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"60%\"}"
      ],
      "id": "9360fb50"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Set the quantiles.\n",
        "set_quantiles = [0.25, 0.5, 0.75]\n",
        "# Compute the quantiles.\n",
        "(piston_data\n",
        " .agg(\"quantile\", q = set_quantiles)\n",
        ")"
      ],
      "id": "be5fe264",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"40%\"}\n",
        "[*Interpretation:*]{style=\"color:darkgray;\"}\n",
        "\n",
        "-   25% of cycle times are below 0.305 sec.\n",
        "\n",
        "-   50% of cycle times are below 0.546 sec.\n",
        "\n",
        "-   75% of cycle times are below 1.07 sec.\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## Maximum and minimum\n",
        "\n",
        "We compute the **maximum** and **minimum** using `.agg()` with \"max\" and \"min\", respectively.\n"
      ],
      "id": "f84cbf4c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "(piston_data\n",
        " .agg(\"max\")\n",
        ")"
      ],
      "id": "7b94673a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "[*Interpretation:*]{style=\"color:darkgray;\"} The maximum cycle time is 1.14 seconds.\n"
      ],
      "id": "56d586bb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "(piston_data\n",
        " .agg(\"min\")\n",
        ")"
      ],
      "id": "7775db51",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "[*Interpretation:*]{style=\"color:darkgray;\"} The minimum cycle time is 0.175 seconds.\n",
        "\n",
        "## Mean vs. Median\n",
        "\n",
        "</br>\n",
        "\n",
        "The mean and median estimate the central value of the data in different ways.\n",
        "\n",
        "-   The mean is the sum of the values divided by the total.\n",
        "\n",
        "-   The median is the central value of an ordered set of data.\n",
        "\n",
        "## When do we use the mean?\n",
        "\n",
        "</br>\n",
        "\n",
        "The mean is used when the data is symmetrically or evenly distributed and there are no significant outliers.\n",
        "\n",
        "</br>\n",
        "\n",
        "For example, the height of a large sample of people in a homogeneous population.\n",
        "\n",
        "## When do we use the median?\n",
        "\n",
        "</br>\n",
        "\n",
        "The median is used when there are outliers that could skew the mean.\n",
        "\n",
        "For example:\n",
        "\n",
        "-   Annual household income in a country (where there are a few billionaires who distort the mean).\n",
        "\n",
        "-   House prices in a city (where a few very expensive properties can inflate the mean).\n",
        "\n",
        "## Activity (*solo* mode) Part 1\n",
        "\n",
        "A company that manufactures capacitor retaining bolts for automobile engines implemented a quality control system. As part of this quality control system, a team of engineers decided to record the number of nonconforming bolts produced each shift.\n",
        "\n",
        "The file `bolts.xlsx` contains the number of non-conforming bolts during the last 45 shifts.\n",
        "\n",
        "-   Calculate and interpret the mean, variance, standard deviation, quartiles, minimum and maximum.\n",
        "\n",
        "# Data visualizations for numerical variables\n",
        "\n",
        "## Principle 1\n",
        "\n",
        "> Formulate the question of interest.\n",
        "\n",
        ". . .\n",
        "\n",
        "</br>\n",
        "\n",
        "Typical questions about a numeric variable $X$ are:\n",
        "\n",
        "::: incremental\n",
        "-   What is the shape of the observations of the variable $X$?\n",
        "\n",
        "-   Are there atypical observations in the variable $X$?\n",
        "\n",
        "-   Does the shape of the observations of the variable $X$ resemble a bell?\n",
        ":::\n",
        "\n",
        "## Principle 2\n",
        "\n",
        "> Transform data into information.\n",
        "\n",
        ". . .\n",
        "\n",
        "</br>\n",
        "\n",
        "Two common types of graphs to visualize a numerical variable are:\n",
        "\n",
        "-   Histogram\n",
        "-   Box plot\n",
        "\n",
        ". . .\n",
        "\n",
        "Basically, they are different ways of visualizing the \"shape\" or [*distribution*]{style=\"color:darkred;\"} of the variable.\n",
        "\n",
        "## Histogram\n",
        "\n",
        "Visualizes the distribution of observations, indicating regions where observations are concentrated or sparse.\n",
        "\n",
        ". . .\n",
        "\n",
        "It is built using a ***frequency table***.\n",
        "\n",
        "1.  Define a maximum number of intervals or *bins* (from 5 to 30).\n",
        "2.  Define the ranges of the intervals.\n",
        "3.  Group the observations in the interval to which they belong.\n",
        "\n",
        ". . .\n",
        "\n",
        "Python automatically calculates the frequency table for numerical data. The histogram is a visualization of this table.\n",
        "\n",
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "To create a histogram, we use the function `histplot()` from **seabron**.\n"
      ],
      "id": "4f04c375"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "#| echo: true\n",
        "\n",
        "plt.figure(figsize=(10, 4))\n",
        "sns.histplot(data = piston_data, x = \"cycle_time\")\n",
        "plt.show() "
      ],
      "id": "81cfc52f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: notes\n",
        "The bars of the histogram touch each other. A gap indicates that there are no observations in that interval.\n",
        ":::\n",
        "\n",
        "## Improving the graph\n",
        "\n",
        "To convey a better message, we apply *Principle 3: Apply the principles of graphic design.*\n"
      ],
      "id": "15763100"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "#| echo: true\n",
        "#| code-fold: true\n",
        "\n",
        "plt.figure(figsize=(10, 4))\n",
        "sns.histplot(data = piston_data, x = \"cycle_time\", edgecolor = \"black\", \n",
        "             color = \"pink\")\n",
        "plt.title(\"Histogram of Cycle Time: Data from 50 pistons\")\n",
        "plt.xlabel(\"Cycle Time (seconds)\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ],
      "id": "110a385d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## It is not the same as a bar chart\n",
        "\n",
        "</br>\n",
        "\n",
        "With categorical data, a bar chart looks similar to a histogram because it displays the frequency of categories.\n",
        "\n",
        "However, we cannot interpret the shape of a bar chart in the same way as a histogram.\n",
        "\n",
        "1.  The frequency of a category is represented by the height of the bar, and the width does not contain any information.\n",
        "\n",
        "2.  A bar chart will not highlight outliers.\n",
        "\n",
        "::: notes\n",
        "Tails and symmetry do not make sense in this setting.\n",
        ":::\n",
        "\n",
        "## Number of bins\n",
        "\n",
        "-   The number of bins is a parameter of the histogram that affects its appearance.\n",
        "\n",
        "This is set using the argument `bins` in `histplot()`.\n"
      ],
      "id": "29ce6c65"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| fig-align: center\n",
        "\n",
        "plt.figure(figsize=(5, 3))\n",
        "sns.histplot(data = piston_data, x = \"cycle_time\", bins = 5)\n",
        "plt.show()"
      ],
      "id": "26334b19",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "[The left histogram uses `bins = 5`, and the right histogram uses `bins = 30`]{style=\"font-size: 100%;\"}\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "3f60fcc6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| code-fold: true\n",
        "\n",
        "plt.figure(figsize=(5, 4))\n",
        "sns.histplot(data=piston_data, x=\"cycle_time\", bins=5, \n",
        "             edgecolor=\"black\", color=\"pink\")\n",
        "plt.title(\"Histogram of Cycle Time\")\n",
        "plt.xlabel(\"Cycle Time (seconds)\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ],
      "id": "0e38841e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "661efb41"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-pos: center\n",
        "#| code-fold: true\n",
        "\n",
        "plt.figure(figsize=(5, 4))\n",
        "sns.histplot(data=piston_data, x=\"cycle_time\", bins=30, \n",
        "             edgecolor=\"black\", color=\"pink\")\n",
        "plt.title(\"Histogram of Cycle Time\")\n",
        "plt.xlabel(\"Cycle Time (seconds)\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ],
      "id": "0de6e5f4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "\n",
        "In this course, we will use the default number of `bins`.\n",
        "\n",
        "::: notes\n",
        "A histogram is a familiar type of plot that involves smoothing. A histogram aggregates data values by placing points into bins and plotting one bar for each bin. Smoothing here means that we cannot differentiate the location of individual points within a bin: the points are smoothly distributed across their bins.\n",
        ":::\n",
        "\n",
        "## What to look for in a histogram?\n",
        "\n",
        "</br>\n",
        "\n",
        "-   Symmetry and asymmetry of the distribution\n",
        "-   The number, location, and size of high-frequency regions (bins)\n",
        "-   Gaps where no values are observed\n",
        "-   Unusually large or anomalous values\n",
        "-   A [**bell-shaped**]{style=\"color:#1e3f5a;\"} form\n",
        "\n",
        "## The obsession with bell curves\n",
        "\n",
        "</br>\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "The **normal distribution** is a very important probability distribution in statistics.\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](images/clipboard-2759719598.png)\n",
        ":::\n",
        ":::::\n",
        "\n",
        "It is characterized by a symmetric bell-shaped curve centered around its mean, with the highest probability density at the mean and decreasing symmetrically towards the extremes\n",
        "\n",
        "## \n",
        "\n",
        "Basically, if your observations follow a normal distribution, you can use statistical methods to draw conclusions based on mathematical theory.\n",
        "\n",
        "![](images/clipboard-983817526.png){fig-align=\"center\" width=\"554\" height=\"278\"}\n",
        "\n",
        "[*What many people don't know is that this condition is only needed if you have few observations (less than 50).*]{style=\"color:darkred;\"}\n",
        "\n",
        "## Boxplot\n",
        "\n",
        "</br>\n",
        "\n",
        "A boxplot helps us visualize the distribution of observations using quartiles.\n",
        "\n",
        ". . .\n",
        "\n",
        "> It is very effective for detecting \"outliers.\"\n",
        "\n",
        ". . .\n",
        "\n",
        "An important component of the boxplot is the **interquartile range** (*IQR*), which is the difference between the third quartile and the first quartile ($Q_3 - Q_1$).\n",
        "\n",
        ". . .\n",
        "\n",
        "The interquartile range is the distance needed to encompass the middle half of the data.\n",
        "\n",
        "## Anatomy of a Box Plot\n",
        "\n",
        "![](images/clipboard-84021266.png){fig-align=\"center\"}\n",
        "\n",
        "Learn more here <https://builtin.com/articles/1-5-iqr-rule>\n",
        "\n",
        "## Outliers\n",
        "\n",
        "</br>\n",
        "\n",
        "-   Outliers are points that are much larger or smaller than the rest of the sample points.\n",
        "\n",
        "-   Outliers may be data entry errors or they may be points that really are different from the rest.\n",
        "\n",
        "-   Outliers should not be deleted without considerable thought—sometimes calculations and analyses will be done with and without outliers and then compared.\n",
        "\n",
        "## Boxplot in Python\n",
        "\n",
        "</br>\n",
        "\n",
        "To create a boxplot in **seaborn**, use the `boxplot()` function.\n"
      ],
      "id": "9f4c3db1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "#| output: true\n",
        "#| echo: true\n",
        "\n",
        "plt.figure(figsize=(5, 4))\n",
        "sns.boxplot(piston_data, y = \"cycle_time\")\n",
        "plt.show()"
      ],
      "id": "23b18c1e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "If we specify the variable in the `x` argument, we get a horizontal boxplot.\n"
      ],
      "id": "817a496b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "#| output: true\n",
        "#| echo: true\n",
        "\n",
        "plt.figure(figsize=(5, 4))\n",
        "sns.boxplot(piston_data, x = \"cycle_time\")\n",
        "plt.show()"
      ],
      "id": "daa9b052",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Activity (*solo* mode) Part 2\n",
        "\n",
        "</br>\n",
        "\n",
        "The file `bolts.xlsx` contains the number of non-conforming bolts during the last 45 shifts. Using Python, create the following graphs\n",
        "\n",
        "-   Histogram\n",
        "-   Boxplot\n",
        "\n",
        "# [Return to main page](https://alanrvazquez.github.io/TEC-IN2039-EN/)"
      ],
      "id": "70ad9ce7"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/alanvazquez/Documents/GitHub/TEC-IN2039-EN/env/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}