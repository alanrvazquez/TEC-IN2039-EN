---
title: "Numerical Variables"
subtitle: "IN2039: Data Visualization for Decision Making"
author: 
  - name: Alan R. Vazquez
    affiliations:
      - name: Department of Industrial Engineering
format: 
  revealjs:
    chalkboard: false
    multiplex: true
    footer: "Tecnologico de Monterrey"
    logo: IN2039_logo.png
    css: style.css
    slide-number: True
    html-math-method: mathjax
editor: visual
jupyter: python3
---

## Agenda

1.  Introduction to the example
2.  Summary statistics
3.  Graphs for numerical variables

## Example

::::: columns
::: {.column width="70%"}
A piston is a mechanical device found in most engines.
:::

::: {.column width="30%"}
![](images/clipboard-545995500.png){width="402"}
:::
:::::

One measure of a piston's performance is the time it takes to complete a cycle, which we call "cycle time" and is measured in seconds.

The file "CYLT.xlsx" contains 50 cycle times of a piston operating under fixed conditions.

## Remember to Import the Required Libraries

We will use the libraries `pandas`, `matplotlib`, and `seaborn`.

Let's load them in Google Colab before we start.

```{python}
#| echo: true
#| output: false

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
```

## Load the data

In Google Colab, the file "CYLT.xlsx" should be placed in a folder called "content" or "contenido".

```{python}
# Load the data
piston_data = pd.read_excel("CYCLT.xlsx")
# View the first 6 observations
piston_data.head()
```

## Variable Type

In Python, numerical data is stored as `float64`.

```{python}
#| output: true
#| echo: false

piston_data.info()

```

We can see that Python recognizes our data correctly.

# Summary statistics

## Summary statistic

> Helps us to summarize a list of observations in a simple way.

For **numerical** data, the most popular summary statistics are:

::: incremental
-   [Sample mean]{style="color:darkblue;"}
-   [Sample variance]{style="color:darkblue;"} and [sample standard deviation]{style="color:darkblue;"}
-   [Sample quartiles]{style="color:darkgreen;"}
-   Sample maximum and minimum
:::

## Sample mean

> Indicates the center of the data.

Let $y_1, y_2, \ldots, y_n$ be an observed sample of size $n$.

The sample mean is

$$\bar{y} = \frac{1}{n}\sum_{i=1}^{n} y_i = \frac{y_1 + y_2 + \cdots + y_n}{n}.$$

## 

In python, we calculate the sample mean using the function `mean()`.

```{python}
#| echo: true
#| output: true

piston_data_mean = piston_data["cycle_time"].mean()
print(piston_data_mean)
```

We use the function print to show the number. Otherwise, python will show the computer type of value stored in `piston_data_mean`.

## 

You can also round the result to, say, three decimals.

```{python}
#| echo: true
#| output: true

print( round(piston_data_mean, 3) )
```

**Interpretation**: On average, the piston takes 0.652 seconds to complete a cycle.

## Sample variance

> Indicates how spread out the data are around the mean.

Let $y_1, y_2, \ldots, y_n$ be an observed sample of size $n$. The sample mean is

$$
s^2 = \frac{1}{n-1} \sum_{i=1}^{n} (y_i - \bar{y})^2 = \frac{(y_1 - \bar{y})^2  + \cdots + (y_n - \bar{y})^2}{n-1}
$$

. . .

*The sample variance is like an average of the squared differences between each observation and the sample mean.*

## 

In python, the sample variance is calculated using the function `var()`.

```{python}
#| echo: true
#| output: true

piston_data_var = piston_data["cycle_time"].var()
print( round(piston_data_var, 3))
```

*Interpretation*: The variance of the piston cycle times is 0.139. A larger variance means greater dispersion of the data around the mean.

## Sample standard deviation

A drawback of the sample variance is that it is not on the same scale as the actual observations.

To obtain a measure of spread whose units are the same as those of the sample, we simply take the squared root of the sample variance

$$
s = \left(\frac{1}{n-1} \sum_{i=1}^{n} (y_i - \bar{y})^2 \right)^{1/2}
$$

This quantity is known as the sample standard deviation. [*It is in the same units as the observations*]{style="color:purple;"}.

## 

In python, the sample variance is calculated using the function `std()`.

```{python}
#| echo: true
#| output: true

piston_data_std = piston_data["cycle_time"].std()
print(round(piston_data_std,3))
```

**Interpretation**: On average, a piston takes 0.652 seconds to complete a cycle, with a variation of $\pm 0.373$ seconds.

## Sample quartiles

The [**sample median**]{style="color:darkgreen;"} is the middle number of the ordered data values.

. . .

[**Sample quartiles**]{style="color:darkgreen;"} divide the data as nearly as possible into quarters:

::: incremental
-   First quartile ($Q_1$) is the median of the lower half of the data.

-   Second quartile ($Q_2$) is the median of the data.

-   Third quartile ($Q_3$) is the median of the upper half of the data.
:::

## 

</br></br>

![](images/clipboard-838628209.png)

## 

In python, the quartiles are calculated using the function `quantile()`.

```{python}
#| echo: true
#| output: true

# Set the quantiles.
set_quantiles = [0.25, 0.5, 0.75]
# Compute the quantiles.
piston_data["cycle_time"].quantile(set_quantiles)
```

**Interpretation**:

- 25% of cycle times are below 0.305 sec.

- 50% of cycle times are below 0.546 sec.

- 75% of cycle times are below 1.07 sec.

## Sample maximum and minimum

We compute the **maximum** and **minimum** using the functions `max()` and `min()`, respectively.

```{python}
#| echo: true
#| output: true

piston_data_max = piston_data["cycle_time"].max()
print(piston_data_max)
```

</br>

```{python}
#| echo: true
#| output: true

piston_data_min = piston_data["cycle_time"].min()
print(piston_data_min)
```

**Interpretation**:

- The maximum cycle time is 1.14 seconds.

- The minimum cycle time is 0.175 seconds.

## Average vs. Median

The average and median estimate the central value of the data in different ways.

- The average is the sum of the values divided by the total.

- The median is the central value of an ordered set of data.

## When do we use the average?

The average is used when the data is symmetrically or evenly distributed and there are no significant outliers.

For example, the height of a large sample of people in a homogeneous population.

## When do we use the median?

The median is used when there are outliers that could skew the mean.

For example:

- Annual household income in a country (where there are a few billionaires who distort the mean).

- House prices in a city (where a few very expensive properties can inflate the mean).

## Activity (*only* mode) Part 1

A company that manufactures capacitor retaining bolts for automobile engines implemented a quality control system. As part of this quality control system, a team of engineers decided to record the number of nonconforming bolts produced each shift.

The file `bolts.xlsx` contains the number of non-conforming bolts during the last 45 shifts.

- Calculates and interprets the average, variance, standard deviation, quartiles, minimum and maximum.


# Data visualizations for numerical variables



## Histogram

</br></br>

Graphical display that gives an idea of the “shape” of the sample, indicating regions where sample points are concentrated and regions where they are sparse.

</br>

The bars of the histogram touch each other. A space indicates that there are no observations in that interval.

## Histogram of Na

To create a histogram, we use the function `histplot()` from **seabron**.


## Box plot

</br>

A box plot is a graphic that presents the median, the first and third quartiles, and any “outliers” present in the sample.

</br>

The interquartile range (IQR) is the difference between the third quartile and the first quartile ($Q_3 - Q_1$). This is the distance needed to span the middle half of the data.

## Anatomy of a box plot

![](images/anatomy.png){fig-align="center"}

See also [**https://towardsdatascience.com/why-1-5-in-iqr-method-of-outlier-detection-5d07fdc82097**](#0){.uri}

## Box plot of Na

To create a boxplot, we use the function `boxplot()` from **seabron**.



## Outliers

</br>

Outliers are points that are much larger or smaller than the rest of the sample points.

Outliers may be data entry errors or they may be points that really are different from the rest.

Outliers should not be deleted without considerable thought—sometimes calculations and analyses will be done with and without outliers and then compared.


# [Return to main page](https://alanrvazquez.github.io/TEC-IN1002B-Website/)
